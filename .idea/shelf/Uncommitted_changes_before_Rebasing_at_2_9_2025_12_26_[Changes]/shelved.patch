Index: TravelAnalyser11/core/src/main/res/values-w820dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values-w820dp/dimens.xml b/TravelAnalyser11/core/src/main/res/values-w820dp/dimens.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values-w820dp/dimens.xml	(date 1467729866000)
@@ -0,0 +1,8 @@
+
+
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
Index: TravelAnalyser11/core/src/main/res/layout-sw600dp/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout-sw600dp/activity_login.xml b/TravelAnalyser11/core/src/main/res/layout-sw600dp/activity_login.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout-sw600dp/activity_login.xml	(date 1467729866000)
@@ -0,0 +1,112 @@
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             xmlns:tools="http://schemas.android.com/tools"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent"
+             android:background="@color/window_background"
+             android:gravity="center_vertical|center_horizontal">
+
+    <!-- Login progress -->
+    <ProgressBar
+            android:id="@+id/login_progress"
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:visibility="gone"/>
+
+    <ScrollView
+            android:id="@+id/login_form"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:fillViewport="true">
+
+        <LinearLayout
+                android:layout_width="360dp"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:layout_gravity="center"
+                android:gravity="center"
+                android:paddingBottom="@dimen/activity_margin_vertical"
+                android:paddingLeft="@dimen/activity_margin_horizontal"
+                android:paddingRight="@dimen/activity_margin_horizontal"
+                android:paddingTop="@dimen/activity_margin_vertical">
+
+            <LinearLayout
+                    android:id="@+id/app_name_container"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="24dp"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_margin="4dp"
+                        android:src="@mipmap/ic_launcher"/>
+
+                <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:gravity="center_horizontal"
+                        android:text="@string/app_name"
+                        android:layout_margin="4dp"
+                        android:textAppearance="?android:attr/textAppearanceLarge"/>
+            </LinearLayout>
+
+            <LinearLayout
+                    android:id="@+id/email_login_form"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                <EditText
+                        android:id="@+id/email"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginBottom="8dp"
+                        android:hint="@string/prompt_email"
+                        android:imeOptions="actionNext"
+                        android:inputType="textEmailAddress"
+                        android:maxLines="1"
+                        android:nextFocusDown="@+id/password"
+                        android:singleLine="true"/>
+
+                <EditText
+                        android:id="@+id/password"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="8dp"
+                        android:hint="@string/prompt_password"
+                        android:imeOptions="actionDone"
+                        android:inputType="textPassword"
+                        android:maxLines="1"
+                        android:password="true"
+                        android:singleLine="true"/>
+
+                <Button
+                        android:id="@+id/email_sign_in_button"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="24dp"
+                        android:background="@drawable/button_login_background"
+                        android:text="Log In"
+                        android:textColor="@color/textColor"
+                        android:textStyle="bold"/>
+
+            </LinearLayout>
+
+
+        </LinearLayout>
+    </ScrollView>
+
+</FrameLayout>
+
+
+
Index: TravelAnalyser11/core/src/main/res/layout-sw600dp-land/listing_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout-sw600dp-land/listing_activity.xml b/TravelAnalyser11/core/src/main/res/layout-sw600dp-land/listing_activity.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout-sw600dp-land/listing_activity.xml	(date 1467729866000)
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        android:elevation="4dp"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="@style/ToolbarOverlayTheme"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                 android:layout_width="match_parent"
+                 android:layout_height="match_parent"
+                 android:orientation="vertical">
+
+        <ImageView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="centerCrop"
+            android:src="@drawable/activity_background_image"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="horizontal">
+
+            <FrameLayout
+                android:id="@+id/content_frame"
+                android:layout_width="420dp"
+                android:layout_height="match_parent"
+                android:layout_weight="0"/>
+
+            <FrameLayout
+                android:id="@+id/detail_frame"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"/>
+
+        </LinearLayout>
+    </FrameLayout>
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values-large-land/layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values-large-land/layout.xml b/TravelAnalyser11/core/src/main/res/values-large-land/layout.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values-large-land/layout.xml	(date 1467729866000)
@@ -0,0 +1,18 @@
+
+
+<resources>
+
+    <!--
+    Layout alias to replace the single-pane version of the layout with a
+    two-pane version on Large screens. Api < 13 version
+
+    For more on layout aliases, see:
+    http://developer.android.com/training/multiscreen/screensizes.html#TaskUseAliasFilters
+    -->
+    <item name="fragment_listing" type="layout">@layout/fragment_grid</item>
+    <integer name="grid_columns">3</integer>
+    <integer name="grid_columns_3">4</integer>
+    <integer name="grid_columns_4">5</integer>
+    <bool name="tabletLayout">true</bool>
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values-sw600dp-land/layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values-sw600dp-land/layout.xml b/TravelAnalyser11/core/src/main/res/values-sw600dp-land/layout.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values-sw600dp-land/layout.xml	(date 1467729866000)
@@ -0,0 +1,18 @@
+
+
+<resources>
+
+    <!--
+    Layout alias to replace the single-pane version of the layout with a
+    two-pane version on Large screens.
+
+    For more on layout aliases, see:
+    http://developer.android.com/training/multiscreen/screensizes.html#TaskUseAliasFilters
+    -->
+    <item name="fragment_listing" type="layout">@layout/fragment_grid</item>
+    <integer name="grid_columns">3</integer>
+    <integer name="grid_columns_3">4</integer>
+    <integer name="grid_columns_4">5</integer>
+    <bool name="tabletLayout">true</bool>
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout-sw600dp-land/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout-sw600dp-land/activity_login.xml b/TravelAnalyser11/core/src/main/res/layout-sw600dp-land/activity_login.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout-sw600dp-land/activity_login.xml	(date 1467729866000)
@@ -0,0 +1,112 @@
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             xmlns:tools="http://schemas.android.com/tools"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent"
+             android:background="@color/window_background"
+             android:gravity="center_vertical|center_horizontal">
+
+    <!-- Login progress -->
+    <ProgressBar
+            android:id="@+id/login_progress"
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:visibility="gone"/>
+
+    <ScrollView
+            android:id="@+id/login_form"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:fillViewport="true">
+
+        <LinearLayout
+                android:layout_width="360dp"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:layout_gravity="center"
+                android:gravity="center"
+                android:paddingBottom="@dimen/activity_margin_vertical"
+                android:paddingLeft="@dimen/activity_margin_horizontal"
+                android:paddingRight="@dimen/activity_margin_horizontal"
+                android:paddingTop="@dimen/activity_margin_vertical">
+
+            <LinearLayout
+                    android:id="@+id/app_name_container"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="24dp"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_margin="4dp"
+                        android:src="@mipmap/ic_launcher"/>
+
+                <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:gravity="center_horizontal"
+                        android:text="@string/app_name"
+                        android:layout_margin="4dp"
+                        android:textAppearance="?android:attr/textAppearanceLarge"/>
+            </LinearLayout>
+
+            <LinearLayout
+                    android:id="@+id/email_login_form"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                <EditText
+                        android:id="@+id/email"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginBottom="8dp"
+                        android:hint="@string/prompt_email"
+                        android:imeOptions="actionNext"
+                        android:inputType="textEmailAddress"
+                        android:maxLines="1"
+                        android:nextFocusDown="@+id/password"
+                        android:singleLine="true"/>
+
+                <EditText
+                        android:id="@+id/password"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="8dp"
+                        android:hint="@string/prompt_password"
+                        android:imeOptions="actionDone"
+                        android:inputType="textPassword"
+                        android:maxLines="1"
+                        android:password="true"
+                        android:singleLine="true"/>
+
+                <Button
+                        android:id="@+id/email_sign_in_button"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="24dp"
+                        android:background="@drawable/button_login_background"
+                        android:text="Log In"
+                        android:textColor="@color/textColor"
+                        android:textStyle="bold"/>
+
+            </LinearLayout>
+
+
+        </LinearLayout>
+    </ScrollView>
+
+</FrameLayout>
+
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/MenuItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/MenuItem.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/MenuItem.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/MenuItem.java	(date 1467729866000)
@@ -0,0 +1,114 @@
+package ibmmobileappbuilder;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import ibmmobileappbuilder.actions.Action;
+
+/**
+ *
+ */
+public class MenuItem implements Parcelable {
+
+    /**
+     * Item name
+     */
+    String label;
+
+    /**
+     * An icon for this menu item
+     */
+    int iconResource;
+
+    /**
+     * an icon (external)
+     */
+    String iconUrl;
+
+    /**
+     * The class of the fragment represented by this menu item
+     */
+    Class fragmentClass;
+
+    /**
+     * The action to execute (it doesn't parcel)
+     */
+    Action action;
+
+    public String getLabel() {
+        return label;
+    }
+
+    public MenuItem setLabel(String label) {
+        this.label = label;
+        return this;
+    }
+
+    public int getIcon() {
+        return iconResource;
+    }
+
+    public MenuItem setIcon(int imgRes) {
+        this.iconResource = imgRes;
+        return this;
+    }
+
+    public String getIconUrl() {
+        return iconUrl;
+    }
+
+    public MenuItem setIconUrl(String iconUrl) {
+        this.iconUrl = iconUrl;
+        return this;
+    }
+
+    public Action getAction() {
+        return action;
+    }
+
+    public MenuItem setAction(Action action) {
+        this.action = action;
+        return this;
+    }
+
+    public Class getFragmentClass() {
+        return fragmentClass;
+    }
+
+    public MenuItem setFragmentClass(Class fragmentClass) {
+        this.fragmentClass = fragmentClass;
+        return this;
+    }
+
+    public String toString() {
+        return this.label;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeString(label);
+        parcel.writeInt(iconResource);
+        parcel.writeString(iconUrl);
+    }
+
+    public static final Creator CREATOR = new Creator() {
+
+        @Override
+        public Object createFromParcel(Parcel parcel) {
+            return new MenuItem()
+                    .setLabel(parcel.readString())
+                    .setIcon(parcel.readInt())
+                    .setIconUrl(parcel.readString());
+        }
+
+        @Override
+        public Object[] newArray(int size) {
+            return new MenuItem[size];
+        }
+    };
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Datasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Datasource.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Datasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Datasource.java	(date 1467729866000)
@@ -0,0 +1,48 @@
+package ibmmobileappbuilder.ds;
+
+import java.util.List;
+
+import ibmmobileappbuilder.ui.Filterable;
+
+/**
+ * Public interface for Asynchronous datasource
+ */
+public interface Datasource<T> extends Filterable{
+
+    /**
+     * Get all items
+     *
+     * @param listener the callback to call when this operation has finished
+     */
+    void getItems(Listener<List<T>> listener);
+
+    /**
+     * Get a concrete item
+     *
+     * @param id       the id of the item in the datasource
+     * @param listener the callback to call when this operation has finished
+     */
+    void getItem(String id, Listener<T> listener);
+
+    /**
+     * Public interface for datasource operation callbacks
+     *
+     * @param <RESULT> the type of the results
+     */
+    interface Listener<RESULT> {
+
+        /**
+         * Called on successful operations
+         *
+         * @param result the result of the operation
+         */
+        void onSuccess(RESULT result);
+
+        /**
+         * Called when something has failed
+         *
+         * @param e the thrown exception
+         */
+        void onFailure(Exception e);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/GeoDatasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/GeoDatasource.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/GeoDatasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/GeoDatasource.java	(date 1467729866000)
@@ -0,0 +1,7 @@
+package ibmmobileappbuilder.ds;
+
+/**
+ * Marker interface to be used on MapFragments to check if a datasource can display data in maps.
+ */
+public interface GeoDatasource {
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Cache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Cache.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Cache.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Cache.java	(date 1467729866000)
@@ -0,0 +1,9 @@
+package ibmmobileappbuilder.ds;
+
+/**
+ * This interface mark the datasource as cacheable
+ */
+public interface Cache {
+
+    void invalidate();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Distinct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Distinct.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Distinct.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Distinct.java	(date 1467729866000)
@@ -0,0 +1,17 @@
+package ibmmobileappbuilder.ds;
+
+import java.util.List;
+
+/**
+ * Interface for unique values retrieval operations
+ */
+public interface Distinct {
+
+    /**
+     * Get the unique values for a given column
+     * @param columnName the column name in the datasource
+     * @param listener the async listener for this operation
+     * @return The list of unique values
+     */
+    void getUniqueValuesFor(String columnName, Datasource.Listener<List<String>> listener);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Count.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Count.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Count.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Count.java	(date 1467729866000)
@@ -0,0 +1,14 @@
+package ibmmobileappbuilder.ds;
+
+/**
+ * Use this interface to mark datasources as "countable"
+ */
+public interface Count {
+
+    /**
+     * Get the size of this datasource
+     *
+     * @return the number of elements that this datasource provides
+     */
+    int getCount();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Pagination.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Pagination.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Pagination.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/Pagination.java	(date 1467729866000)
@@ -0,0 +1,27 @@
+package ibmmobileappbuilder.ds;
+
+import java.util.List;
+
+/**
+ * interface to paginated datasources
+ *
+ * @param <T> the item type
+ */
+public interface Pagination<T> {
+
+    /**
+     * return the preferred pagesize for this datasource
+     *
+     * @return the page size
+     */
+    int getPageSize();
+
+    /**
+     * Return paginated items
+     *
+     * @param pagenum       the page number
+     *                      #getPageSize()}
+     * @param listener      the listener to send the results to
+     */
+    void getItems(int pagenum, Datasource.Listener<List<T>> listener);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/ForceRefreshDatasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/ForceRefreshDatasource.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/ForceRefreshDatasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/ForceRefreshDatasource.java	(date 1467729866000)
@@ -0,0 +1,13 @@
+package ibmmobileappbuilder.ds;
+
+import java.util.List;
+
+public interface ForceRefreshDatasource<T> extends Pagination<T> {
+    /**
+     * Return paginated items
+     * @param pagenum       the page number
+     * @param forceRefresh  true if the datasource should hit the network before fetching the data
+     * @param listener      the listener to send the results to
+     */
+    void getItems(int pagenum, boolean forceRefresh, Datasource.Listener<List<T>> listener);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/RestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/RestService.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/RestService.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/RestService.java	(date 1467729866000)
@@ -0,0 +1,245 @@
+package ibmmobileappbuilder.ds;
+
+import android.text.TextUtils;
+import android.util.Base64;
+
+import com.google.gson.ExclusionStrategy;
+import com.google.gson.FieldAttributes;
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.annotations.SerializedName;
+import com.squareup.okhttp.OkHttpClient;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.concurrent.TimeUnit;
+
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.gson.DateJsonTypeAdapter;
+import ibmmobileappbuilder.gson.DecimalJsonTypeAdapter;
+import ibmmobileappbuilder.gson.IntegerJsonTypeAdapter;
+import ibmmobileappbuilder.gson.URLJsonTypeAdapter;
+import retrofit.RequestInterceptor;
+import retrofit.RestAdapter;
+import retrofit.client.Client;
+import retrofit.client.OkClient;
+import retrofit.converter.Converter;
+import retrofit.converter.GsonConverter;
+
+/**
+ * Service representing a remote API
+ * @param <R> the Java interface (retrofit) representing this api
+ */
+public abstract class RestService<R> {
+    private final Class<R> mClass;
+    Converter mConverter;
+    private R mServiceProxy;
+
+    public RestService(Class<R> clazz){
+        mClass = clazz;
+    }
+
+    /**
+     * Get the service proxy
+     *
+     * @return the R retrofit proxy
+     */
+    public R getServiceProxy() {
+        if (mServiceProxy == null) {
+            RestAdapter restAdapter = createRestAdapterBuilder();
+            mServiceProxy = restAdapter.create(mClass);
+        }
+        return mServiceProxy;
+    }
+
+    protected RestAdapter createRestAdapterBuilder() {
+        RestAdapter.Builder builder = new RestAdapter.Builder()
+                .setClient(getClient())
+                .setEndpoint(getServerUrl())
+                .setConverter(getConverter())
+                .setLogLevel(getLogLevel());
+
+        if (!(tryApiKey(builder) || tryBasicAuth(builder))) {
+            throw new IllegalArgumentException("AppNow datasource needs an api key or user-pwd pair !");
+        }
+
+        return builder.build();
+    }
+
+    protected boolean tryApiKey(RestAdapter.Builder builder) {
+        final String apiKey = getApiKey();
+        if (apiKey == null){
+            return false;
+        }
+
+        builder.setRequestInterceptor(new RequestInterceptor() {
+            @Override
+            public void intercept(RequestFacade request) {
+                request.addHeader("apikey", apiKey);
+            }
+        });
+
+        return true;
+    }
+
+    protected boolean tryBasicAuth(RestAdapter.Builder builder) {
+        final String user = getApiUser();
+        final String pwd = getApiPassword();
+
+        if(user == null || pwd == null){
+            return false;
+        }
+
+        builder.setRequestInterceptor(new RequestInterceptor() {
+            @Override
+            public void intercept(RequestFacade request) {
+                String credentials = user + ":" + pwd;
+                String base64EncodedCredentials = Base64
+                        .encodeToString(credentials.getBytes(), Base64.NO_WRAP);
+                request.addHeader("Authorization", "Basic " + base64EncodedCredentials);
+            }
+        });
+
+        return true;
+    }
+
+    protected String getConditions(SearchOptions options, String[] searchCols){
+        if(options == null)
+            return null;
+
+        ArrayList<String> exps = new ArrayList<>();
+        if(options.getFilters() != null) {
+            for (Filter filter : options.getFilters()) {
+                String qs = filter.getQueryString();
+                if (qs != null)
+                    exps.add(qs);
+            }
+        }
+
+        // TODO: Add full text search $text
+        String st = options.getSearchText();
+        if (st != null && searchCols != null && searchCols.length > 0){
+            ArrayList<String> searches = new ArrayList<>();
+            for(String col: searchCols){
+                searches.add("{\"" + col + "\":{\"$regex\":\"" + st + "\",\"$options\":\"i\"}}");
+            }
+            String searchExp = "\"$or\":[" + TextUtils.join(",", searches) + "]";
+            exps.add(searchExp);
+        }
+
+        if (exps.size() > 0)
+            return "{" + TextUtils.join(",", exps) + "}";
+
+        return null;
+    }
+
+    protected String getSort(SearchOptions options){
+        String col = options.getSortColumn();
+        boolean asc = options.isSortAscending();
+
+        if(col == null)
+            return null;
+
+        if (!asc)
+            col = "-" + col;
+
+        return col;
+    }
+
+    protected Converter createConverter() {
+        // Initialize the rest backend
+        Gson gson = new GsonBuilder()
+                .serializeNulls()
+                .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY)    // field policy
+                .registerTypeAdapter(Integer.class, new IntegerJsonTypeAdapter())
+                .registerTypeAdapter(Double.class, new DecimalJsonTypeAdapter())
+                .registerTypeAdapter(Date.class, new DateJsonTypeAdapter())  // Date conversions for allowed formats
+                .registerTypeAdapter(URL.class, new URLJsonTypeAdapter())
+                .addSerializationExclusionStrategy(new ExclusionStrategy() {
+                    @Override
+                    public boolean shouldSkipField(FieldAttributes f) {
+                        // disable rest _id (most times are mongo attributes) serialization
+                        // this could slow down serialization,
+                        // but luckily gson is caching the result
+                        SerializedName annotation = f.getAnnotation(SerializedName.class);
+                        return annotation != null && annotation.value().equals("_id");
+                    }
+
+                    @Override
+                    public boolean shouldSkipClass(Class<?> clazz) {
+                        return false;
+                    }
+                })
+                .create();
+
+        return new GsonConverter(gson);
+    }
+
+    protected Converter getConverter() {
+        if (mConverter == null) {
+            mConverter = createConverter();
+        }
+
+        return mConverter;
+    }
+
+    /**
+     * Override this to customise the log level
+     *
+     * @return the LogLevel
+     */
+    protected RestAdapter.LogLevel getLogLevel() {
+        return RestAdapter.LogLevel.NONE;
+    }
+
+    /**
+     * Override this to customize client
+     */
+    protected Client getClient() {
+        OkHttpClient c = new OkHttpClient();
+        c.setConnectTimeout(getHttpClientTimeout(), TimeUnit.SECONDS);
+        return new OkClient(c);
+    }
+
+    /**
+     * Set the connection timeout, override to customize
+     *
+     * @return the timeout in seconds
+     */
+    protected long getHttpClientTimeout() {
+        return 5;
+    }
+
+    /**
+     * Get the api key for this datasource
+     *
+     * @return null if no api key is present, or the api key to enable basic auth
+     */
+    protected String getApiKey() {
+        return null;
+    }
+
+    protected String getApiUser(){
+        return null;
+    }
+
+    protected String getApiPassword(){
+        return null;
+    }
+
+    /**
+     * Get the base url for this retrofit endpoint
+     *
+     * @return the base url
+     */
+    public abstract String getServerUrl();
+
+    /**
+     * Get the url for a image resource in this datasource
+     * @param path the image path (can be relative or absolute)
+     * @return the URL object you can pass to an ImageLoader class
+     */
+    public abstract URL getImageUrl(String path);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/CrudDatasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/CrudDatasource.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/CrudDatasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/CrudDatasource.java	(date 1467729866000)
@@ -0,0 +1,38 @@
+package ibmmobileappbuilder.ds;
+
+import java.util.List;
+
+public interface CrudDatasource<T> extends Datasource<T> {
+
+    /**
+     * Creates an item in the Datasource
+     *
+     * @param item the item to store.
+     * @param listener to get notified about the operation result
+     */
+    void create(T item, Listener<T> listener);
+
+    /**
+     * Updates an item in the Datasource
+     *
+     * @param item the item to update.
+     * @param listener to get notified about the operation result
+     */
+    void updateItem(T item, Listener<T> listener);
+
+    /**
+     * Deletes an item in the Datasource
+     *
+     * @param item the item to delete.
+     * @param listener to get notified about the operation result
+     */
+    void deleteItem(T item, Listener<T> listener);
+
+    /**
+     * Deletes multiple items in the Datasource
+     *
+     * @param items the items to delete.
+     * @param listener to get notified about the operation result
+     */
+    void deleteItems(List<T> items, Listener<T> listener);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RangeFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RangeFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RangeFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RangeFilter.java	(date 1467729866000)
@@ -0,0 +1,8 @@
+package ibmmobileappbuilder.ds.filter;
+
+public interface RangeFilter<T> extends Filter<T> {
+
+    T getMin();
+    T getMax();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/SearchOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/SearchOptions.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/SearchOptions.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/SearchOptions.java	(date 1467729866000)
@@ -0,0 +1,128 @@
+package ibmmobileappbuilder.ds;
+
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+
+import ibmmobileappbuilder.ds.filter.Filter;
+
+public class SearchOptions {
+
+    private String searchText;
+    //Extract sortOptions class
+    private String sortColumn;
+    private Comparator sortComparator;
+    private boolean sortAscending;
+    private List<Filter> filters = new ArrayList<>();
+    private List<Filter> fixedFilters = new ArrayList<>();     // set here filters users won't be able to change
+
+    public SearchOptions() {
+    }
+
+    public SearchOptions(String searchText, String sortColumn, Comparator sortComparator,
+                         boolean sortAscending) {
+        this.searchText = searchText;
+        this.sortColumn = sortColumn;
+        this.sortComparator = sortComparator;
+        this.sortAscending = sortAscending;
+    }
+
+    private SearchOptions(Builder builder) {
+        this.searchText = builder.searchText;
+        this.sortColumn = builder.sortColumn;
+        this.sortComparator = builder.sortComparator;
+        this.sortAscending = builder.sortAscending;
+        this.filters = builder.filters;
+        this.fixedFilters = builder.fixedFilters;
+    }
+
+    public String getSearchText() {
+        return searchText;
+    }
+
+    public void setSearchText(String searchText) {
+        this.searchText = searchText;
+    }
+
+    public Comparator getSortComparator() {
+        return sortComparator;
+    }
+
+    public String getSortColumn() {
+        return sortColumn;
+    }
+
+
+    public boolean isSortAscending() {
+        return sortAscending;
+    }
+
+    public void addFilter(Filter filter) {
+        if (this.filters == null) {
+            this.filters = new ArrayList<>();
+        }
+
+        this.filters.add(filter);
+    }
+
+    public List<Filter> getFilters() {
+        return this.filters;
+    }
+
+    public void setFilters(List<Filter> filters) {
+        this.filters = filters;
+    }
+
+    public List<Filter> getFixedFilters() {
+        return fixedFilters;
+    }
+
+    public static class Builder {
+        private String searchText;
+        private String sortColumn;
+        private Comparator sortComparator;
+        private boolean sortAscending;
+        private List<Filter> filters = new ArrayList<>();
+        private List<Filter> fixedFilters = new ArrayList<>();
+
+        public static Builder searchOptions() {
+            return new Builder();
+        }
+
+        public Builder withSearchText(String searchText) {
+            this.searchText = searchText;
+            return this;
+        }
+
+        public Builder withSortColumn(String sortColumn) {
+            this.sortColumn = sortColumn;
+            return this;
+        }
+
+        public Builder withSortComparator(Comparator sortComparator) {
+            this.sortComparator = sortComparator;
+            return this;
+        }
+
+        public Builder withSortAscending(boolean sortAscending) {
+            this.sortAscending = sortAscending;
+            return this;
+        }
+
+        public Builder withFilters(List<Filter> filters) {
+            this.filters.clear();
+            this.filters.addAll(filters);
+            return this;
+        }
+
+        public Builder withFixedFilters(List<Filter> fixedFilters) {
+            this.fixedFilters.clear();
+            this.fixedFilters.addAll(fixedFilters);
+            return this;
+        }
+
+        public SearchOptions build() {
+            return new SearchOptions(this);
+        }
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/NumberFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/NumberFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/NumberFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/NumberFilter.java	(date 1467729866000)
@@ -0,0 +1,35 @@
+package ibmmobileappbuilder.ds.filter;
+
+/**
+ * Created by jiparis on 15/09/2015.
+ */
+public class NumberFilter implements IdentityFilter<Number>{
+
+    private final Number value;
+    private final String field;
+
+    public NumberFilter(String field, Number value){
+        this.field = field;
+        this.value = value;
+    }
+
+    @Override
+    public String getField() {
+        return field;
+    }
+
+    @Override
+    public String getQueryString() {
+        return "\"" + field + "\":{\"$eq\":" + value + "}";
+    }
+
+    @Override
+    public boolean applyFilter(Number fieldValue) {
+        return (value == null) || value.equals(fieldValue);
+    }
+
+    @Override
+    public Number getValue() {
+        return value;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/Filter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/Filter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/Filter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/Filter.java	(date 1467729866000)
@@ -0,0 +1,30 @@
+package ibmmobileappbuilder.ds.filter;
+
+/**
+ * Interface for datasource filtering
+ * fixme its not flexible at all...REDO!
+ */
+public interface Filter<T> {
+
+    /**
+     * The field this filter is based on
+     *
+     * @return the field that this field is targeting
+     */
+    String getField();
+
+    /**
+     * Get the query string for this filter (for remote datasources)
+     *
+     * @return the query string representation for this filter, MongoDB format. Example:
+     * "country":"Spain","date":"10/14"
+     * <br>
+     *     Note: Don't surround it with curly brackets.
+     */
+    String getQueryString();
+
+    /**
+     * Apply this filter
+     */
+    boolean applyFilter(T fieldValue);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringIdentityFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringIdentityFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringIdentityFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringIdentityFilter.java	(date 1467729866000)
@@ -0,0 +1,34 @@
+package ibmmobileappbuilder.ds.filter;
+
+public class StringIdentityFilter implements IdentityFilter<String> {
+
+    private String field;
+    private String value;
+
+    public StringIdentityFilter(String field, String value){
+        this.field = field;
+        this.field = field;
+        this.value = value;
+        this.value = value;
+    }
+
+    @Override
+    public String getValue() {
+        return value;
+    }
+
+    @Override
+    public String getField() {
+        return field;
+    }
+
+    @Override
+    public String getQueryString() {
+        return "\"" + field + "\":{\"$eq\":" + value + "}";
+    }
+
+    @Override
+    public boolean applyFilter(String fieldValue) {
+        return (value == null) || (fieldValue != null && fieldValue.equalsIgnoreCase(value));
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringListFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringListFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringListFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringListFilter.java	(date 1467729866000)
@@ -0,0 +1,39 @@
+package ibmmobileappbuilder.ds.filter;
+
+import android.text.TextUtils;
+
+import java.util.List;
+
+/**
+ * A filter that matches a field against a value list
+ */
+public class StringListFilter implements InFilter<String> {
+
+    private String field;
+    private List<String> values;
+
+    public StringListFilter(String field, List<String> values) {
+        this.field = field;
+        this.values = values;
+    }
+
+    @Override
+    public String getField() {
+        return field;
+    }
+
+    @Override
+    public String getQueryString() {
+        return "\"" + field + "\":{\"$in\":[\"" + TextUtils.join("\", \"", values) + "\"]}";
+    }
+
+    @Override
+    public boolean applyFilter(String fieldValue) {
+        return values == null || values.isEmpty() || values.contains(fieldValue);
+    }
+
+    @Override
+    public List<String> getValues() {
+        return values;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/IdentityFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/IdentityFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/IdentityFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/IdentityFilter.java	(date 1467729866000)
@@ -0,0 +1,9 @@
+package ibmmobileappbuilder.ds.filter;
+
+/**
+ * Identity Filter
+ * @param <T> the type to be filtered
+ */
+public interface IdentityFilter<T> extends Filter<T> {
+    T getValue();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/InFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/InFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/InFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/InFilter.java	(date 1467729866000)
@@ -0,0 +1,7 @@
+package ibmmobileappbuilder.ds.filter;
+
+import java.util.List;
+
+public interface InFilter<T> extends Filter<T> {
+    List<T> getValues();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/ContainsFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/ContainsFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/ContainsFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/ContainsFilter.java	(date 1467729866000)
@@ -0,0 +1,5 @@
+package ibmmobileappbuilder.ds.filter;
+
+public interface ContainsFilter extends Filter<String> {
+    String getValue();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RegularExpFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RegularExpFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RegularExpFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/RegularExpFilter.java	(date 1467729866000)
@@ -0,0 +1,41 @@
+package ibmmobileappbuilder.ds.filter;
+
+import java.util.regex.Pattern;
+
+/**
+ * A filter that matches a field against a regular expression
+ */
+public class RegularExpFilter implements Filter<String> {
+
+    private String field;
+    private String value;
+
+    public RegularExpFilter(String field, String value) {
+        this.field = field;
+        this.value = value;
+    }
+
+    @Override
+    public String getField() {
+        return field;
+    }
+
+    @Override
+    public String getQueryString() {
+        StringBuilder sb = new StringBuilder();
+        //searches.add("{\"" + col + "\":{\"$regex\":\"" + st + "\",\"$options\":\"i\"}}");
+        sb.append("\"")
+                .append(field)
+                .append("\":{\"$regex\":\"")
+                .append(value)
+                .append("\",\"$options\":\"i\"}");
+
+        return sb.toString();
+    }
+
+    @Override
+    public boolean applyFilter(String fieldValue) {
+        Pattern p = Pattern.compile(value);
+        return p.matcher(fieldValue).matches();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/StringFilter.java	(date 1467729866000)
@@ -0,0 +1,33 @@
+package ibmmobileappbuilder.ds.filter;
+
+public class StringFilter implements ContainsFilter {
+
+    private final String value;
+    private final String field;
+
+    public StringFilter(String field, String value){
+        this.field = field;
+        this.value = value;
+    }
+
+    @Override
+    public String getField() {
+        return field;
+    }
+
+    @Override
+    public String getQueryString() {
+        return "\"" + field + "\":{\"$regex\":\"" + value + "\",\"$options\":\"i\"}";
+    }
+
+    @Override
+    public boolean applyFilter(String fieldValue) {
+        return (value == null) ||
+                (fieldValue != null && fieldValue.toLowerCase().contains(value.toLowerCase()));
+    }
+
+    @Override
+    public String getValue() {
+        return value;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/DateRangeFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/DateRangeFilter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/DateRangeFilter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/filter/DateRangeFilter.java	(date 1467729866000)
@@ -0,0 +1,93 @@
+package ibmmobileappbuilder.ds.filter;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.TimeZone;
+
+/**
+ * A date range filter
+ */
+public class DateRangeFilter implements RangeFilter<Date> {
+
+    private String field;
+    private Date min;
+    private Date max;
+
+    public DateRangeFilter(String field, Date min, Date max) {
+        this.field = field;
+        this.max = max;
+        this.min = min;
+    }
+
+    @Override
+    public String getField() {
+        return field;
+    }
+
+    @Override
+    public String getQueryString() {
+        StringBuilder sb = new StringBuilder()
+                .append("\"").append(field).append("\":");
+
+        sb.append("{");
+        if (min != null) {
+            sb.append("\"$gte\":").append(dateToISO(min));
+        }
+
+        if (max != null) {
+            if (min != null) {
+                sb.append(",");
+            }
+            sb.append("\"$lte\":").append(dateToISO(max));
+        }
+        sb.append("}");
+
+        return sb.toString();
+    }
+
+    @Override
+    public boolean applyFilter(Date fieldValue) {
+        if (fieldValue == null) {
+            return false;
+        }
+        Calendar cal = Calendar.getInstance();
+        cal.setTime(fieldValue);
+
+        if (min != null) {
+            Calendar minCal = Calendar.getInstance();
+            minCal.setTime(min);
+            if (!cal.after(minCal)) {
+                return false;
+            }
+        }
+        if (max != null) {
+            Calendar maxCal = Calendar.getInstance();
+            maxCal.setTime(max);
+            if (!cal.before(maxCal)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public Date getMin() {
+        return min;
+    }
+
+    @Override
+    public Date getMax() {
+        return max;
+    }
+
+    private String dateToISO(Date date) {
+        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
+        format.setTimeZone(TimeZone.getTimeZone("UTC"));
+        return new StringBuilder("\"")
+                .append(format.format(date))
+                        .append("\"")
+                        .toString();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayWithFilename.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayWithFilename.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayWithFilename.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayWithFilename.java	(date 1467729866000)
@@ -0,0 +1,17 @@
+package ibmmobileappbuilder.ds.restds;
+
+import retrofit.mime.TypedByteArray;
+
+public class TypedByteArrayWithFilename extends TypedByteArray {
+
+    private String fileName;
+
+    public TypedByteArrayWithFilename(String mimeType, byte[] bytes, String fileName) {
+        super(mimeType, bytes);
+        this.fileName = fileName;
+    }
+
+    @Override public String fileName() {
+        return fileName;
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/AppNowDatasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/AppNowDatasource.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/AppNowDatasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/AppNowDatasource.java	(date 1467729866000)
@@ -0,0 +1,116 @@
+package ibmmobileappbuilder.ds.restds;
+
+import android.text.TextUtils;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import ibmmobileappbuilder.ds.CrudDatasource;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.Distinct;
+import ibmmobileappbuilder.ds.GeoDatasource;
+import ibmmobileappbuilder.ds.Pagination;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import retrofit.client.Response;
+
+/**
+ * AppNow Datasource
+ */
+public abstract class AppNowDatasource<T> implements CrudDatasource<T>, Pagination<T>, Distinct, GeoDatasource {
+
+    protected SearchOptions searchOptions;
+
+    public AppNowDatasource(SearchOptions searchOptions) {
+        this.searchOptions = searchOptions;
+    }
+
+    @Override
+    public void onSearchTextChanged(String s){
+        searchOptions.setSearchText(s);
+    }
+
+    @Override
+    public void addFilter(Filter filter){
+        searchOptions.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        searchOptions.setFilters(null);
+    }
+
+    // Utility methods
+    protected String getConditions(SearchOptions options, String[] searchCols){
+        if(options == null)
+            return null;
+
+        // Filters
+        ArrayList<String> exps = new ArrayList<>();
+
+        addFilters(exps, options.getFilters(), false);
+        addFilters(exps, options.getFixedFilters(), true);
+
+        // TODO: support full text search with $text
+        String st = options.getSearchText();
+        if (st != null && searchCols != null && searchCols.length > 0){
+            ArrayList<String> searches = new ArrayList<>();
+            for(String col: searchCols){
+                searches.add("{\"" + col + "\":{\"$regex\":\"" + st + "\",\"$options\":\"i\"}}");
+            }
+            String searchExp = "\"$or\":[" + TextUtils.join(",", searches) + "]";
+            exps.add(searchExp);
+        }
+
+        if (exps.size() > 0)
+            return "{" + TextUtils.join(",", exps) + "}";
+
+        return null;
+    }
+
+    private void addFilters(ArrayList<String> exps, List<Filter> filters, boolean fixed){
+
+        if(filters != null){
+            List<String> filterExps = new ArrayList<>();
+
+            for(Filter filter: filters){
+                String qs = filter.getQueryString();
+                if (qs != null)
+                    filterExps.add(qs);
+            }
+
+            if(filterExps.size() > 0) {
+                if(fixed)
+                    exps.add("\"$and\":[{" + TextUtils.join("},{", filterExps) + "}]");
+                else
+                    exps.addAll(filterExps);
+            }
+        }
+
+    }
+
+    protected String getSort(SearchOptions options){
+        if(options == null)
+            return null;
+
+        String col = options.getSortColumn();
+        boolean asc = options.isSortAscending();
+
+        if(col == null)
+            return null;
+
+        if (!asc)
+            col = "-" + col;
+
+        return col;
+    }
+
+    /**
+     * Get the url for a image resource in this datasource
+     * @param path the image path (can be relative or absolute)
+     * @return the URL object you can pass to an ImageLoader class
+     */
+    public abstract URL getImageUrl(String path);
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/TypedByteArrayUtils.java	(date 1467729866000)
@@ -0,0 +1,113 @@
+package ibmmobileappbuilder.ds.restds;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.media.ExifInterface;
+import android.net.Uri;
+import android.support.annotation.Nullable;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Random;
+
+import ibmmobileappbuilder.util.image.BitmapUtil;
+import retrofit.mime.TypedByteArray;
+
+import static android.media.ExifInterface.TAG_ORIENTATION;
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+import static ibmmobileappbuilder.util.image.BitmapUtil.rotateBitmap;
+
+public class TypedByteArrayUtils {
+    private static final Random RANDOM = new Random();
+
+    @Nullable
+    public static TypedByteArray fromBitmapPath(String bitmapPath) {
+        if (bitmapPath == null) {
+            return null;
+        }
+
+        Bitmap bitmap = BitmapFactory.decodeFile(bitmapPath);
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        try {
+            ExifInterface exifInterface = new ExifInterface(bitmapPath);
+            bitmap = rotateBitmapIfRequired(bitmap,
+                    exifInterface.getAttributeInt(TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL)
+            );
+            bitmap.compress(Bitmap.CompressFormat.JPEG, 95, stream);
+        } catch (IOException e) {
+            analyticsReporter(getApplicationContext()).sendHandledException("TypedByteArrayUtils",
+                    "IOException",
+                    e
+            );
+            return null;
+        }
+        return new TypedByteArrayWithFilename("image/jpeg", stream.toByteArray(), getTempName());
+    }
+
+    @Nullable
+    public static TypedByteArray fromUri(Uri bitmapUri) {
+        if (bitmapUri == null) {
+            return null;
+        }
+        String path = bitmapUri.getPath();
+        return new File(path).exists() ? fromBitmapPath(path) : fromGalleryUri(bitmapUri);
+    }
+
+    @Nullable
+    private static TypedByteArray fromGalleryUri(Uri bitmapUri) {
+        if (bitmapUri == null) {
+            return null;
+        }
+
+        InputStream inputStream;
+        try {
+            inputStream = getApplicationContext().getContentResolver().openInputStream(
+                    bitmapUri
+            );
+            int exifOrientation = BitmapUtil.getExifOrientation(getApplicationContext(), bitmapUri);
+            return fromBitmap(rotateBitmap(BitmapFactory.decodeStream(inputStream),
+                            exifOrientation
+                    )
+            );
+        } catch (IOException e) {
+            analyticsReporter(getApplicationContext()).sendHandledException("TypedByteArrayUtils",
+                    "IOException",
+                    e
+            );
+            return null;
+        }
+    }
+
+    @Nullable
+    private static TypedByteArray fromBitmap(Bitmap bitmap) {
+        if (bitmap == null) {
+            return null;
+        }
+
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        bitmap.compress(Bitmap.CompressFormat.JPEG, 95, stream);
+        return new TypedByteArrayWithFilename("image/jpeg", stream.toByteArray(), getTempName());
+    }
+
+    private static Bitmap rotateBitmapIfRequired(Bitmap bitmap, int exifOrientation) {
+        switch (exifOrientation) {
+            case ExifInterface.ORIENTATION_ROTATE_90:
+                return rotateBitmap(bitmap, 90);
+            case ExifInterface.ORIENTATION_ROTATE_180:
+                return rotateBitmap(bitmap, 180);
+            case ExifInterface.ORIENTATION_ROTATE_270:
+                return rotateBitmap(bitmap, 270);
+            default:
+                return bitmap;
+
+        }
+    }
+
+
+    private static String getTempName() {
+        return "image" + RANDOM.nextInt() + ".jpg";
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/GeoPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/GeoPoint.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/GeoPoint.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/GeoPoint.java	(date 1467729866000)
@@ -0,0 +1,39 @@
+package ibmmobileappbuilder.ds.restds;
+
+import com.google.gson.annotations.SerializedName;
+
+import java.util.Locale;
+
+/**
+ * Representation of a GeoJson point:
+ * http://geojson.org/geojson-spec.html#point
+ * [longitude, latitude]
+ */
+public class GeoPoint {
+    public static final int LONGITUDE_INDEX = 0;
+    public static final int LATITUDE_INDEX = 1;
+
+    @SerializedName("type")
+    public String type = "Point";
+    @SerializedName("coordinates")
+    public double[] coordinates = new double[]{0, 0};
+
+    public GeoPoint(){}
+
+    public GeoPoint(double lon, double lat){
+        this.coordinates[LONGITUDE_INDEX] = lon;
+        this.coordinates[LATITUDE_INDEX] = lat;
+    }
+
+    public GeoPoint(double[] coords){
+        this.coordinates = coords;
+    }
+
+    @Override
+    public String toString() {
+        return String.format(Locale.US,
+                "%.8f, %.8f",
+                coordinates[LATITUDE_INDEX],
+                coordinates[LONGITUDE_INDEX]);
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseFragment.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseFragment.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseFragment.java	(date 1467729866000)
@@ -0,0 +1,175 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ibmmobileappbuilder.actions.Action;
+import ibmmobileappbuilder.behaviors.Behavior;
+import ibmmobileappbuilder.mvp.presenter.Presenter;
+
+/**
+ * Base fragment with common support code (bus registration, etc)
+ */
+public class BaseFragment extends Fragment {
+
+    protected List<Behavior> behaviors = new ArrayList<>();
+    protected Presenter presenter;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // we want to add buttons to the actionbar
+        setHasOptionsMenu(true);
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        for (Behavior behavior : behaviors) {
+            behavior.onStart();
+        }
+    }
+
+    // fragment lifecygle
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (presenter != null) {
+            presenter.startPresenting();
+        }
+
+        for (Behavior b : behaviors) {
+            b.onResume();
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (presenter != null) {
+            presenter.stopPresenting();
+        }
+        for (Behavior b : behaviors) {
+            b.onPause();
+        }
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        for (Behavior behavior : behaviors) {
+            behavior.onStop();
+        }
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        for (Behavior b : behaviors) {
+            b.onViewCreated(view, savedInstanceState);
+        }
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        for (Behavior b : behaviors) {
+            b.onCreateOptionsMenu(menu, inflater);
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        boolean managed = false;
+        for (Behavior b : behaviors) {
+            managed = managed || b.onOptionsItemSelected(item);
+        }
+        return managed;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        for (Behavior b : behaviors) {
+            b.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+
+        // clear resources
+        behaviors.clear();
+    }
+
+    /**
+     * Adds a {@link Behavior} to this fragment
+     *
+     * @param behavior the behavior to add to this fragment
+     */
+    public void addBehavior(Behavior behavior) {
+        this.behaviors.add(behavior);
+    }
+
+    /**
+     * Sets the {@link Presenter} instance for this fragment view
+     * This is not mandatory, but calling this method will sync fragment and presenter life cycles
+     *
+     * @param presenter the presenter for this view
+     */
+    public void setPresenter(Presenter presenter) {
+        this.presenter = presenter;
+    }
+
+    /**
+     * Returns the {@link Presenter} configured for this view
+     *
+     * @return
+     */
+    public Presenter getPresenter() {
+        return this.presenter;
+    }
+
+    /**
+     * Binds a view to an action, so that the action is executed on click event
+     *
+     * @param view   the view to bind the action to
+     * @param action the action to bind to the view
+     */
+    protected void bindAction(View view, final Action action) {
+        view.setOnClickListener(
+                new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        action.execute(v.getContext());
+                        for (Behavior behavior : behaviors) {
+                            behavior.onActionClick(action.getAnalyticsInfo());
+                        }
+                    }
+                }
+        );
+    }
+
+    /**
+     * Generic event handler
+     */
+    public void onEvent(Object o) {
+        // noop
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/RestDatasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/RestDatasource.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/RestDatasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ds/restds/RestDatasource.java	(date 1467729866000)
@@ -0,0 +1,244 @@
+package ibmmobileappbuilder.ds.restds;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import com.squareup.okhttp.OkHttpClient;
+
+import android.text.TextUtils;
+import android.util.Base64;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.gson.DateJsonTypeAdapter;
+import ibmmobileappbuilder.gson.DecimalJsonTypeAdapter;
+import ibmmobileappbuilder.gson.IntegerJsonTypeAdapter;
+import ibmmobileappbuilder.gson.URLJsonTypeAdapter;
+import retrofit.RequestInterceptor;
+import retrofit.RestAdapter;
+import retrofit.client.Client;
+import retrofit.client.OkClient;
+import retrofit.converter.Converter;
+import retrofit.converter.GsonConverter;
+
+/**
+ * Datasource backed with Retrofit framework
+ *
+ * @param <T> the entity type this datasource returns
+ * @param <R> the interface class that defines this retrofit service
+ */
+public abstract class RestDatasource<T, R> implements Datasource<T> {
+
+    protected SearchOptions searchOptions;
+
+    private Class<R> serviceInterface;
+    private Converter converter;
+    private R serviceProxy;
+
+    public RestDatasource(Class<R> clazz, SearchOptions searchOptions) {
+        this.serviceInterface = clazz;
+        this.searchOptions = searchOptions;
+    }
+
+
+    @Override
+    public void onSearchTextChanged(String s){
+        searchOptions.setSearchText(s);
+    }
+
+    @Override
+    public void addFilter(Filter filter){
+        searchOptions.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        searchOptions.setFilters(null);
+    }
+
+    /**
+     * Get the service proxy
+     *
+     * @return the R retrofit proxy
+     */
+    protected R getServiceProxy() {
+        if (serviceProxy == null) {
+            RestAdapter restAdapter = createRestAdapterBuilder().build();
+            serviceProxy = restAdapter.create(serviceInterface);
+        }
+        return serviceProxy;
+    }
+
+    /**
+     * Sets the service interface for this Retrofit datasource
+     *
+     * @param clazz the service interface
+     */
+    public void setServiceInterface(Class clazz) {
+        this.serviceInterface = clazz;
+    }
+
+    /**
+     * Creates the Retrofit Converter used for this datasource. Override this
+     * to set your own configuration
+     *
+     * @return the Converter object
+     */
+    protected Converter createConverter() {
+        // Initialize the rest backend
+        Gson gson = new GsonBuilder()
+                .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY)    // field policy
+                .registerTypeAdapter(Integer.class, new IntegerJsonTypeAdapter())
+                .registerTypeAdapter(Double.class, new DecimalJsonTypeAdapter())
+                .registerTypeAdapter(Date.class, new DateJsonTypeAdapter())  // Date conversions for allowed formats
+                .registerTypeAdapter(URL.class, new URLJsonTypeAdapter())
+                .create();
+
+        return new GsonConverter(gson);
+    }
+
+    protected Converter getConverter() {
+        if (converter == null) {
+            converter = createConverter();
+        }
+
+        return converter;
+    }
+
+    /**
+     * Create a builder for this datasource
+     *
+     * @return the Retrofit builder object
+     */
+    protected RestAdapter.Builder createRestAdapterBuilder() {
+        RestAdapter.Builder builder = new RestAdapter.Builder()
+                .setClient(getClient())
+                .setEndpoint(getServerUrl())
+                .setConverter(getConverter())
+                .setLogLevel(getLogLevel());
+
+        // we use basic auth based on app-id:api-key
+        if (getApiKey() != null) {
+            builder.setRequestInterceptor(new RequestInterceptor() {
+                @Override
+                public void intercept(RequestFacade request) {
+                    String credentials = getAppId() + ":" + getApiKey();
+                    String base64EncodedCredentials = Base64
+                            .encodeToString(credentials.getBytes(), Base64.NO_WRAP);
+                    request.addHeader("Authorization", "Basic " + base64EncodedCredentials);
+
+                    String token = getToken();
+                    if (token != null) {
+                        request.addHeader("UserToken", token);
+                    }
+                }
+            });
+        }
+
+        return builder;
+    }
+
+    protected String getFilterQuery(SearchOptions options){
+
+        ArrayList<String> conditions = new ArrayList<>();
+
+        addFilters(conditions, options.getFixedFilters());
+        addFilters(conditions, options.getFilters());
+
+        if (conditions.size() > 0){
+            return "[" + TextUtils.join(",", conditions) + "]";
+        }
+
+        return null;
+    }
+
+    private void addFilters(ArrayList<String> exps, List<Filter> filters) {
+        if(filters != null) {
+            for (Filter filter : filters) {
+                String qs = filter.getQueryString();
+                if (qs != null)
+                    exps.add("{" + qs + "}");
+            }
+        }
+    }
+
+    /**
+     * Override this to customise the log level
+     *
+     * @return the LogLevel
+     */
+    protected RestAdapter.LogLevel getLogLevel() {
+        return RestAdapter.LogLevel.NONE;
+    }
+
+    /**
+     * Override this to customize client
+     */
+    protected Client getClient() {
+        OkHttpClient c = new OkHttpClient();
+        c.setConnectTimeout(getHttpClientTimeout(), TimeUnit.SECONDS);
+        return new OkClient(c);
+    }
+
+    // API
+
+    /**
+     * Get the base url for this retrofit endpoint
+     *
+     * @return the base url
+     */
+    public abstract String getServerUrl();
+
+    /**
+     * Get the api key for this datasource
+     *
+     * @return null if no api key is present, or the api key to enable basic auth
+     */
+    protected String getApiKey() {
+        return null;
+    }
+
+    /**
+     * Get the App Id
+     *
+     * @return the app id
+     */
+    protected String getAppId() {
+        return null;
+    }
+
+    /**
+     * Get the token required for retrieve secured data
+     *
+     * @return the token
+     */
+    protected String getToken() {
+        return null;
+    }
+
+    /**
+     * Get the username required for retrieve secured data
+     *
+     * @return the user
+     */
+    protected String getUserId() {
+        return null;
+    }
+
+    /**
+     * Set the connection timeout, override to customize
+     *
+     * @return the timeout in seconds
+     */
+    protected long getHttpClientTimeout() {
+        return 5;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/ListGridFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/ListGridFragment.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/ListGridFragment.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/ListGridFragment.java	(date 1467729866000)
@@ -0,0 +1,415 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.LayoutRes;
+import android.support.design.widget.Snackbar;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import java.util.Date;
+import java.util.List;
+
+import ibmmobileappbuilder.adapters.DatasourceAdapter;
+import ibmmobileappbuilder.adapters.PaginationAwareAdapter;
+import ibmmobileappbuilder.behaviors.AnalyticsSwipeRefreshBehavior;
+import ibmmobileappbuilder.behaviors.Behavior;
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.Pagination;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.DateRangeFilter;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.ds.filter.StringListFilter;
+import ibmmobileappbuilder.mvp.presenter.ListCrudPresenter;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.util.EndlessScrollListener;
+
+/**
+ * A fragment representing a list of Items that come from a datasource. Subclasses must
+ * implement the {@link ListGridFragment#getDatasource()}, and
+ * {@link #bindView(Object, View, int)} methods.
+ * <p/>
+ * Large screen devices (such as tablets) are supported by replacing the ListView
+ * with a GridView, dinamically.
+ * <p/>
+ */
+public abstract class ListGridFragment<T>
+        extends BaseFragment
+        implements Refreshable, Filterable, ibmmobileappbuilder.mvp.view.ListView<T>,
+        AbsListView.OnItemClickListener, AbsListView.OnItemLongClickListener {
+
+    /**
+     * The fragment's ListView/GridView.
+     */
+    private AbsListView listView;
+
+    /**
+     * The Adapter which will be used to populate the ListView/GridView with
+     * Views.
+     */
+    private DatasourceAdapter<T> adapter;
+    private Datasource<T> datasource;
+
+    // set to true when the fragment is created the first time (this fragment is sticky)
+    private boolean justCreated;
+
+    /**
+     * Loading more... item
+     */
+    private View footer;
+
+    /**
+     * List header
+     */
+    private int headerRes;
+    private View headerView;
+    private EndlessScrollListener scrollListener;
+    private ProgressBar progressView;
+
+    /**
+     * Mandatory empty constructor for the fragment manager to instantiate the
+     * fragment (e.g. upon screen orientation changes).
+     */
+    public ListGridFragment() {
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // lists are refreshable
+        addBehavior(new AnalyticsSwipeRefreshBehavior(this));
+
+        // we set this fragments sticky to cache list contents on configuration changes
+        setRetainInstance(true);
+        justCreated = true;
+
+        // create datasource and adapter
+        datasource = getDatasource();
+        // adapter instantation
+        adapter = createAdapter();
+        adapter.setCallback(
+                new DatasourceAdapter.Callback() {
+                    @Override
+                    public void onDataAvailable() {
+                        setListShown(true);
+                        showFooter(false);
+
+                        // inform the scroll listener so that it continues processing scrolls
+                        if (scrollListener != null) {
+                            scrollListener.finishLoading();
+                        }
+                    }
+
+                    @Override
+                    public void onPageRequested() {
+                        showFooter(true);
+                    }
+
+                    @Override
+                    public void onDatasourceError(Exception e) {
+                        setListShown(true);
+                        showFooter(false);
+                    }
+                }
+        );
+    }
+
+    private void showFooter(boolean show) {
+        if (listView.getVisibility() == View.VISIBLE) {
+            if (footer != null) {
+                if (show) {
+                    ((ListView) listView).addFooterView(footer);
+                } else {
+                    ((ListView) listView).removeFooterView(footer);
+                }
+            }
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(getLayout(), container, false);
+
+        // Set up the listview
+        listView = (AbsListView) view.findViewById(android.R.id.list);
+        progressView = (ProgressBar) view.findViewById(R.id.progressContainer);
+
+        // Set OnItemClickListener so we can be notified on item clicks
+        listView.setOnItemClickListener(this);
+        listView.setOnItemLongClickListener(this);
+
+        // set up pagination
+        if (datasource instanceof Pagination) {
+            scrollListener = new EndlessScrollListener() {
+                @Override
+                public void onLoadMore(int page, int totalItemsCount) {
+                    ((PaginationAwareAdapter) adapter).loadNextPage();
+                }
+            };
+
+            listView.setOnScrollListener(scrollListener);
+
+            // set the footer loading more... item
+            // this must be done BEFORE assigning the adapter (in KitKat this is fixed)
+            if (listView instanceof ListView) {
+                footer = inflater.inflate(R.layout.list_footer, null, false);
+                ((ListView) listView).addFooterView(footer);
+            }
+        }
+
+        // register header
+        if (listView instanceof ListView && headerRes != 0) {
+            headerView = inflater.inflate(headerRes, null, false);
+            ((ListView) listView).addHeaderView(headerView, null, false);
+        }
+
+        // register adapter (after any header or footer)
+        listView.setAdapter(adapter);
+
+        // again, remove the footer from the list
+        if (datasource instanceof Pagination && listView instanceof ListView) {
+            ((ListView) listView).removeFooterView(footer);
+        }
+
+        View emptyView = view.findViewById(android.R.id.empty);
+        if (emptyView != null) {
+            listView.setEmptyView(emptyView);
+        }
+
+        return view;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        // load first batch of data
+        if (justCreated) {
+            refresh(false);
+        }
+    }
+
+    @Override
+    public void onPause() {  
+        super.onPause();
+
+        // set the created flag off (this fragment is retained)
+        justCreated = false;
+    }
+
+    @Override
+    public void onDestroy() {
+        // this actually is not called, since this fragment is retained
+        datasource = null;
+        adapter = null;
+
+        super.onDestroy();
+    }
+
+    protected DatasourceAdapter<T> createAdapter() {
+        if (datasource instanceof Pagination) {
+            return new PaginationAwareAdapter<T>(getActivity(), getItemLayout(), datasource) {
+                @Override
+                public void bindView(T item, int position, View view) {
+                    ListGridFragment.this.bindView(item, view, position);
+                }
+            };
+        } else {
+            return new DatasourceAdapter<T>(getActivity(), getItemLayout(), datasource) {
+
+                @Override
+                public void bindView(T item, int position, View view) {
+                    ListGridFragment.this.bindView(item, view, position);
+                }
+            };
+        }
+    }
+
+    protected abstract SearchOptions getSearchOptions();
+
+    private void setListShown(boolean shown) {
+        if (progressView != null && listView != null) {
+            View emptyView = listView.getEmptyView();
+            if (emptyView != null && adapter != null) {
+                //replicating empty view functionality here
+                emptyView.setVisibility(shown && adapter.isEmpty() ? View.VISIBLE : View.GONE);
+            }
+            progressView.setVisibility(shown ? View.GONE : View.VISIBLE);
+            listView.setVisibility(shown ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    public AbsListView getListView() {
+        return listView;
+    }
+
+    public void setHeaderResource(int resource) {
+        this.headerRes = resource;
+    }
+
+    public View getHeaderView() {
+        return headerView;
+    }
+
+    // Click listeners
+    @Override
+    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+        itemClicked((T) parent.getAdapter().getItem(position), position);
+    }
+
+    // Default click implementation (without presenter)
+    protected void itemClicked(T item, int position) {
+        showDetail(item, position);
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        // if we did launch an activity for editing, this will refresh on return
+        if (resultCode == Constants.CONTENT_UPDATED) {
+            refresh();
+        }
+    }
+
+    @Override
+    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+        boolean res = false;
+        for (Behavior b : behaviors) {
+            res = b.onItemLongClick(parent, view, position, id) || res;
+        }
+        return res;
+    }
+
+    // Refreshable interface
+    @Override
+    public void refresh() {
+        refresh(true);
+    }
+
+    private void refresh(boolean forceRefresh) {
+        setListShown(false);
+        listView.clearChoices();
+        adapter.refresh(forceRefresh);
+    }
+
+    /**
+     * The default content for this Fragment has a TextView that is shown when
+     * the list is empty. If you would like to change the text, call this method
+     * to supply the text it should use.
+     */
+    public void setEmptyText(CharSequence emptyText) {
+        View emptyView = listView.getEmptyView();
+
+        if (emptyText instanceof TextView) {
+            ((TextView) emptyView).setText(emptyText);
+        }
+    }
+
+    @Override
+    public void showDetail(T item, int position) {
+
+    }
+
+    @Override
+    public void showMessage(int messageRes) {
+        Snackbar.make(getView(), getString(messageRes), Snackbar.LENGTH_LONG).show();
+    }
+
+    /**
+     * get the adapter this fragment is attached to
+     *
+     * @return the adapter
+     */
+    public DatasourceAdapter<T> getAdapter() {
+        return adapter;
+    }
+
+    /**
+     * set the filtering criteria for the adapter. This criteria belongs to the page
+     */
+    @Override
+    public void onSearchTextChanged(String searchText) {
+        //we are always using the same searchOptions, so this can be applied to the searchOptions objects
+        datasource.onSearchTextChanged(searchText);
+        refresh();
+    }
+
+    @Override
+    public void addFilter(Filter filter) {
+        datasource.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        datasource.clearFilters();
+    }
+
+    public void addStringFilter(String field, List<String> values) {
+        datasource.addFilter(new StringListFilter(field, values));
+    }
+
+    public void addDateRangeFilter(String field, long value1, long value2) {
+        Date min = (value1 != -1) ? new Date(value1) : null;
+        Date max = (value2 != -1) ? new Date(value2) : null;
+        datasource.addFilter(new DateRangeFilter(field, min, max));
+    }
+
+
+    @Override
+    public ListCrudPresenter<T> getPresenter() {
+        return (ListCrudPresenter<T>) super.getPresenter();
+    }
+
+    // Delegates
+
+    /**
+     * Get the datasource for this list
+     *
+     * @return a @link Datasource object
+     */
+    protected abstract Datasource<T> getDatasource();
+
+    /**
+     * Get the layout for this fragment.
+     *
+     * @return a valid layout for lists (fragment_list, fragment_grid3cols and fragment_grid4cols)
+     */
+    protected abstract @LayoutRes int getLayout();
+
+    /**
+     * Get the layout for this list's items
+     *
+     * @return the item layout
+     */
+    protected abstract @LayoutRes int getItemLayout();
+
+    /**
+     * Binds the item layout to each list item.
+     *
+     * @param item     The item to bind to the view
+     * @param view     The view inflated from #getItemLayout()
+     * @param position the current position
+     */
+    protected abstract void bindView(T item, View view, int position);
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseLoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseLoginActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseLoginActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseLoginActivity.java	(date 1467729866000)
@@ -0,0 +1,203 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.app.Service;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.Button;
+import android.widget.EditText;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.services.LoginService;
+import ibmmobileappbuilder.util.SecurePreferences;
+
+/**
+ * A login screen that offers login via email/password.
+ */
+public abstract class BaseLoginActivity extends BaseActivity {
+
+    private String mEmail;
+
+    private String mPassword;
+
+    /**
+     * Keep track of the login task to ensure we can cancel it if requested.
+     */
+    private boolean loginTaskRunning = false;
+
+    private SecurePreferences mSharedPreferences;
+
+    // UI references.
+    private EditText mEmailView;
+
+    private EditText mPasswordView;
+
+    private View mProgressView;
+
+    private View mLoginFormView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_login);
+
+        // Set up the login form.
+        mEmailView = (EditText) findViewById(R.id.email);
+        populateAutoComplete();
+
+        mPasswordView = (EditText) findViewById(R.id.password);
+
+        final Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);
+        mEmailSignInButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+
+                //hide the soft keyboard programatically when the button is pressed
+                InputMethodManager imm = (InputMethodManager) getSystemService(
+                        Service.INPUT_METHOD_SERVICE);
+                imm.hideSoftInputFromWindow(mEmailSignInButton.getWindowToken(), 0);
+                attemptLogin();
+            }
+        });
+
+        mLoginFormView = findViewById(R.id.login_form);
+        mProgressView = findViewById(R.id.login_progress);
+    }
+
+    public void populateAutoComplete() {
+        mEmailView.setText(mSharedPreferences.getString("lastUser", null));
+    }
+
+    /**
+     * Attempts to sign in or register the account specified by the login form.
+     * If there are form errors (invalid email, missing fields, etc.), the
+     * errors are presented and no actual login attempt is made.
+     */
+    public void attemptLogin() {
+        if (loginTaskRunning) {
+            return;
+        }
+        //set up the Login service
+        LoginService loginService = createLoginService();
+
+        // Reset errors.
+        mEmailView.setError(null);
+        mPasswordView.setError(null);
+
+        // Store values at the time of the login attempt.
+        mEmail = mEmailView.getText().toString();
+        mPassword = mPasswordView.getText().toString();
+
+        boolean cancel = false;
+        View focusView = null;
+
+        // Check for a valid password, if the user entered one.
+        if (!TextUtils.isEmpty(mPassword) && !isPasswordValid(mPassword)) {
+            mPasswordView.setError(getString(R.string.error_incorrect_password));
+            focusView = mPasswordView;
+            cancel = true;
+        }
+
+        // Check for a valid email address.
+        if (TextUtils.isEmpty(mEmail)) {
+            mEmailView.setError(getString(R.string.error_field_required));
+            focusView = mEmailView;
+            cancel = true;
+        } else if (!isEmailValid(mEmail)) {
+            mEmailView.setError(getString(R.string.error_invalid_email));
+            focusView = mEmailView;
+            cancel = true;
+        }
+
+        if (cancel) {
+            // There was an error; don't attempt login and focus the first
+            // form field with an error.
+            focusView.requestFocus();
+        } else {
+            // Show a progress spinner, and kick off a background task to
+            // perform the user login attempt.
+            showProgress(true);
+            loginTaskRunning = true;
+            loginService.attemptLogin(mEmail, mPassword);
+        }
+    }
+
+    abstract public LoginService createLoginService();
+
+    /**
+     * Override this with your own email validation logic
+     *
+     * @param email the email to validate
+     * @return true if email is valid
+     */
+    public boolean isEmailValid(String email) {
+        return true;
+    }
+
+    /**
+     * Override this with your own password validation logic
+     *
+     * @param password the password to validate
+     * @return true if password is valid
+     */
+    public boolean isPasswordValid(String password) {
+        return true;
+    }
+
+    public String getPassword() {
+        return mPassword;
+    }
+
+    public String getEmail() {
+        return mEmail;
+    }
+
+    public void setLoginTaskRunning(boolean loginTaskRunning) {
+        this.loginTaskRunning = loginTaskRunning;
+    }
+
+    /**
+     * Shows the progress UI and hides the login form.
+     */
+    public void showProgress(final boolean show) {
+
+        int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);
+
+        mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
+        mLoginFormView.animate().setDuration(shortAnimTime).alpha(
+                show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
+            }
+        });
+
+        mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
+        mProgressView.animate().setDuration(shortAnimTime).alpha(
+                show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
+            }
+        });
+    }
+
+    public SecurePreferences getSharedPreferences() {
+        return mSharedPreferences;
+    }
+
+    public void setSharedPreferences(SecurePreferences mSharedPreferences) {
+        this.mSharedPreferences = mSharedPreferences;
+    }
+}
+
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailFragment.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailFragment.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailFragment.java	(date 1467729866000)
@@ -0,0 +1,363 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.design.widget.Snackbar;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Toast;
+
+import java.util.List;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.Pagination;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.mvp.view.DetailView;
+import ibmmobileappbuilder.util.Constants;
+
+/**
+ * Fragments to show a detail view inside a {@link android.support.v4.app.Fragment}
+ * <p/>
+ * DetailFragments expect the {@link Constants#CONTENT} to be passed in
+ * That argument is optional, given that you implement the {@link #getDatasource()}
+ * method.
+ */
+public abstract class DetailFragment<T>
+        extends BaseFragment
+        implements Filterable, DetailView, Refreshable {
+
+    private int itemPos;
+    private Datasource<T> datasource;
+    protected T item;
+
+    /**
+     * Containers for views
+     */
+    private View contentContainer;
+    private View progressContainer;
+
+    // Search options for filtering
+    private SearchOptions searchOptions;
+
+    public DetailFragment() {
+        super();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        Bundle args = getArguments();
+
+        // restore state either from savedState or defaults
+        if (state != null) {
+            item = state.getParcelable(Constants.CONTENT);
+        }
+        if (item == null) {
+            item = args.getParcelable(Constants.CONTENT);
+        }
+
+        itemPos = args.getInt(Constants.ITEMPOS, 0);
+    }
+
+    /**
+     * Trick to know when the fragment is being shown (onResume doesn't work for this when the
+     * fragment is in the context of a viewpager)
+     * This method is highly dependant on
+     * {@link android.support.v4.app.FragmentStatePagerAdapter#setPrimaryItem(ViewGroup,
+     * int, Object)}
+     * but works in all cases.
+     * {@inheritDoc}
+     */
+    @Override
+    public void setMenuVisibility(boolean visible) {
+        super.setMenuVisibility(visible);
+        if (visible && item != null) {
+            onShow(item);
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(getLayout(), container, false);
+
+        progressContainer = view.findViewById(R.id.progressContainer);
+        contentContainer = view.findViewById(R.id.contentContainer);
+
+        return view;
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedState) {
+        super.onViewCreated(view, savedState);
+        initView(view, savedState);
+    }
+
+    /**
+     * Init this view for details.
+     *
+     * @param view
+     * @param savedState
+     */
+    protected void initView(View view, Bundle savedState) {
+        // we put this here to ensure all onCreate chain has been called,
+        // and so getDatasource will return a valid (non null) value
+        datasource = getDatasource();
+
+        if (item != null) {
+            bindView(item, view);
+            setContentShown(true);
+        } else {
+            refresh();
+        }
+    }
+
+    /**
+     * Updates the item being shown, and perform the appropiate binding
+     *
+     * @param newItem the new item to show
+     */
+    public void setItem(T newItem) {
+        item = newItem;
+
+        View v = getView();
+        if (v != null) {   // only bind to view if it already exists
+            bindView(item, v);
+            setContentShown(true);
+            onShow(item);
+        }
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        // save the current item into outState
+        outState.putParcelable(Constants.CONTENT, (Parcelable) item);
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void onResume() {
+        super.onResume();
+
+        if (item != null) {
+            onShow(item);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+
+        datasource = null;
+        item = null;
+    }
+
+    // Filterable interface
+
+    protected Datasource.Listener<T> dataListener = new Datasource.Listener<T>() {
+        @Override
+        public void onSuccess(final T result) {
+            item = result;
+            final View v = getView();
+            // force UI thread
+            Activity act = getActivity();
+            if (act != null) {
+                act.runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (v != null) {   // only bind to view if it already exists
+                            bindView(result, v);
+                        }
+                        setContentShown(true);
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onFailure(Exception e) {
+            // force UI thread
+            Activity act = getActivity();
+            if (act != null) {
+                act.runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        // inform to users
+//                        BusProvider.getInstance().post(new DatasourceFailureEvent());
+                        setContentShown(false);
+                    }
+                });
+            }
+        }
+    };
+
+    protected Datasource.Listener<List<T>> dataListListener = new Datasource.Listener<List<T>>() {
+
+        @Override
+        public void onSuccess(List<T> ts) {
+            if (ts.size() > 0) {
+                dataListener.onSuccess(ts.get(0));
+            } else {
+                dataListener.onSuccess(null);
+            }
+        }
+
+        @Override
+        public void onFailure(Exception e) {
+            dataListener.onFailure(e);
+        }
+    };
+
+    public void refresh() {
+        if (datasource != null) {
+            setContentShown(false);
+            //TODO is this a good idea???
+            if (searchOptions != null && datasource instanceof Pagination) {
+                // don't use itemPos and take the first item
+                ((Pagination<T>) datasource).getItems(0, dataListListener);
+            } else {
+                datasource.getItem(String.valueOf(itemPos), dataListener);
+            }
+        } else {
+            throw new IllegalStateException("Either Item or Datasource should be implemented");
+        }
+    }
+
+    @Override
+    public void onSearchTextChanged(String s) {
+        ensureSearchOptions();
+        searchOptions.setSearchText(s);
+        refresh();
+    }
+
+    @Override
+    public void addFilter(Filter filter) {
+        ensureSearchOptions();
+        searchOptions.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        searchOptions.setFilters(null);
+    }
+
+    private void ensureSearchOptions() {
+        if (searchOptions == null)
+            searchOptions = new SearchOptions();
+    }
+
+    @Override
+    public void showMessage(int message, boolean toast) {
+        if (toast) {
+            Toast.makeText(getActivity(), getString(message), Toast.LENGTH_SHORT).show();
+        } else {
+            Snackbar.make(getView(), getString(message), Snackbar.LENGTH_LONG).show();
+        }
+    }
+
+    protected void setContentShown(boolean shown) {
+        if (progressContainer != null && contentContainer != null) {
+            progressContainer.setVisibility(shown ? View.GONE : View.VISIBLE);
+            contentContainer.setVisibility(shown ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    @Override
+    public void navigateToEditForm() {
+        // do nothing. implemented in subclasses
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        // if the item is updated, we refresh the view
+        if (requestCode == Constants.MODE_EDIT && resultCode == Constants.CONTENT_UPDATED) {
+
+            T item = (T) data.getParcelableExtra(Constants.CONTENT);
+            if (item != null)
+                setItem(item);
+
+            // set our result code (in phone mode, we have our own activity)
+            getActivity().setResult(resultCode, data);
+        }
+    }
+
+    @Override
+    public void close(boolean shouldRefresh) {
+        // close detail activity if we are in phone mode
+        // or a navigation activity is not the fragment owner
+        Activity act = getActivity();
+
+        if (!getResources().getBoolean(R.bool.tabletLayout) ||
+                act instanceof BaseDetailActivity) {
+            // TODO: Support tablet layouts
+            Intent data = new Intent();
+            data.putExtra(Constants.CONTENT, (Parcelable) (shouldRefresh ? null : getItem()));
+            act.setResult(Constants.CONTENT_UPDATED, data);
+            act.finish();
+        }
+    }
+
+    /**
+     * Gets the current item
+     *
+     * @return the current item, or null if it's not been retrieved yet
+     */
+    public T getItem() {
+        return item;
+    }
+
+    /**
+     * called when a view is ready to be binded to data, but maybe it's not
+     * showing yet (i.e. in a {@link android.support.v4.view.ViewPager})
+     *
+     * @param item an instance of T data
+     * @param view the view to bind data to
+     */
+    public abstract void bindView(T item, View view);
+
+    /**
+     * This method will return a datasource for data retrieval
+     *
+     * @return a datasource
+     */
+    public Datasource<T> getDatasource() {
+        return null;
+    }
+
+    /**
+     * Called whenever a fragment is shown to the user
+     *
+     * @param item the item being shown
+     */
+    protected void onShow(T item) {
+    }
+
+    ;
+
+    /**
+     * The layout for this fragment
+     *
+     * @return the layout id for this screen
+     */
+    protected abstract int getLayout();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Filterable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Filterable.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Filterable.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Filterable.java	(date 1467729866000)
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import ibmmobileappbuilder.ds.filter.Filter;
+
+/**
+ * UI component (activity or fragment) that supports search operations
+ */
+public interface Filterable {
+
+    /**
+     * Set the search parameter
+     */
+    void onSearchTextChanged(String s);
+
+    /**
+     * filters
+     *
+     * @param filter
+     */
+    void addFilter(Filter filter);
+
+    void clearFilters();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseListingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseListingActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseListingActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseListingActivity.java	(date 1467729866000)
@@ -0,0 +1,95 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v7.widget.Toolbar;
+import android.view.MenuItem;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.util.FragmentUtils;
+
+/**
+ * Base class for Listing Activities
+ */
+public abstract class BaseListingActivity extends BaseActivity {
+
+    private FragmentManager mFragmentManager;
+
+    Toolbar mToolbar;
+
+    @Override
+    protected void onCreate(Bundle savedInstance) {
+        super.onCreate(savedInstance);
+        setContentView(R.layout.listing_activity);
+
+        mFragmentManager = getSupportFragmentManager();
+
+        // enable up navigation
+        mToolbar = (Toolbar) findViewById(R.id.toolbar);
+        if (mToolbar != null) {
+            setSupportActionBar(mToolbar);
+        }
+
+        // setup navigation
+        Class<? extends Fragment> mFragmentClass = getFragmentClass();
+
+        // show first (listing) page
+        if (mFragmentClass != null) {
+            String tag = this.getClass().getName();
+
+            Fragment fr = mFragmentManager.findFragmentByTag(tag);
+            if (fr == null) {
+                fr = FragmentUtils.instantiate(mFragmentClass, new Bundle());
+
+                mFragmentManager.beginTransaction()
+                        .replace(R.id.content_frame, fr, tag)
+                        .commit();
+            }
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                finish();
+                return true;
+            default:
+                break;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        // in tablet layouts, the activity is in charge of update the list
+        // because the edit form opens in another activity
+        if (resultCode == Constants.CONTENT_UPDATED &&
+                getResources().getBoolean(R.bool.tabletLayout)) {
+
+            // update list
+            Fragment fr = mFragmentManager.findFragmentByTag(this.getClass().getName());
+            if (fr != null && (fr instanceof Refreshable)) {
+                ((Refreshable) fr).refresh();
+            }
+        }
+    }
+
+    /**
+     * get the fragment associated with this activity
+     *
+     * @return
+     */
+    protected abstract Class<? extends Fragment> getFragmentClass();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Refreshable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Refreshable.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Refreshable.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/Refreshable.java	(date 1467729866000)
@@ -0,0 +1,17 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+/**
+ * UI component (activity or fragment) that supports refresh operations
+ */
+public interface Refreshable {
+
+    /**
+     * Refresh this view
+     */
+    void refresh();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DrawerActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DrawerActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DrawerActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DrawerActivity.java	(date 1467729866000)
@@ -0,0 +1,198 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.support.design.widget.NavigationView;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.widget.DrawerLayout;
+import android.support.v7.app.ActionBarDrawerToggle;
+import android.support.v7.widget.Toolbar;
+import android.util.SparseArray;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.navigation.Navigation;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.util.FragmentUtils;
+
+/**
+ * Base activity for drawer-based navigations
+ */
+public abstract class DrawerActivity extends BaseActivity implements Navigation,
+        NavigationView.OnNavigationItemSelectedListener {
+
+    public static final String FR_DRAWER = "FrDrawer";
+    public static String DRAWER_POSITION_KEY = "DRAWER_POSITION";
+
+    private DrawerLayout mDrawerLayout;
+    private int lastPosition = -1;
+    private ActionBarDrawerToggle mDrawerToggle;
+    private SparseArray<Class<? extends Fragment>> mFragments;
+    private FragmentManager mFragmentManager;
+    private Toolbar mToolbar;
+    private NavigationView navigationView;
+
+    @Override
+    protected void onCreate(Bundle savedInstance) {
+        super.onCreate(savedInstance);
+
+        setContentView(R.layout.drawer_activity_main);
+
+        // inject views
+        mToolbar = (Toolbar) findViewById(R.id.toolbar);
+        if (mToolbar != null) {
+            setSupportActionBar(mToolbar);
+        }
+
+        navigationView = (NavigationView) findViewById(R.id.drawerNavigationView);
+        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
+        navigationView.setNavigationItemSelectedListener(this);
+
+        mFragments = getSectionFragmentClasses();
+        // setup drawer (if there are at least two sections, or at least one action)
+        setupDrawer();
+
+        mFragmentManager = getSupportFragmentManager();
+
+        // select first item
+        int currentItem = mFragments.keyAt(0);
+        if (savedInstance != null) {
+            currentItem = savedInstance.getInt(DRAWER_POSITION_KEY, currentItem);
+            lastPosition = currentItem;
+            selectDrawerItem(currentItem);
+        } else {
+            //We are creating the activity so we will select the first element
+            onNavigationItemSelected(navigationView.getMenu().getItem(0));
+        }
+    }
+
+    private void setupDrawer() {
+        mDrawerToggle = new ActionBarDrawerToggle(this,
+                mDrawerLayout,
+                mToolbar,
+                R.string.drawer_open,
+                R.string.drawer_close
+        ) {
+
+            @Override
+            public void onDrawerClosed(View drawerView) {
+                super.onDrawerClosed(drawerView);
+                // forces a call to prepareOptionsMenu
+                supportInvalidateOptionsMenu();
+            }
+
+            @Override
+            public void onDrawerOpened(View drawerView) {
+                super.onDrawerOpened(drawerView);
+                // forces a call to prepareOptionsMenu
+                supportInvalidateOptionsMenu();
+            }
+        };
+
+        mDrawerLayout.setDrawerListener(mDrawerToggle);
+        mDrawerToggle.syncState();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle bundle) {
+        super.onSaveInstanceState(bundle);
+        bundle.putInt(DRAWER_POSITION_KEY, lastPosition);
+    }
+
+    @Override
+    public void onPostCreate(Bundle bundle) {
+        super.onPostCreate(bundle);
+
+        //Syncs the drawer indicator
+        mDrawerToggle.syncState();
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        boolean drawerIsOpen = mDrawerLayout.isDrawerOpen(navigationView);
+
+        // if the drawer is open, hide all options
+        if (drawerIsOpen) {
+            for (int index = 0; index < menu.size(); index++) {
+                MenuItem item = menu.getItem(index);
+                item.setVisible(false);
+            }
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration config) {
+        super.onConfigurationChanged(config);
+
+        // Pass the config object to the drawer toggle
+        mDrawerToggle.onConfigurationChanged(config);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Pass the event to ActionBarDrawerToggle, if it returns
+        // true, then it has handled the app icon touch event
+        return (mDrawerToggle != null && mDrawerToggle.onOptionsItemSelected(item))
+                || super.onOptionsItemSelected(item);
+    }
+
+    public void selectDrawerItem(int itemId) {
+        if (positionChanged(itemId)) {
+            String tag = FR_DRAWER + itemId;
+            Fragment fr = mFragmentManager.findFragmentByTag(tag);
+            if (fr == null) {
+                fr = FragmentUtils.instantiate(mFragments.get(itemId), new Bundle());
+            }
+
+            FragmentTransaction replaceTransaction = mFragmentManager.beginTransaction();
+            replaceTransaction.replace(R.id.content_frame, fr, tag);
+            replaceTransaction.commit();
+        }
+    }
+
+    private boolean positionChanged(int position) {
+        if (position != lastPosition) {
+            lastPosition = position;
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        // if we have opened the detail, we are in charge of updating the list
+        if (resultCode == Constants.CONTENT_UPDATED) {
+            refreshList();
+        }
+    }
+
+    private void refreshList() {
+        Fragment fr = mFragmentManager.findFragmentByTag(FR_DRAWER + lastPosition);
+        if (fr instanceof ListGridFragment) {
+            ((ListGridFragment) fr).refresh();
+        }
+    }
+
+    @Override
+    public boolean onNavigationItemSelected(MenuItem item) {
+        item.setChecked(true);
+        mDrawerLayout.closeDrawers();
+        selectDrawerItem(item.getItemId());
+        setTitle(item.getTitle());
+        return true;
+    }
+}
Index: TravelAnalyser11/app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/build.gradle b/TravelAnalyser11/app/build.gradle
new file mode 100644
--- /dev/null	(date 1756682140692)
+++ b/TravelAnalyser11/app/build.gradle	(date 1756682140692)
@@ -0,0 +1,61 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion project.compileSdkVersion
+  buildToolsVersion project.buildToolsVersion
+
+  defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+        applicationId "com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254"
+        versionName "1.0"
+    }
+
+
+    signingConfigs{
+        debug{
+            storeFile file("debug.keystore")
+        }
+
+        release{
+            storeFile file(System.getenv("KEYSTORE") ?: "debug.keystore")
+            storePassword System.getenv("KEYSTORE_PASSWORD")
+            keyAlias System.getenv("KEY_ALIAS")
+            keyPassword System.getenv("KEY_PASSWORD")
+        }
+    }
+
+    buildTypes {
+        release {
+            // write here your signing config, proguard configuration, etc
+            // minifyEnabled true
+            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+
+            signingConfig signingConfigs.release
+        }
+    }
+
+    packagingOptions {
+        // avoid conflicts in the packaging process
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'META-INF/NOTICE.txt'
+        exclude '.readme'
+        pickFirst 'META-INF/ASL2.0'
+        pickFirst 'META-INF/LICENSE'
+        pickFirst 'META-INF/NOTICE'
+    }
+
+    productFlavors {
+    }
+}
+
+repositories {
+    flatDir {
+        dirs 'libs'
+    }
+    mavenCentral() // Added Maven Central for other dependencies
+    jcenter()
+}
+
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/SlidingPaneActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/SlidingPaneActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/SlidingPaneActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/SlidingPaneActivity.java	(date 1467729866000)
@@ -0,0 +1,141 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.widget.SlidingPaneLayout;
+import android.support.v7.widget.Toolbar;
+import android.view.MenuItem;
+import android.view.View;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.util.FragmentUtils;
+
+/**
+ * Base class for Master-Detail sliding pane activities
+ */
+public abstract class SlidingPaneActivity extends BaseActivity {
+
+    private FragmentManager mFragmentManager;
+
+    private SlidingPaneLayout mSlidingPane;
+
+    private CharSequence mActivityTitle;
+
+    @Override
+    protected void onCreate(Bundle savedInstance) {
+        super.onCreate(savedInstance);
+        setContentView(R.layout.sliding_pane_activity);
+
+        // save title for later restoration
+        mActivityTitle = getTitle();
+
+        // Sliding pane
+        mSlidingPane = (SlidingPaneLayout) findViewById(R.id.slidingPane);
+        mSlidingPane.setParallaxDistance(50);
+        mSlidingPane.setShadowResourceLeft(R.drawable.sliding_pane_shadow);
+        mSlidingPane.setPanelSlideListener(new PaneListener());
+
+        mSlidingPane.openPane();
+
+        mFragmentManager = getSupportFragmentManager();
+
+        // toolbar
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        if(toolbar != null) {
+            setSupportActionBar(toolbar);
+        }
+
+        // setup navigation
+        Class<? extends Fragment> mFragmentClass = getFragmentClass();
+
+        // show first (listing) page
+        if (mFragmentClass != null) {
+            String tag = this.getClass().getName();
+
+            Fragment fr = mFragmentManager.findFragmentByTag(tag);
+            if (fr == null) {
+                fr = FragmentUtils.instantiate(mFragmentClass, new Bundle());
+
+                mFragmentManager.beginTransaction()
+                        .replace(R.id.content_frame, fr, tag)
+                        .commit();
+            }
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                finish();
+                return true;
+            default:
+                break;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void navigateToDetail(Class detailActivityClass, Class detailFragment, Bundle args) {
+
+        DetailFragment fr = (DetailFragment) mFragmentManager.findFragmentById(R.id.detail_frame);
+        if (fr == null) {
+            mFragmentManager.beginTransaction()
+                    .replace(R.id.detail_frame, FragmentUtils.instantiate(detailFragment, args))
+                    .commit();
+        } else {
+            fr.setItem(args.getParcelable(Constants.CONTENT));
+        }
+        mSlidingPane.closePane();
+    }
+
+    /**
+     * Update action bar actions
+     *
+     * @param isOpen whether the sliding pane is opened
+     */
+    private void showActions(boolean isOpen) {
+        Fragment fr = mFragmentManager.findFragmentById(R.id.content_frame);
+        if (fr != null) {
+            fr.setHasOptionsMenu(isOpen);
+        }
+
+        fr = mFragmentManager.findFragmentById(R.id.detail_frame);
+        if (fr != null) {
+            fr.setHasOptionsMenu(!isOpen);
+        }
+    }
+
+    private class PaneListener implements SlidingPaneLayout.PanelSlideListener {
+
+        @Override
+        public void onPanelClosed(View view) {
+            showActions(false);
+        }
+
+        @Override
+        public void onPanelOpened(View view) {
+            setTitle(mActivityTitle);
+            showActions(true);
+        }
+
+        @Override
+        public void onPanelSlide(View view, float arg1) {
+        }
+    }
+
+    /**
+     * Get the fragment for this listing
+     * @return
+     */
+    protected abstract Class<? extends Fragment> getFragmentClass();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FilterActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FilterActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FilterActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FilterActivity.java	(date 1467729866000)
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.Toolbar;
+import android.view.MenuItem;
+
+import ibmmobileappbuilder.core.R;
+
+/**
+ * Generic activity for filter screens.
+ * For now it only implements a basic toolbar and up navigation
+ */
+public abstract class FilterActivity extends BaseActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.filter_activity);
+
+        // enable up navigation
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        if(toolbar != null) {
+            setSupportActionBar(toolbar);
+            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        }
+
+        if (savedInstanceState == null) {
+            Bundle args = new Bundle();
+
+            // propagate values to fragment
+            Intent inIntent = getIntent();
+            Bundle extras = inIntent.getExtras();
+            if(extras != null)
+                args.putAll(extras);
+
+            // if no saved state, then this activity is just created
+            Fragment fr = getFragment();
+            fr.setArguments(args);
+            getSupportFragmentManager().beginTransaction()
+                    .add(R.id.container, fr)
+                    .commit();
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            finish();
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+
+    protected abstract Fragment getFragment();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FormFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FormFragment.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FormFragment.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/FormFragment.java	(date 1467729866000)
@@ -0,0 +1,277 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.app.ProgressDialog;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.v7.widget.SwitchCompat;
+import android.text.TextWatcher;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.EditText;
+
+import java.net.URL;
+import java.util.Date;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.restds.GeoPoint;
+import ibmmobileappbuilder.mvp.presenter.FormPresenter;
+import ibmmobileappbuilder.mvp.view.FormView;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.validation.Validator;
+import ibmmobileappbuilder.views.DatePicker;
+import ibmmobileappbuilder.views.DateTimePicker;
+import ibmmobileappbuilder.views.GeoPicker;
+import ibmmobileappbuilder.views.ImagePicker;
+import ibmmobileappbuilder.views.TristateBooleanPicker;
+
+/**
+ * Fragments to show a edit form (edit or create mode)
+ * It will allow to add validations
+ *
+ * DetailFragments expect the {@link Constants#CONTENT} to be passed in
+ * That argument is optional, given that you implement the {@link #getDatasource()}
+ * method.
+ */
+public abstract class FormFragment<T>
+        extends DetailFragment<T> implements FormView<T>{
+
+    public static final String IS_UPDATING_KEY = "_isupdating_";
+
+    /**
+     * The form mode (EDIT/CREATE)
+     */
+    private int mode;
+    private ProgressDialog mProgressDialog;
+
+    public FormFragment() {
+        super();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        Bundle args = getArguments();
+
+        mode = args.getInt(Constants.MODE);
+
+        boolean isUpdating = state != null && state.getBoolean(IS_UPDATING_KEY);
+        if(isUpdating)
+            showProgress();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        // save state
+        outState.putBoolean(IS_UPDATING_KEY, isUpdating());
+    }
+
+    @Override
+    protected void initView(View view, Bundle state){
+        // Overrided to enable editing
+
+        if(mode == Constants.MODE_EDIT) {
+            if (item != null) {
+                // show the form with inital data
+                bindView(item, view);
+                setContentShown(true);
+            } else {
+                // ask datasource for data
+                refresh();
+            }
+        }
+        else {
+            // no data to display. We'll show the plain form
+            item = newItem();
+            bindView(item, view);
+            setContentShown(true);
+        }
+    }
+
+    // Create and handle "SAVE" menu item
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+        menu.add(Menu.NONE, R.id.action_save, Menu.FIRST, android.R.string.ok)
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId() == R.id.action_save){
+            showProgress();
+            if(mode == Constants.MODE_EDIT)
+                getPresenter().save(getItem());
+            else
+                getPresenter().create(getItem());
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private void showProgress() {
+        mProgressDialog = ProgressDialog.show(getActivity(), null, getString(R.string.saving_changes), true);
+    }
+
+    @Override
+    public FormPresenter<T> getPresenter(){
+        return (FormPresenter<T>) super.getPresenter();
+    }
+
+    @Override
+    public void close(boolean shouldRefresh) {
+        dismissPendingProgress();
+        // TODO: Support tablet layouts
+        Intent data = new Intent();
+        data.putExtra(Constants.CONTENT, (Parcelable) getItem());
+        getActivity().setResult(
+                shouldRefresh ?
+                        Constants.CONTENT_UPDATED : Constants.CONTENT_NOT_UPDATED,
+                data);
+        getActivity().finish();
+    }
+
+    @Override
+    public void navigateToEditForm() {
+        // do nothing, since we already are in edit form
+    }
+
+    @Override
+    public void showMessage(int message, boolean toast) {
+        super.showMessage(message, toast);
+        dismissPendingProgress();
+    }
+
+
+
+    protected void dismissPendingProgress() {
+        // cancel any progress dialog
+        if(isUpdating())
+            mProgressDialog.dismiss();
+    }
+
+    private boolean isUpdating() {
+        return mProgressDialog != null && mProgressDialog.isShowing();
+    }
+
+    // Binding methods
+
+    public void bindBoolean(int viewId, Boolean value, View.OnClickListener listener){
+        SwitchCompat view = (SwitchCompat) getView().findViewById(viewId);
+        view.setChecked(value != null ? value : false);
+        view.setOnClickListener(listener);
+
+        // initialize value
+        if(value == null)
+            listener.onClick(view);
+    }
+
+    public void bindNullableBoolean(int viewId, Boolean value, TristateBooleanPicker.ChoiceListener listener){
+        TristateBooleanPicker view = (TristateBooleanPicker) getView().findViewById(viewId);
+        view.setValue(value);
+        view.setListener(listener);
+    }
+
+    // Binding utilities
+
+    public void bindLong(int viewId, Long value, TextWatcher listener){
+        bindLong(viewId, value, listener, null);
+    }
+
+    public void bindLong(int viewId, Long value, TextWatcher listener, Validator<T> validator){
+        String strVal = value != null ? String.valueOf(value) : null;
+        bindString(viewId, strVal, listener, validator);
+    }
+
+    public void bindDouble(int viewId, Double value, TextWatcher listener){
+        bindDouble(viewId, value, listener, null);
+    }
+
+    public void bindDouble(int viewId, Double value, TextWatcher listener, Validator<T> validator){
+        String strVal = value != null ? String.valueOf(value) : null;
+        bindString(viewId, strVal, listener, validator);
+    }
+
+    public void bindString(int viewId, String value, TextWatcher listener){
+        bindString(viewId, value, listener, null);
+    }
+
+    public void bindString(int viewId, String value, TextWatcher listener, Validator<T> validator){
+        EditText view = (EditText) getView().findViewById(viewId);
+        view.setText(value);
+        view.addTextChangedListener(listener);
+        if(validator != null)
+            getPresenter().addValidator(viewId, validator);
+    }
+
+    public void bindDatePicker(int viewId, Date value, DatePicker.DateSelectedListener listener){
+        bindDatePicker(viewId, value, listener, null);
+    }
+
+    public void bindDatePicker(int viewId, Date value, DatePicker.DateSelectedListener listener, Validator<T> validator){
+        DatePicker view = (DatePicker) getView().findViewById(viewId);
+        view.setDate(value);
+        view.setListener(listener);
+        if(validator != null)
+            getPresenter().addValidator(viewId, validator);
+    }
+
+    public void bindDateTimePicker(int viewId, Date value, DateTimePicker.DateSelectedListener listener){
+        bindDateTimePicker(viewId, value, listener, null);
+    }
+
+    public void bindDateTimePicker(int viewId, Date value, DateTimePicker.DateSelectedListener listener, Validator<T> validator){
+        DateTimePicker view = (DateTimePicker) getView().findViewById(viewId);
+        view.setDateTime(value);
+        view.setDateTimeSelectedListener(listener);
+        if(validator != null)
+            getPresenter().addValidator(viewId, validator);
+    }
+
+    public void bindImage(int viewId, URL value, int index, ImagePicker.Callback callback) {
+        this.bindImage(viewId, value, index, null, callback);
+    }
+
+    public void bindImage(int viewId, URL value, int index, Validator<T> validator, ImagePicker.Callback callback){
+        ImagePicker picker = (ImagePicker) getView().findViewById(viewId);
+        picker.setTargetFragment(this);
+
+        if(callback != null)
+            picker.setCallback(callback);
+
+        // initial value
+        if (value != null)
+            picker.setImageUrl(value.toExternalForm());
+
+        if (validator != null)
+            getPresenter().addValidator(viewId, validator);
+    }
+
+    public void bindLocation(int viewId, GeoPoint value, GeoPicker.PointChangedListener listener){
+        bindLocation(viewId, value, listener, null);
+    }
+
+    public void bindLocation(int viewId, GeoPoint value, GeoPicker.PointChangedListener listener, Validator<T> validator){
+        GeoPicker view = (GeoPicker) getView().findViewById(viewId);
+        view.setPoint(value);
+        view.setListener(listener);
+        if(validator != null)
+            getPresenter().addValidator(viewId, validator);
+    }
+
+    /**
+     * Creates a new item for editing
+     * @return a new item.
+     */
+    protected abstract T newItem();
+}
Index: TravelAnalyser11/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/build.gradle b/TravelAnalyser11/build.gradle
new file mode 100644
--- /dev/null	(date 1756688883995)
+++ b/TravelAnalyser11/build.gradle	(date 1756688883995)
@@ -0,0 +1,48 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        mavenCentral()
+        jcenter()
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.1.2'
+    }
+}
+
+allprojects {
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+}
+
+// Disable indexing on build server
+// See http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.
+project.ext.preDexLibs = !project.hasProperty('disablePreDex')
+
+ext {
+    minSdkVersion=15
+    targetSdkVersion=22
+    compileSdkVersion = 27
+    buildToolsVersion="27.0.3"
+
+    supportLibraryVersion = "23.1.1"
+    playServicesVersion = "8.3.0"
+	ibmMfpVersion = "7.1.11"    
+}
+
+subprojects {
+    project.plugins.whenPluginAdded { plugin ->
+        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
+            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
+        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
+            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
+        }
+    }
+}
+
+task wrapper(type: Wrapper) {
+    gradleVersion = '2.11'
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/MenuFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/MenuFragment.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/MenuFragment.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/MenuFragment.java	(date 1467729866000)
@@ -0,0 +1,175 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import java.util.List;
+
+import ibmmobileappbuilder.MenuItem;
+import ibmmobileappbuilder.actions.Action;
+import ibmmobileappbuilder.behaviors.Behavior;
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.util.image.ImageLoader;
+import ibmmobileappbuilder.util.image.PicassoImageLoader;
+
+import static ibmmobileappbuilder.util.image.ImageLoaderRequest.Builder.imageLoaderRequest;
+
+/**
+ * These fragments has 3 possible layouts: list, list with image and grid (2-cols)
+ */
+public abstract class MenuFragment extends BaseFragment implements AbsListView.OnItemClickListener {
+
+    /**
+     * The Adapter which will be used to populate the ListView/GridView with
+     * Views.
+     */
+    private List<MenuItem> mMenuItems;
+
+    private AbsListView mList;
+
+    @Override
+    public void onCreate(Bundle savedInstance) {
+        super.onCreate(savedInstance);
+
+        mMenuItems = getMenuItems();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+
+        View view = inflater.inflate(getLayout(), container, false);
+
+        mList = (AbsListView) view.findViewById(android.R.id.list);
+        if (mList == null) {
+            throw new IllegalStateException("Layout is not a menu layout");
+        }
+
+        // set adapter
+        ((AdapterView) mList).setAdapter(getAdapter());
+
+        // bind clicklistener
+        mList.setOnItemClickListener(this);
+        mList.setEmptyView(view.findViewById(android.R.id.empty));
+
+        return view;
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        mList = null;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        mMenuItems = null;
+    }
+
+    private ArrayAdapter<MenuItem> getAdapter() {
+        MenuItem[] pagesArr = mMenuItems.toArray(new MenuItem[mMenuItems.size()]);
+
+        return new ArrayAdapter<MenuItem>(getActivity(),
+                getItemLayout(),
+                android.R.id.text1, // all layouts have a TextView field with id "text1"
+                pagesArr
+        ) {
+
+            @Override
+            public View getView(int position, View convertView, ViewGroup container) {
+                View v; // = super.getView(position, convertView, container);
+                if (convertView != null) {
+                    v = convertView;
+                } else {
+                    v = getActivity().getLayoutInflater()
+                            .inflate(getItemLayout(), container, false);
+                }
+
+                defaultItemBinding(getItem(position), v);
+                return v;
+            }
+        };
+    }
+
+    // specific bindings for menu pages
+    private void defaultItemBinding(MenuItem item, View view) {
+
+        ImageView image = (ImageView) view.findViewById(R.id.image);
+        if (image != null) {
+            if (item.getIconUrl() != null) {
+                ImageLoader imageLoader = new PicassoImageLoader(image.getContext());
+                imageLoader.load(imageLoaderRequest()
+                                .withPath(item.getIconUrl())
+                                .withTargetView(image)
+                                .build()
+                );
+            } else {
+                image.setImageResource(item.getIcon());
+            }
+        }
+
+        TextView text = (TextView) view.findViewById(R.id.title);
+        if (text != null) {
+            text.setText(item.getLabel());
+        }
+    }
+
+    // OnItemClickListener interface
+    @Override
+    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
+        // execute local action
+        executeAction(mMenuItems.get(position));
+    }
+
+    /**
+     * invoke the action to execute when an item is selected
+     *
+     * @param item the menu item
+     */
+    public void executeAction(MenuItem item) {
+        Action cmd = item.getAction();
+        if (cmd != null) {
+            cmd.execute(getActivity());
+            for (Behavior behavior : behaviors) {
+                behavior.onActionClick(cmd.getAnalyticsInfo());
+            }
+        }
+    }
+
+    // delegates
+
+    /**
+     * get this menu's items. Only Page label is used, since the layout is inferred from parent
+     *
+     * @return the list of menu items
+     */
+    public abstract List<MenuItem> getMenuItems();
+
+    /**
+     * Gets the layout for this fragment
+     *
+     * @return a valid layout for menus
+     */
+    public abstract int getLayout();
+
+    /**
+     * Gets the layout for this menu items
+     *
+     * @return the resource id for item layouts
+     */
+    public abstract int getItemLayout();
+}
Index: TravelAnalyser11/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/TravelAnalyser11/gradle.properties b/TravelAnalyser11/gradle.properties
new file mode 100644
--- /dev/null	(date 1756678137697)
+++ b/TravelAnalyser11/gradle.properties	(date 1756678137697)
@@ -0,0 +1,33 @@
+project.buildToolsVersion='23.0.3'
+project.compileSdkVersion=23
+project.minSdkVersion=14
+project.targetSdkVersion=23
+
+
+# Version information
+project.VERSION_CODE="1"
+project.VERSION_NAME="1.0"
+
+# Signing information
+
+# You can also create a file with these properties on it (this is useful for CI environments)
+# if you do so, this file should not be checked into source control for security reasons
+#
+# APP_NAME=TravelAnalyser11
+# GROUP=com.ibm.mobileappbuilder.travelanalyser1
+# KEYSTORE=
+# KEYSTORE_PASSWORD=
+# KEY_ALIAS=
+# KEY_PASSWORD=
+
+# Project dependencies
+supportLibraryVersion=23.1.1
+
+# exclude duplicate files from classpath
+# this is a known issue for some common libraries as google-play-services
+android.packagingOptions.exclude 'META-INF/LICENSE.txt'
+android.packagingOptions.exclude 'META-INF/NOTICE.txt'
+
+# AndroidX flags
+android.useAndroidX=true
+android.enableJetifier=true
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseDetailActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseDetailActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseDetailActivity.java	(date 1467729866000)
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v7.widget.Toolbar;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.util.FragmentUtils;
+
+/**
+ * Activity for single detail fragments
+ */
+public abstract class BaseDetailActivity extends BaseActivity {
+
+    @Override
+    protected void onCreate(Bundle savedState) {
+        super.onCreate(savedState);
+        setContentView(R.layout.detail_activity);
+
+        // enable up navigation
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        if(toolbar != null) {
+            setSupportActionBar(toolbar);
+        }
+
+        Intent intent = getIntent();
+        String title = intent.getStringExtra(Constants.TITLE);
+
+        if (title != null) {
+            setTitle(title);
+        }
+
+        // this adapter is for fragment creation based on spinner selection
+        Bundle args = intent.getExtras();
+        if(args == null)
+            args = new Bundle();
+
+        loadFragment(args);
+    }
+
+    private void loadFragment(Bundle args){
+        // setup navigation
+        Class<? extends Fragment> fClass = getFragmentClass();
+
+        FragmentManager manager = getSupportFragmentManager();
+
+        // show first (listing) page
+        if (fClass != null) {
+            String tag = this.getClass().getName();
+
+            Fragment fr = manager.findFragmentByTag(tag);
+            if (fr == null) {
+                fr = FragmentUtils.instantiate(fClass, args);
+
+                manager.beginTransaction()
+                    .replace(R.id.content_frame, fr, tag)
+                    .commit();
+            }
+        }
+
+    }
+
+    protected abstract Class<? extends Fragment> getFragmentClass();
+}
+
+
Index: TravelAnalyser11/README.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/README.txt b/TravelAnalyser11/README.txt
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/README.txt	(date 1467729866000)
@@ -0,0 +1,84 @@
+Project Prerequisites:
+---------------------
+- Java SDK 1.7 or later.
+- Android SDK with API 22 and Android Build Tools 23.0.1 installed (they both can be installed from the SDK Manager).
+- Android plugin for Gradle version 1.3.0.
+
+Steps to build this project:
+----------------------------
+
+1. Using Android Studio, open "File" menu and select "New" -> "Import Project" option.
+
+2. Using Gradle from the command line open a terminal window and navigate to the project root. On Windows platforms, type this command:
+
+  > gradlew.bat assembleDebug
+
+  On Mac OS and Linux platforms, type these commands:
+
+  > chmod +x gradlew
+
+  > ./gradlew assembleDebug
+
+  The first command (chmod) adds the execution permission to the Gradle wrapper script and is only necessary the first time you build this project from the command line.
+
+  The assembleDebug build task builds the debug version of your app and signs it with the default local certificate, so that you can install it on the emulator and on real devices for debugging purposes.
+
+After you build the project, the output APK for the app module will be located in app/build/outputs/apk/ folder
+
+
+Project Structure:
+-----------------
+
+- Module ``":app"``: the source code of our application, it contains all the files generated by IBM Mobile Appbuilder and it's the place where you can extend the app's functionality.
+
+- Module ``":core"``: a framework library for our app, it contains all the common code and utility classes. If you need to modify the framework you can include it in the project, uncommenting the line ``include ':core'`` in the file settings.gradle.
+
+- Depending on the features included in your app, the root folder could contain the source code for specific modules.
+
+Modifying the Project:
+---------------------
+All the IBM Mobile Appbuilder specific dependencies will be included in the form of android archives (*.aar*) in the ``/app/libs/`` directory.
+If you need to modify those libraries, remember to remove then from this folder, and including the relevant modules in the settings.gradle file. This way, you'll always have the latest changes compiled with your app.
+
+
+External libraries:
+------------------
+Your application has been created using Open Source software. Please double-check the source code of the application to determine if it complies with your licensing needings.
+
+For more information on open source licenses used by IBM Mobile Appbuilder, review the following:
+
+	GreenRobot EventBus. Apache License 2.0
+	(https://github.com/greenrobot/EventBus/blob/master/LICENSE)
+
+	Square Picasso. Apache License 2.0
+	(https://github.com/square/picasso/blob/master/LICENSE.txt)
+
+	Square Retrofit. Apache License 2.0
+	(https://github.com/square/retrofit/blob/master/LICENSE.txt)
+
+	Android Better Pickers. Apache License 2.0
+	(https://github.com/derekbrameyer/android-betterpickers)
+
+	Path Android Priority Job Queue. Mit License
+	(https://github.com/path/android-priority-jobqueue)
+
+	Square OkHttp. Apache License 2.0
+	(https://github.com/square/okhttp/blob/master/LICENSE.txt)
+
+	Android Maps Utils. Apache License 2.0
+	(https://github.com/googlemaps/android-maps-utils/blob/master/LICENSE)
+
+	Androidplot. Apache License 2.0
+	(https://github.com/halfhp/androidplot)
+
+Testing dependencies:
+
+	JUnit. Eclipse Public License 1.0
+	(http://junit.org/license.html)
+
+	jMock. jMock Project License
+	(http://www.jmock.org/license.html)
+
+	Hamcrest. BSD 3-Clause License
+	(http://opensource.org/licenses/BSD-3-Clause)
+
Index: TravelAnalyser11/cloudant/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/build.gradle b/TravelAnalyser11/cloudant/build.gradle
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/build.gradle	(date 1467729866000)
@@ -0,0 +1,28 @@
+apply plugin: 'com.android.library'
+
+android {
+    publishNonDefault true
+
+    compileSdkVersion project.compileSdkVersion
+    buildToolsVersion project.buildToolsVersion
+
+    defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile project(path: ':core', configuration: 'ibmRelease')
+    compile 'com.cloudant:cloudant-sync-datastore-android:0.15.5'
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseActivity.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseActivity.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/BaseActivity.java	(date 1467729866000)
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.os.Bundle;
+import android.support.design.widget.Snackbar;
+import android.support.v7.app.AppCompatActivity;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+
+import ibmmobileappbuilder.core.R;
+
+public class BaseActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+    }
+
+    // set up generic event listeners
+    //TODO do something else here....
+//    public void onEvent(DatasourceFailureEvent event) {
+//        Snackbar.make(getRootView(), R.string.error_data_generic,
+//                Snackbar.LENGTH_SHORT).show();
+//    }
+//
+//    public void onEvent(DatasourceUnauthorizedEvent event) {
+//        Snackbar.make(getRootView(), R.string.error_data_unauthorized,
+//                Snackbar.LENGTH_SHORT).show();
+//    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            finish();
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private View getRootView(){
+        return ((ViewGroup) findViewById(android.R.id.content)).getChildAt(0);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailPagerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailPagerFragment.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailPagerFragment.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/ui/DetailPagerFragment.java	(date 1467729866000)
@@ -0,0 +1,179 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.ui;
+
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentStatePagerAdapter;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.Count;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.util.Constants;
+import ibmmobileappbuilder.util.DepthPageTransformer;
+
+/**
+ * A fragment that shows sibling detail views with nested fragments in
+ * a {@link ViewPager},
+ * representing an item that come from a datasource. Subclasses must implement the method
+ * {@link #getDatasource()}.
+ * This fragment expects an argument {@link Constants#ITEMPOS}
+ * to be passed in
+ */
+public abstract class DetailPagerFragment<T> extends BaseFragment {
+
+    int mPos = 0;
+
+    ViewPager mPager;
+
+    PagerAdapter mAdapter;
+
+    Datasource<T> mDatasource;
+
+    /**
+     * By default, the pager calls to datasource's getCount() method, but some datasources
+     * don't implement that interface. In that case, a SIZE
+     * argument ({@link Constants}) can be passed to this fragment,
+     * forcing a size for the ViewPager.
+     */
+    private int mSize;
+
+    // empty constructor
+    public DetailPagerFragment() {
+        super();
+    }
+
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+
+        Bundle arguments = getArguments();
+        if (arguments != null) {
+            mPos = arguments.getInt(Constants.ITEMPOS, 0);
+            mSize = arguments.getInt(Constants.SIZE, 1);
+        }
+
+        // restore state
+        if (state != null) {
+            mPos = state.getInt(Constants.ITEMPOS, mPos);
+        }
+
+        mDatasource = getDatasource();
+        mAdapter = createPagerAdapter();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putInt(Constants.ITEMPOS, mPager.getCurrentItem());
+    }
+
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+            Bundle savedInstanceState) {
+        final View view = inflater.inflate(R.layout.detail_pager, container, false);
+
+        // inject views
+        mPager = (ViewPager) view.findViewById(R.id.pager);
+
+        // set current page
+        mPager.setAdapter(mAdapter);
+        mPager.setCurrentItem(mPos);
+
+        // set animation
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            mPager.setPageTransformer(true, new DepthPageTransformer());
+        }
+
+        return view;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+
+    }
+
+    @Override
+    public void onDestroy() {
+        mPager = null;
+        mAdapter = null;
+        mDatasource = null;
+        super.onDestroy();
+    }
+
+    protected PagerAdapter createPagerAdapter() {
+
+        return new FragmentStatePagerAdapter(
+                getChildFragmentManager()) {
+
+            @Override
+            public Fragment getItem(int i) {
+                // to avoid memory lakes, implement as static inner class, and use weakreferences
+                final Fragment fr = DetailPagerFragment.this.getCardFragment(i);
+
+                if (fr != null) {
+                    Bundle args = new Bundle();
+                    args.putInt(Constants.ITEMPOS, i);
+                    fr.setArguments(args);
+
+                    mDatasource.getItem(String.valueOf(i), new Datasource.Listener<T>() {
+                        @Override
+                        @SuppressWarnings("unchecked")
+                        public void onSuccess(T t) {
+                            ((DetailFragment<T>) fr).setItem(t);    // update item
+                        }
+
+                        @Override
+                        public void onFailure(Exception e) {
+
+                        }
+                    });
+                }
+
+                return fr;
+            }
+
+            @Override
+            public int getCount() {
+                // if datasource supports counting, ask for it
+                if (mDatasource != null && mDatasource instanceof Count) {
+                    return ((Count) mDatasource).getCount();
+                } else {
+                    return mSize;   // why do we want a pager for just one page?
+                }
+            }
+        };
+    }
+
+    /**
+     * Get the Fragment to show in a page in this ViewPager.
+     *
+     * @param i the position
+     * @return the fragment. See {@link DetailFragment}
+     */
+    protected abstract Fragment getCardFragment(int i);
+
+    /**
+     * This is called to get the {@link Datasource} this detail item belongs to
+     *
+     * @return a datasource
+     */
+    protected abstract Datasource<T> getDatasource();
+}
Index: TravelAnalyser11/core/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/build.gradle b/TravelAnalyser11/core/build.gradle
new file mode 100644
--- /dev/null	(date 1756679367435)
+++ b/TravelAnalyser11/core/build.gradle	(date 1756679367435)
@@ -0,0 +1,94 @@
+apply plugin: 'com.android.library'
+
+android {
+    publishNonDefault true
+
+    compileSdkVersion project.compileSdkVersion
+    buildToolsVersion project.buildToolsVersion
+    useLibrary 'org.apache.http.legacy'
+
+    defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+        versionCode 12
+        versionName "3.2.9"
+    }
+
+    productFlavors {
+        ibm {}
+
+        common {}
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
+
+    testOptions {
+        unitTests.returnDefaultValues = true
+    }
+}
+
+dependencies {
+    ibmCompile project(path: ':analytics', configuration: 'ibmRelease')
+    commonCompile project(path: ':analytics', configuration: 'commonRelease')
+
+    compile (
+            'com.squareup.okhttp:okhttp:2.5.0',
+            "com.android.support:design:$supportLibraryVersion",
+            'com.squareup.retrofit:retrofit:1.9.0',
+            'com.squareup.picasso:picasso:2.5.2',
+            'com.doomonafireball.betterpickers:library:1.6.0'
+    )
+    testCompile('junit:junit:4.12',
+            'org.jmock:jmock-junit4:2.8.1',
+            'org.jmock:jmock:2.8.1',
+            'org.hamcrest:hamcrest-all:1.3',
+            'org.jmock:jmock-legacy:2.8.1',
+            'com.android.support.test.espresso:espresso-intents:2.2.1'
+    )
+}
+
+android.libraryVariants.all { variant ->
+
+    def varName = variant.name.capitalize()
+
+    task("copy${varName}Deps", type: Copy, dependsOn: "assemble${varName}") {
+        // Set out dir
+        def outProj = project.parent.subprojects.find { it.name == 'app' }
+        variant.outputs.each { output ->
+            def file = output.outputFile
+            if (file != null && file.name.endsWith(".aar")) {
+                from file
+                into new File(outProj.projectDir, 'libs')
+                def destName = file.name.replace("-release", "")
+                rename file.name, destName
+            }
+        }
+    }
+}
+
+task("copyAarToFramework", type: Copy, dependsOn: 'assembleRelease', overwrite: true) {
+    if (project.hasProperty("FRAMEWORK_PATH")) {
+        def destPath = project.FRAMEWORK_PATH + '/DomainProjects/app/libs/'
+        from('build/outputs/aar')
+        into(destPath)
+        include(project.name + '-ibm-release.aar')
+        def file = file(destPath + project.name + '-ibm-release.aar')
+        def destName = file.name.replace("-release", "")
+        rename file.name, destName
+    }
+}
+
+task("copySourceToFramework", type: Copy, dependsOn: 'copyAarToFramework', overwrite: true) {
+    if (project.hasProperty("FRAMEWORK_PATH")) {
+        def destPath = project.FRAMEWORK_PATH  + '/DomainProjects/' + project.name
+        delete destPath
+        from('.')
+        into(destPath)
+        exclude('**/*.iml', 'build/')
+    }
+}
Index: TravelAnalyser11/push/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/push/build.gradle b/TravelAnalyser11/push/build.gradle
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/push/build.gradle	(date 1467729866000)
@@ -0,0 +1,47 @@
+apply plugin: 'com.android.library'
+
+android {
+    publishNonDefault true
+
+    compileSdkVersion project.compileSdkVersion
+    buildToolsVersion project.buildToolsVersion
+
+    defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+
+        versionCode 1
+        versionName "1.0"
+    }
+
+    productFlavors {
+        ibm {}
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile "com.google.android.gms:play-services:$playServicesVersion"
+
+    ibmCompile "com.ibm.mobilefirstplatform.clientsdk.android:push:1.0.2"
+}
+
+task("copyAarToFramework", type: Copy, dependsOn: 'assembleRelease', overwrite: true) {
+    if (project.hasProperty("FRAMEWORK_PATH")) {
+        def destPath = project.FRAMEWORK_PATH + '/modules/' + project.name + '/app/libs/'
+        from('build/outputs/aar')
+        into(destPath)
+        include(project.name + '-ibm-release.aar')
+        def file = file(destPath + project.name + '-ibm-release.aar')
+        logger.lifecycle("*** " + project.name + " file " + file.path)
+        def destName = file.name.replace("-release", "")
+        logger.lifecycle("Will be renamed to " + destName)
+        rename file.name, destName
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/ListView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/ListView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/ListView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/ListView.java	(date 1467729866000)
@@ -0,0 +1,10 @@
+package ibmmobileappbuilder.mvp.view;
+
+/**
+ * View (as in MVP) for listings
+ */
+public interface ListView<T> {
+    void refresh();
+    void showMessage(int messageRes);
+    void showDetail(T item, int position);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/DetailView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/DetailView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/DetailView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/DetailView.java	(date 1467729866000)
@@ -0,0 +1,11 @@
+package ibmmobileappbuilder.mvp.view;
+
+/**
+ * View (as in MVP) for details
+ */
+public interface DetailView {
+    void refresh();
+    void close(boolean shouldRefresh);
+    void showMessage(int message, boolean toast);
+    void navigateToEditForm();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/CrudListView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/CrudListView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/CrudListView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/CrudListView.java	(date 1467729866000)
@@ -0,0 +1,6 @@
+package ibmmobileappbuilder.mvp.view;
+
+public interface CrudListView<T> extends ListView<T> {
+    void showAdd();
+    void showEdit(T item, int position);
+}
Index: TravelAnalyser11/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/settings.gradle b/TravelAnalyser11/settings.gradle
new file mode 100644
--- /dev/null	(date 1756681123149)
+++ b/TravelAnalyser11/settings.gradle	(date 1756681123149)
@@ -0,0 +1,9 @@
+include ':app'
+//include other modules here
+//include ':core'
+//include ':charts'
+//include ':maps'
+//include ':acceptance_tests'
+//include ':analytics'
+//include ':push'
+//include ':cloudant'
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/MutableIdentifiableBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/MutableIdentifiableBean.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/MutableIdentifiableBean.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/MutableIdentifiableBean.java	(date 1467729866000)
@@ -0,0 +1,10 @@
+package ibmmobileappbuilder.mvp.model;
+
+/**
+ * Provides a bean with a mechanism to set ids. Methods here have a weird name to avoid name collisions
+ */
+public interface MutableIdentifiableBean extends IdentifiableBean {
+
+    void setIdentifiableId(String id);
+
+}
Index: TravelAnalyser11/app/proguard-rules.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/proguard-rules.txt b/TravelAnalyser11/app/proguard-rules.txt
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/app/proguard-rules.txt	(date 1467729866000)
@@ -0,0 +1,41 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:/Program Files (x86)/Android/android-studio/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# appworks rules
+-keepclassmembers class * extends android.support.v4.app.Fragment {
+    public static ** newInstance(android.os.Bundle);
+}
+
+# eventbus rules
+-keepclassmembers class ** {
+    public void onEvent*(**);
+}
+
+# Only required if you use AsyncExecutor
+-keepclassmembers class * extends de.greenrobot.event.util.ThrowableFailureEvent {
+    <init>(java.lang.Throwable);
+}
+
+#picasso
+-dontwarn com.squareup.okhttp.**
+
+#retrofit
+-dontwarn retrofit.appengine.UrlFetchClient
+-dontwarn okio.**
+-dontwarn rx.**
+
Index: TravelAnalyser11/analytics/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/build.gradle b/TravelAnalyser11/analytics/build.gradle
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/build.gradle	(date 1467729866000)
@@ -0,0 +1,44 @@
+apply plugin: 'com.android.library'
+
+android {
+    publishNonDefault true
+
+    compileSdkVersion project.compileSdkVersion
+    buildToolsVersion project.buildToolsVersion
+
+    defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+
+        versionCode 1
+        versionName "1.0"
+    }
+
+    productFlavors {
+        ibm {}
+
+        common {}
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    ibmCompile "com.ibm.mobile.foundation:ibmmobilefirstplatformfoundation:$ibmMfpVersion"
+    commonCompile "com.google.android.gms:play-services-analytics:$playServicesVersion"
+}
+
+task("copyAarToFramework", type: Copy, dependsOn: 'assembleRelease', overwrite: true) {
+    if (project.hasProperty("FRAMEWORK_PATH")) {
+        def destPath = project.FRAMEWORK_PATH + '/modules/' + project.name + '/app/libs/'
+        from('build/outputs/aar')
+        into(destPath)
+        include(project.name + '-*-release.aar')
+        rename '(.*)-release.aar', '$1.aar'
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/FormView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/FormView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/FormView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/view/FormView.java	(date 1467729866000)
@@ -0,0 +1,25 @@
+package ibmmobileappbuilder.mvp.view;
+
+/**
+ * View (as in MVP) for forms
+ */
+public interface FormView<T> {
+    /**
+     * Show a message to user
+     * @param toast if the message should be persistent (toast)
+     * @param messageId
+     */
+    void showMessage(int messageId, boolean toast);
+
+    /**
+     * Close the form and return to the caller
+     * @param shouldRefresh if the caller should refresh (usually a listview)
+     */
+    void close(boolean shouldRefresh);
+
+    /**
+     * sets the item to edit
+     * @param item
+     */
+    void setItem(T item);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdProvider.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdProvider.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdProvider.java	(date 1467729866000)
@@ -0,0 +1,5 @@
+package ibmmobileappbuilder.mvp.model;
+
+public interface IdProvider {
+    String identifier();
+}
Index: TravelAnalyser11/app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/.gitignore b/TravelAnalyser11/app/.gitignore
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/app/.gitignore	(date 1467729866000)
@@ -0,0 +1,1 @@
+/build
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdentifiableBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdentifiableBean.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdentifiableBean.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/model/IdentifiableBean.java	(date 1467729866000)
@@ -0,0 +1,7 @@
+package ibmmobileappbuilder.mvp.model;
+
+public interface IdentifiableBean {
+
+    String getIdentifiableId();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BasePresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BasePresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BasePresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BasePresenter.java	(date 1467729866000)
@@ -0,0 +1,14 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+public abstract class BasePresenter implements Presenter {
+
+    @Override
+    public void startPresenting() {
+
+    }
+
+    @Override
+    public void stopPresenting() {
+
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/FormPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/FormPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/FormPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/FormPresenter.java	(date 1467729866000)
@@ -0,0 +1,36 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import ibmmobileappbuilder.validation.Validator;
+
+public interface FormPresenter<T> extends Presenter {
+    /**
+     * delete item
+     *
+     * @param item
+     */
+    void deleteItem(T item);
+
+    /**
+     * save the item
+     *
+     * @param item
+     */
+    void save(T item);
+
+    /**
+     * save a new item
+     *
+     * @param item
+     */
+    void create(T item);
+
+    /**
+     * cancel editing
+     */
+    void cancel();
+
+    void addValidator(int id, Validator<T> v);
+
+    boolean validate(T item);
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailPresenter.java	(date 1467729866000)
@@ -0,0 +1,39 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.CrudDatasource;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.mvp.view.DetailView;
+
+public class DetailPresenter<T> extends BasePresenter implements DetailCrudPresenter<T>, Datasource.Listener<T> {
+
+    private final CrudDatasource<T> datasource;
+    private final DetailView view;
+
+    //Add datasource
+    public DetailPresenter(CrudDatasource<T> datasource, DetailView view) {
+        this.datasource = datasource;
+        this.view = view;
+    }
+
+    @Override
+    public void deleteItem(T item) {
+        datasource.deleteItem(item, this);
+    }
+
+    @Override
+    public void editForm(T item) {
+        view.navigateToEditForm();
+    }
+
+    @Override
+    public void onSuccess(T item) {
+        view.showMessage(R.string.item_deleted, true);
+        view.close(true);
+    }
+
+    @Override
+    public void onFailure(Exception e) {
+        view.showMessage(R.string.error_data_generic, true);
+    }
+}
Index: TravelAnalyser11/app/multidex.keep
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/multidex.keep b/TravelAnalyser11/app/multidex.keep
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/app/multidex.keep	(date 1467729866000)
@@ -0,0 +1,2 @@
+com/worklight/wlclient/WLPersistentCookieStore.class
+com/loopj/android/http/PersistentCookieStore.class
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListPresenter.java	(date 1467729866000)
@@ -0,0 +1,57 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import java.util.List;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.CrudDatasource;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.mvp.view.CrudListView;
+
+public class ListPresenter<T> extends BasePresenter implements ListCrudPresenter<T>, Datasource.Listener<T> {
+
+    private final CrudDatasource<T> crudDatasource;
+    private final CrudListView<T> view;
+
+    public ListPresenter(CrudDatasource<T> crudDatasource, CrudListView<T> view) {
+        this.crudDatasource = crudDatasource;
+        this.view = view;
+    }
+
+    @Override
+    public void deleteItem(T item) {
+        crudDatasource.deleteItem(item, this);
+    }
+
+    @Override
+    public void deleteItems(List<T> items) {
+        crudDatasource.deleteItems(items, this);
+    }
+
+    @Override
+    public void addForm() {
+        view.showAdd();
+    }
+
+    @Override
+    public void editForm(T item, int position) {
+        view.showEdit(item, position);
+    }
+
+    @Override
+    public void detail(T item, int position) {
+        view.showDetail(item, position);
+    }
+
+    @Override
+    public void onSuccess(T t) {
+        view.showMessage(R.string.items_deleted);
+        view.refresh();
+    }
+
+    @Override
+    public void onFailure(Exception e) {
+        view.showMessage(R.string.error_data_generic);
+    }
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailCrudPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailCrudPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailCrudPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DetailCrudPresenter.java	(date 1467729866000)
@@ -0,0 +1,20 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import ibmmobileappbuilder.mvp.presenter.Presenter;
+
+public interface DetailCrudPresenter<T> extends Presenter {
+    /**
+     * delete item
+     *
+     * @param item
+     */
+    void deleteItem(T item);
+
+    /**
+     * Go to edit form
+     *
+     * @param item
+     */
+    void editForm(T item);
+
+}
Index: TravelAnalyser11/gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/gradlew b/TravelAnalyser11/gradlew
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/gradlew	(date 1467729866000)
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BaseFormPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BaseFormPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BaseFormPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/BaseFormPresenter.java	(date 1467729866000)
@@ -0,0 +1,49 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import android.util.SparseArray;
+
+import ibmmobileappbuilder.mvp.view.FormView;
+import ibmmobileappbuilder.validation.Validator;
+
+public abstract class BaseFormPresenter<T> extends BasePresenter implements FormPresenter<T> {
+
+    private SparseArray<Validator<T>> validators;
+    protected final FormView<T> view;
+
+    public BaseFormPresenter(FormView<T> view) {
+        this.view = view;
+    }
+
+    @Override
+    public void cancel() {
+        view.close(false);
+    }
+
+    @Override
+    public void addValidator(int viewId, Validator<T> validator) {
+        if (this.validators == null) {
+            this.validators = new SparseArray<>();
+        }
+
+        this.validators.put(viewId, validator);
+    }
+
+    @Override
+    public boolean validate(T item) {
+        boolean res = true;
+        if (validators != null) {
+            for (int i = 0; i < validators.size(); i++) {
+                Validator<T> val = validators.get(validators.keyAt(i));
+                if (!val.validate(item)) {
+                    val.setError(true);
+                    res = false;
+                } else {
+                    val.setError(false);
+                }
+            }
+        }
+
+        return res;
+    }
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DefaultFormPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DefaultFormPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DefaultFormPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/DefaultFormPresenter.java	(date 1467729866000)
@@ -0,0 +1,75 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.CrudDatasource;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.mvp.view.FormView;
+
+public class DefaultFormPresenter<T> extends BaseFormPresenter<T> {
+
+    private final CrudDatasource<T> datasource;
+
+    public DefaultFormPresenter(CrudDatasource<T> datasource, FormView<T> view) {
+        super(view);
+        this.datasource = datasource;
+    }
+
+    @Override
+    public void deleteItem(T item) {
+        datasource.deleteItem(item, new OnItemDeletedListener());
+    }
+
+    @Override
+    public void save(T item) {
+        // validate
+        if (validate(item)) {
+            datasource.updateItem(item, new OnItemUpdatedListener());
+        } else {
+            this.view.showMessage(R.string.correct_errors, false);
+        }
+    }
+
+    @Override
+    public void create(T item) {
+        if (validate(item)) {
+            datasource.create(item, new OnItemCreatedListener());
+        } else {
+            this.view.showMessage(R.string.correct_errors, false);
+        }
+    }
+
+    private class OnItemDeletedListener extends ShowingErrorOnFailureListener {
+        @Override
+        public void onSuccess(T item) {
+            view.showMessage(R.string.item_deleted, true);
+            view.close(true);
+        }
+    }
+
+    private class OnItemUpdatedListener extends ShowingErrorOnFailureListener {
+        @Override
+        public void onSuccess(T item) {
+            view.setItem(item);
+            view.showMessage(R.string.item_updated, true);
+            view.close(true);
+        }
+
+    }
+
+    private class OnItemCreatedListener extends ShowingErrorOnFailureListener {
+        @Override
+        public void onSuccess(T item) {
+            view.setItem(item);
+            view.showMessage(R.string.item_created, true);
+            view.close(true);
+        }
+    }
+
+    private abstract class ShowingErrorOnFailureListener implements Datasource.Listener<T> {
+        @Override
+        public void onFailure(Exception e) {
+            view.showMessage(R.string.error_data_generic, true);
+        }
+    }
+
+}
Index: TravelAnalyser11/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/.gitignore b/TravelAnalyser11/.gitignore
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/.gitignore	(date 1467729866000)
@@ -0,0 +1,7 @@
+.gradle
+/local.properties
+/.idea/workspace.xml
+.DS_Store
+/.idea
+*.iml
+build/
Index: TravelAnalyser11/gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/gradlew.bat b/TravelAnalyser11/gradlew.bat
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/gradlew.bat	(date 1467729866000)
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/Presenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/Presenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/Presenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/Presenter.java	(date 1467729866000)
@@ -0,0 +1,6 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+public interface Presenter {
+    void startPresenting();
+    void stopPresenting();
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceQuery.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceQuery.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceQuery.java	(date 1467729866000)
@@ -0,0 +1,7 @@
+package ibmmobileappbuilder.data;
+
+import ibmmobileappbuilder.ds.SearchOptions;
+
+public interface DatasourceQuery<T> {
+    T generateQuery(SearchOptions searchOptions);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListCrudPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListCrudPresenter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListCrudPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/mvp/presenter/ListCrudPresenter.java	(date 1467729866000)
@@ -0,0 +1,37 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import java.util.List;
+
+import ibmmobileappbuilder.mvp.presenter.Presenter;
+
+public interface ListCrudPresenter<T> extends Presenter {
+    /**
+     * delete one item
+     * @param item
+     */
+    void deleteItem(T item);
+
+    /**
+     * delete a list of items
+     * @param items
+     */
+    void deleteItems(List<T> items);
+
+    /**
+     * Go to create form
+     */
+    void addForm();
+
+    /**
+     * Go to edit form
+     * @param item
+     */
+    void editForm(T item, int position);
+
+    /**
+     * Go to detail
+     * @param item
+     * @param position
+     */
+    void detail(T item, int position);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DecimalJsonTypeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DecimalJsonTypeAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DecimalJsonTypeAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DecimalJsonTypeAdapter.java	(date 1467729866000)
@@ -0,0 +1,46 @@
+package ibmmobileappbuilder.gson;
+
+import android.util.Log;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import java.lang.reflect.Type;
+
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+
+/**
+ * Adapter for Radarc-type Backend Decimal type.
+ */
+public class DecimalJsonTypeAdapter implements JsonDeserializer<Double>, JsonSerializer<Double> {
+
+    public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+            throws JsonParseException {
+
+        String jsonDouble = json.getAsString();
+        Double res = 0.0;
+        try {
+            res = Double.parseDouble(jsonDouble);
+        } catch (Exception e) {
+            analyticsReporter(ApplicationInjector.getApplicationContext()).sendHandledException(
+                    "DecimalJsonTypeAdapter",
+                    "ParseError",
+                    e
+            );
+            Log.d("ParseError", e.getMessage());
+        }
+        return res;
+    }
+
+    @Override
+    public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {
+        return new JsonPrimitive(src);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceSort.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceSort.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/data/DatasourceSort.java	(date 1467729866000)
@@ -0,0 +1,8 @@
+package ibmmobileappbuilder.data;
+
+import ibmmobileappbuilder.ds.SearchOptions;
+
+public interface DatasourceSort<T> {
+
+    T generateSort(SearchOptions searchOptions);
+}
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1756675175706)
+++ b/.idea/.gitignore	(date 1756675175706)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/BooleanJsonTypeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/BooleanJsonTypeAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/BooleanJsonTypeAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/BooleanJsonTypeAdapter.java	(date 1467729866000)
@@ -0,0 +1,40 @@
+package ibmmobileappbuilder.gson;
+
+import android.util.Log;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import java.lang.reflect.Type;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+public class BooleanJsonTypeAdapter implements JsonDeserializer<Boolean>, JsonSerializer<Boolean> {
+
+    @Override
+    public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        Boolean result = null;
+        try {
+            result = json.getAsBoolean();
+        } catch (Exception e) {
+            analyticsReporter(getApplicationContext()).sendHandledException(
+                    "BooleanJsonTypeAdapter",
+                    "ParseError",
+                    e
+            );
+            Log.d("ParseError", e.getMessage());
+        }
+        return result;
+    }
+
+    @Override
+    public JsonElement serialize(Boolean src, Type typeOfSrc, JsonSerializationContext context) {
+        return new JsonPrimitive(src);
+    }
+}
Index: .idea/proyecto_tpdi.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/proyecto_tpdi.iml b/.idea/proyecto_tpdi.iml
new file mode 100644
--- /dev/null	(date 1756681049572)
+++ b/.idea/proyecto_tpdi.iml	(date 1756681049572)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/URLJsonTypeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/URLJsonTypeAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/URLJsonTypeAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/URLJsonTypeAdapter.java	(date 1467729866000)
@@ -0,0 +1,47 @@
+package ibmmobileappbuilder.gson;
+
+import android.util.Log;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import java.lang.reflect.Type;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Adapter for Radarc-type Backend URL type.
+ */
+public class URLJsonTypeAdapter implements JsonDeserializer<URL>, JsonSerializer<URL> {
+
+    public URL deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+            throws JsonParseException {
+
+        String jsonUrl = json.getAsString();
+        URL result = null;
+        try {
+            result = new URL(jsonUrl);
+        } catch (MalformedURLException e) {
+            analyticsReporter(getApplicationContext()).sendHandledException(
+                    "URLJsonTypeAdapter",
+                    "Parse Error",
+                    e
+            );
+            Log.d("ParseError", e.getMessage());
+        }
+        return result;
+    }
+
+    @Override
+    public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {
+        return new JsonPrimitive(src.toExternalForm());
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1756681049953)
+++ b/.idea/vcs.xml	(date 1756681049953)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DateJsonTypeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DateJsonTypeAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DateJsonTypeAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/DateJsonTypeAdapter.java	(date 1467729866000)
@@ -0,0 +1,71 @@
+package ibmmobileappbuilder.gson;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import android.util.Log;
+
+import java.lang.reflect.Type;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.TimeZone;
+
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Adapter for Radarc-type Backend Date type.
+ */
+public class DateJsonTypeAdapter implements JsonDeserializer<Date>, JsonSerializer<Date> {
+
+    private static final String DEFAULT_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
+    private static final String[] ISO_FORMATS = {
+            DEFAULT_FORMAT,
+            "yyyy-MM-dd'T'HH:mm:ss'Z'",
+            "yyyy-MM-dd'T'HH:mm'Z'",
+            "yyyy-MM-dd",
+            "yyyyMMdd",
+            "yy-MM-dd",
+            "yyMMdd"
+    };
+
+
+    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+            throws JsonParseException {
+
+        String jsonDate = json.getAsString();
+
+        for (String format : ISO_FORMATS) {
+            try {
+                SimpleDateFormat sdf = new SimpleDateFormat(format);
+                // all dates must come in UTC timezone
+                sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
+                return sdf.parse(jsonDate);
+            } catch (Exception e) {
+                analyticsReporter(getApplicationContext()).sendHandledException(
+                        "DateJsonTypeAdapter",
+                        "ParseError",
+                        e
+                );
+                Log.d("ParseError", e.getMessage());
+            }
+        }
+
+        return null;
+    }
+
+    @Override
+    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
+        SimpleDateFormat sdf = new SimpleDateFormat(DEFAULT_FORMAT);
+        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
+
+        return new JsonPrimitive(sdf.format(src));
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/IntegerJsonTypeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/IntegerJsonTypeAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/IntegerJsonTypeAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/gson/IntegerJsonTypeAdapter.java	(date 1467729866000)
@@ -0,0 +1,34 @@
+package ibmmobileappbuilder.gson;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonToken;
+import com.google.gson.stream.JsonWriter;
+
+import java.io.IOException;
+
+public class IntegerJsonTypeAdapter extends TypeAdapter<Integer> {
+
+    @Override
+    public void write(JsonWriter out, Integer value) throws IOException {
+        if (value == null) {
+            out.nullValue();
+            return;
+        }
+        out.value(value);
+    }
+
+    @Override
+    public Integer read(JsonReader in) throws IOException {
+        if (in.peek() == JsonToken.NULL) {
+            in.nextNull();
+            return null;
+        }
+        String stringValue = in.nextString();
+        try {
+            return Integer.parseInt(stringValue);
+        } catch (NumberFormatException e) {
+            return null;
+        }
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1756825595206)
+++ b/.idea/misc.xml	(date 1756825595206)
@@ -0,0 +1,5 @@
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MathUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MathUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MathUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MathUtils.java	(date 1467729866000)
@@ -0,0 +1,27 @@
+package ibmmobileappbuilder.util;
+
+/**
+ * Numeric utility methods
+ */
+public class MathUtils {
+
+    /**
+     * Calculate the order of magnitude of a number (float by now)
+     *
+     * @param range the input string
+     * @return the resulting order
+     */
+    public static int getOrderOfMagnitude(int range) {
+
+        int aux = range;
+        int mag = 1;
+        while (aux > 10) {
+            mag = mag * 10;
+            aux = aux / 10;
+        }
+        ;
+        return mag;
+    }
+
+
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1756681049592)
+++ b/.idea/modules.xml	(date 1756681049592)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/proyecto_tpdi.iml" filepath="$PROJECT_DIR$/.idea/proyecto_tpdi.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/libraries/App.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/App.xml b/.idea/libraries/App.xml
new file mode 100644
--- /dev/null	(date 1756681049752)
+++ b/.idea/libraries/App.xml	(date 1756681049752)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+  <library name="App">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/App.zip!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/Constants.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/Constants.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/Constants.java	(date 1467729866000)
@@ -0,0 +1,16 @@
+package ibmmobileappbuilder.util;
+
+public interface Constants {
+
+    String ITEMPOS = "itempos";
+    String TITLE = "title";
+    String SIZE = "size";
+    String CONTENT = "content";
+    String MODE = "mode";
+    int MODE_EDIT = 1;
+    int MODE_CREATE = 2;
+    int DETAIL = 3;
+
+    int CONTENT_UPDATED = 100;
+    int CONTENT_NOT_UPDATED = 101;
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ColorUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ColorUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ColorUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ColorUtils.java	(date 1467729866000)
@@ -0,0 +1,39 @@
+package ibmmobileappbuilder.util;
+
+import android.content.Context;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
+import android.view.MenuItem;
+
+public class ColorUtils {
+
+    private static final String[] PALETTE_DEFAULT = {"#17B9ED", "#1992B8", "#31D755", "#EDE66D",
+            "#F4C745",
+            "#E88E38", "#EA4C26", "#FC6CBC", "#E94A86", "#C230D8", "#9A1CF5", "#733BC7", "#8551F3",
+            "#5E4FDE", "#4A3DBD", "#173791", "#32769A", "#30A198", "#26BBAF", "#379B7D", "#7DB324",
+            "#A0D743", "#A3A153", "#B69042", "#EFAC57", "#EF5E57", "#FC8599", "#DD6C6C", "#4D5EFF",
+            "#24DDEB"};
+
+    public static String[] getDefaultPalette() {
+        return PALETTE_DEFAULT;
+    }
+
+    /**
+     * Tints a menu item icon
+     * @param item
+     */
+    public static void tintIcon(MenuItem item, int resId, Context context){
+        Drawable drawable = item.getIcon();
+        tintIcon(drawable, resId, context);
+    }
+
+    public static void tintIcon(Drawable drawable, int resId, Context context){
+        if (drawable != null && context != null) {
+            // If we don't mutate the drawable, then all drawables with this id will have a color
+            // filter applied to it.
+            drawable.mutate();
+            drawable.setColorFilter(context.getResources().getColor(resId),
+                    PorterDuff.Mode.SRC_IN);
+        }
+    }
+}
Index: .idea/caches/deviceStreaming.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/caches/deviceStreaming.xml b/.idea/caches/deviceStreaming.xml
new file mode 100644
--- /dev/null	(date 1756681049979)
+++ b/.idea/caches/deviceStreaming.xml	(date 1756681049979)
@@ -0,0 +1,848 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DeviceStreaming">
+    <option name="deviceSelectionList">
+      <list>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="Sony" />
+          <option name="codename" value="A402SO" />
+          <option name="id" value="A402SO" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Sony" />
+          <option name="name" value="Xperia 10" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2520" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="27" />
+          <option name="brand" value="DOCOMO" />
+          <option name="codename" value="F01L" />
+          <option name="id" value="F01L" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="FUJITSU" />
+          <option name="name" value="F-01L" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1280" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="OnePlus" />
+          <option name="codename" value="OP535DL1" />
+          <option name="id" value="OP535DL1" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="OnePlus" />
+          <option name="name" value="CPH2409" />
+          <option name="screenDensity" value="401" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2412" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="OnePlus" />
+          <option name="codename" value="OP5552L1" />
+          <option name="id" value="OP5552L1" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="OnePlus" />
+          <option name="name" value="CPH2415" />
+          <option name="screenDensity" value="480" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2412" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="OPPO" />
+          <option name="codename" value="OP573DL1" />
+          <option name="id" value="OP573DL1" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="OPPO" />
+          <option name="name" value="CPH2557" />
+          <option name="screenDensity" value="480" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="28" />
+          <option name="brand" value="DOCOMO" />
+          <option name="codename" value="SH-01L" />
+          <option name="id" value="SH-01L" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="SHARP" />
+          <option name="name" value="AQUOS sense2 SH-01L" />
+          <option name="screenDensity" value="480" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2160" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a14m" />
+          <option name="id" value="a14m" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-A145R" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2408" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a15" />
+          <option name="id" value="a15" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="A15" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a15x" />
+          <option name="id" value="a15x" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="A15 5G" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a16x" />
+          <option name="id" value="a16x" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="A16 5G" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a35x" />
+          <option name="id" value="a35x" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="A35" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="akita" />
+          <option name="id" value="akita" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 8a" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="akita" />
+          <option name="id" value="akita" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 8a" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="arcfox" />
+          <option name="id" value="arcfox" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="razr plus 2024" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="1272" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="austin" />
+          <option name="id" value="austin" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="moto g 5G (2022)" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1600" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="b0q" />
+          <option name="id" value="b0q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S22 Ultra" />
+          <option name="screenDensity" value="600" />
+          <option name="screenX" value="1440" />
+          <option name="screenY" value="3088" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="b6q" />
+          <option name="id" value="b6q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Flip 6" />
+          <option name="screenDensity" value="340" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2640" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="32" />
+          <option name="brand" value="google" />
+          <option name="codename" value="bluejay" />
+          <option name="id" value="bluejay" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 6a" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="caiman" />
+          <option name="id" value="caiman" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="960" />
+          <option name="screenY" value="2142" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="caiman" />
+          <option name="id" value="caiman" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="960" />
+          <option name="screenY" value="2142" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="comet" />
+          <option name="default" value="true" />
+          <option name="id" value="comet" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro Fold" />
+          <option name="screenDensity" value="390" />
+          <option name="screenX" value="2076" />
+          <option name="screenY" value="2152" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="comet" />
+          <option name="default" value="true" />
+          <option name="id" value="comet" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro Fold" />
+          <option name="screenDensity" value="390" />
+          <option name="screenX" value="2076" />
+          <option name="screenY" value="2152" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="29" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="crownqlteue" />
+          <option name="id" value="crownqlteue" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy Note9" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="2220" />
+          <option name="screenY" value="1080" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="dm2q" />
+          <option name="id" value="dm2q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="S23 Plus" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="dm3q" />
+          <option name="id" value="dm3q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S23 Ultra" />
+          <option name="screenDensity" value="600" />
+          <option name="screenX" value="1440" />
+          <option name="screenY" value="3088" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="dubai" />
+          <option name="id" value="dubai" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="edge 30" />
+          <option name="screenDensity" value="405" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="e1q" />
+          <option name="default" value="true" />
+          <option name="id" value="e1q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S24" />
+          <option name="screenDensity" value="480" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="e3q" />
+          <option name="id" value="e3q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S24 Ultra" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1440" />
+          <option name="screenY" value="3120" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="google" />
+          <option name="codename" value="eos" />
+          <option name="id" value="eos" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Eos" />
+          <option name="screenDensity" value="320" />
+          <option name="screenX" value="384" />
+          <option name="screenY" value="384" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="eqe" />
+          <option name="id" value="eqe" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="edge 50 pro" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1220" />
+          <option name="screenY" value="2712" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="google" />
+          <option name="codename" value="felix" />
+          <option name="id" value="felix" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel Fold" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="2208" />
+          <option name="screenY" value="1840" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="felix" />
+          <option name="id" value="felix" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel Fold" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="2208" />
+          <option name="screenY" value="1840" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="google" />
+          <option name="codename" value="felix_camera" />
+          <option name="id" value="felix_camera" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel Fold (Camera-enabled)" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="2208" />
+          <option name="screenY" value="1840" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="fogona" />
+          <option name="id" value="fogona" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="moto g play - 2024" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1600" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="fogos" />
+          <option name="id" value="fogos" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="moto g34 5G" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1600" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="g0q" />
+          <option name="id" value="g0q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-S906U1" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gta9pwifi" />
+          <option name="id" value="gta9pwifi" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-X210" />
+          <option name="screenDensity" value="240" />
+          <option name="screenX" value="1200" />
+          <option name="screenY" value="1920" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gts7lwifi" />
+          <option name="id" value="gts7lwifi" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-T870" />
+          <option name="screenDensity" value="340" />
+          <option name="screenX" value="1600" />
+          <option name="screenY" value="2560" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gts7xllite" />
+          <option name="id" value="gts7xllite" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-T738U" />
+          <option name="screenDensity" value="340" />
+          <option name="screenX" value="1600" />
+          <option name="screenY" value="2560" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gts8uwifi" />
+          <option name="formFactor" value="Tablet" />
+          <option name="id" value="gts8uwifi" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy Tab S8 Ultra" />
+          <option name="screenDensity" value="320" />
+          <option name="screenX" value="1848" />
+          <option name="screenY" value="2960" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gts8wifi" />
+          <option name="formFactor" value="Tablet" />
+          <option name="id" value="gts8wifi" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy Tab S8" />
+          <option name="screenDensity" value="274" />
+          <option name="screenX" value="1600" />
+          <option name="screenY" value="2560" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gts9fe" />
+          <option name="id" value="gts9fe" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy Tab S9 FE 5G" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="1440" />
+          <option name="screenY" value="2304" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="gts9wifi" />
+          <option name="id" value="gts9wifi" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-X710" />
+          <option name="screenDensity" value="340" />
+          <option name="screenX" value="1600" />
+          <option name="screenY" value="2560" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="husky" />
+          <option name="id" value="husky" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 8 Pro" />
+          <option name="screenDensity" value="390" />
+          <option name="screenX" value="1008" />
+          <option name="screenY" value="2244" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="30" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="java" />
+          <option name="id" value="java" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="G20" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1600" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="komodo" />
+          <option name="id" value="komodo" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro XL" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="1008" />
+          <option name="screenY" value="2244" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="komodo" />
+          <option name="id" value="komodo" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro XL" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="1008" />
+          <option name="screenY" value="2244" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="lion" />
+          <option name="id" value="lion" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="moto g04" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1612" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="google" />
+          <option name="codename" value="lynx" />
+          <option name="id" value="lynx" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 7a" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="lyriq" />
+          <option name="id" value="lyriq" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="edge 40" />
+          <option name="screenDensity" value="400" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="manaus" />
+          <option name="id" value="manaus" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="edge 40 neo" />
+          <option name="screenDensity" value="400" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="motorola" />
+          <option name="codename" value="maui" />
+          <option name="id" value="maui" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Motorola" />
+          <option name="name" value="moto g play - 2023" />
+          <option name="screenDensity" value="280" />
+          <option name="screenX" value="720" />
+          <option name="screenY" value="1600" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="o1q" />
+          <option name="id" value="o1q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S21" />
+          <option name="screenDensity" value="421" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="31" />
+          <option name="brand" value="google" />
+          <option name="codename" value="oriole" />
+          <option name="id" value="oriole" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 6" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="pa3q" />
+          <option name="id" value="pa3q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S25 Ultra" />
+          <option name="screenDensity" value="600" />
+          <option name="screenX" value="1440" />
+          <option name="screenY" value="3120" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="google" />
+          <option name="codename" value="panther" />
+          <option name="id" value="panther" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 7" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="q5q" />
+          <option name="id" value="q5q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy Z Fold5" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1812" />
+          <option name="screenY" value="2176" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="q6q" />
+          <option name="id" value="q6q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy Z Fold6" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1856" />
+          <option name="screenY" value="2160" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="30" />
+          <option name="brand" value="google" />
+          <option name="codename" value="r11" />
+          <option name="formFactor" value="Wear OS" />
+          <option name="id" value="r11" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel Watch" />
+          <option name="screenDensity" value="320" />
+          <option name="screenX" value="384" />
+          <option name="screenY" value="384" />
+          <option name="type" value="WEAR_OS" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="r11q" />
+          <option name="id" value="r11q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-S711U" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="30" />
+          <option name="brand" value="google" />
+          <option name="codename" value="redfin" />
+          <option name="id" value="redfin" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 5" />
+          <option name="screenDensity" value="440" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="shiba" />
+          <option name="id" value="shiba" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 8" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="t2q" />
+          <option name="id" value="t2q" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="Galaxy S21 Plus" />
+          <option name="screenDensity" value="394" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2400" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="33" />
+          <option name="brand" value="google" />
+          <option name="codename" value="tangorpro" />
+          <option name="formFactor" value="Tablet" />
+          <option name="id" value="tangorpro" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel Tablet" />
+          <option name="screenDensity" value="320" />
+          <option name="screenX" value="1600" />
+          <option name="screenY" value="2560" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="tegu" />
+          <option name="id" value="tegu" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9a" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2424" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="tokay" />
+          <option name="default" value="true" />
+          <option name="id" value="tokay" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2424" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="tokay" />
+          <option name="default" value="true" />
+          <option name="id" value="tokay" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2424" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="36" />
+          <option name="brand" value="google" />
+          <option name="codename" value="tokay" />
+          <option name="default" value="true" />
+          <option name="id" value="tokay" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2424" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="xcover7" />
+          <option name="id" value="xcover7" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-G556B" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2408" />
+        </PersistentDeviceSelectionData>
+      </list>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: TravelAnalyser11/app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/AndroidManifest.xml b/TravelAnalyser11/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/AndroidManifest.xml	(date 1475330010000)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254" >
+
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme"
+        android:name=".MyApplication">
+
+        <meta-data
+            android:name="com.google.android.geo.API_KEY"
+            android:value="AIzaSyAyV5ubLJhXkoryyuXsBGx6NNCKvYCRQ6E"/>
+        <activity android:name="com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui.TravelAnalyser11Main"
+            android:label="@string/travelAnalyser11Main"
+            android:theme="@style/AppTheme.Drawer">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+      </activity>
+        <activity android:name="com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui.TravelDestinationScreen1Activity"
+        />
+        <activity android:name="com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui.SuggestedclothingActivity"
+        />
+        <activity android:name="com.worklight.wlclient.ui.UIActivity"/>
+    </application>
+
+</manifest>
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/NavigationUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/NavigationUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/NavigationUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/NavigationUtils.java	(date 1467729866000)
@@ -0,0 +1,62 @@
+package ibmmobileappbuilder.util;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.actions.StartActivityAction;
+import ibmmobileappbuilder.ui.DetailFragment;
+
+public class NavigationUtils {
+    @SuppressWarnings("unchecked")
+    public static void navigateToDetail(Context context, Class activityClass, Class fragmentClass, Bundle args) {
+        if (context.getResources().getBoolean(R.bool.tabletLayout) && context instanceof FragmentActivity) {
+            FragmentManager fragmentManager = ((FragmentActivity) context).getSupportFragmentManager();
+            DetailFragment fr = (DetailFragment) fragmentManager.findFragmentById(R.id.detail_frame);
+            if (fr == null || !fr.getClass().equals(fragmentClass)) {
+                FragmentTransaction replaceTransaction = fragmentManager.beginTransaction();
+                replaceTransaction.replace(R.id.detail_frame,
+                        FragmentUtils.instantiate(fragmentClass, args)
+                );
+                replaceTransaction.commit();
+            } else {
+                fr.setItem(args.getParcelable(Constants.CONTENT));
+            }
+        } else {
+            // show detail activity.
+            Intent intent = new Intent(context, activityClass);
+            intent.putExtras(args);
+            context.startActivity(intent);
+        }
+    }
+
+    public static <T> void showAddOrUpdateItem(T item,
+                                               int position,
+                                               FragmentActivity activity,
+                                               Class activityClass) {
+        Bundle args = new Bundle();
+        args.putInt(Constants.ITEMPOS, position);
+        args.putParcelable(Constants.CONTENT, (Parcelable) item);
+        int requestCode = item == null ? Constants.MODE_CREATE : Constants.MODE_EDIT;
+        args.putInt(Constants.MODE, requestCode);
+
+        new StartActivityAction(activityClass, args, requestCode).execute(activity);
+    }
+
+    public static <T> Intent generateIntentToAddOrUpdateItem(T item,
+                                                             int position,
+                                                             FragmentActivity activity,
+                                                             Class activityClass) {
+        Bundle args = new Bundle();
+        args.putInt(Constants.ITEMPOS, position);
+        args.putParcelable(Constants.CONTENT, (Parcelable) item);
+        Intent intent = new Intent(activity, activityClass);
+        intent.putExtras(args);
+        return intent;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringUtils.java	(date 1467729866000)
@@ -0,0 +1,262 @@
+package ibmmobileappbuilder.util;
+
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+import java.util.TimeZone;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.ds.restds.GeoPoint;
+import ibmmobileappbuilder.injectors.GsonInjector;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * String utility methods
+ */
+public class StringUtils {
+
+    private static final String TAG = StringUtils.class.getSimpleName();
+    private static final AnalyticsReporter ANALYTICS_REPORTER = analyticsReporter(getApplicationContext());
+
+    /**
+     * returns the first chars from a String, or the entire string if its lenght is lower than
+     * nChars
+     *
+     * @param theString the input string
+     * @param nChars    the number of chars to be returned (if lenght < nchars)
+     * @param ellipsize if a "..." should be appended to the output
+     * @return the truncated char
+     */
+    public static String firstNChars(String theString, int nChars, boolean ellipsize) {
+        if (theString == null) {
+            return null;
+        }
+
+        int endIndex = theString.length() > nChars ? nChars : theString.length() - 1;
+
+        return theString.substring(0, endIndex) + (ellipsize ? " ..." : "");
+    }
+
+    /**
+     * Remove all &lt;img&gt; tags from the input string
+     *
+     * @param input the input string
+     * @return the resulting string
+     */
+    public static String removeImgTag(String input) {
+        return input.replaceAll("<img.+?>", "");
+    }
+
+    /**
+     * returns a data object as a Number despite of its type. Used in charts.
+     *
+     * @param num the object to be converted to Number. Could be String or Double
+     * @return the object converted to Number
+     */
+    public static Number StringToNumber(Object num) {
+        if (num == null) {
+            return null;
+        }
+
+        if (num instanceof Number) {
+            return (Number) num;
+        }
+
+        Number res = null;
+
+        try {
+            if (num instanceof String) {
+                res = Float.parseFloat((String) num);
+            }
+        } catch (NumberFormatException e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "Error parsing string to number", e);
+            Log.d("Parsing Error", "Error parsing string to number " + e.getMessage());
+        }
+        return res;
+    }
+
+    /**
+     * Utility method to parse a date using ISO-8601
+     *
+     * @return the parsed date or null if an exception occurs
+     */
+    public static Date parseDateTime(String date) {
+        Date res = null;
+        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.getDefault());
+        // all dates must come in UTC timezone
+        df.setTimeZone(TimeZone.getTimeZone("UTC"));
+        try {
+            res = df.parse(date);
+        } catch (ParseException e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "Parse Error while parsing Date", e);
+            Log.e("ParseError", e.getMessage());
+        }
+
+        return res;
+    }
+
+    /**
+     * Utility method to parse a date using ISO-8601
+     *
+     * @return the parsed date or null if an exception occurs
+     */
+    public static Date parseDate(String date) {
+        Date res = null;
+        DateFormat df = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
+        // all dates must come in UTC timezone
+        df.setTimeZone(TimeZone.getTimeZone("UTC"));
+        try {
+            res = df.parse(date);
+        } catch (ParseException e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "Parse Error while parsing Date", e);
+            Log.e("ParseError", e.getMessage());
+        }
+
+        return res;
+    }
+
+    /**
+     * Returns the short month name, given its month number
+     *
+     * @param month
+     * @return the month name (JAN, FEB, etc). Months are 0-based
+     */
+    public static String monthName(int month) {
+        Calendar cal = Calendar.getInstance();
+        try {
+            cal.set(Calendar.MONTH, month);
+            SimpleDateFormat format = new SimpleDateFormat("MMM");
+            return format.format(cal.getTime());
+        } catch (Exception e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "monthName", e);
+            return null;
+        }
+    }
+
+    /*
+     * Converts a double into a String for TextViews, removing optionally any
+     * 0 decimals (ie: 34.00 -> 34)
+     */
+    public static String doubleToString(Double val, boolean removeTrailingZeroes) {
+        if (val == null) {
+            return null;
+        }
+
+        String res = val.toString();
+        return removeTrailingZeroes ?
+                res.replaceAll("\\.0*$", "") :
+                res;
+    }
+
+    public static Long parseLong(String value) {
+        Long res;
+        try {
+            res = (value != null && value.length() != 0) ? Long.parseLong(value.toString()) : null;
+        } catch (NumberFormatException e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "parseLong", e);
+            res = null;
+        }
+        return res;
+    }
+
+    public static Double parseDouble(String value) {
+        Double res;
+        try {
+            res = (value != null && value.length() != 0) ? Double.parseDouble(value.toString()) : null;
+        } catch (NumberFormatException e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "parseDouble", e);
+            res = null;
+        }
+        return res;
+    }
+
+    /**
+     * Utility for transforming a boolean into a string, supporting nulls (tristate)
+     *
+     * @param value the Boolean object, can be null
+     * @return a string representation of the value
+     */
+    public static String booleanToString(Boolean value) {
+        return (value == null) ? "" : (value ? "Yes" : "No");
+    }
+
+    public static GeoPoint parseGeopoint(String geopointJson) {
+        return GsonInjector.cloudantGson().fromJson(geopointJson, GeoPoint.class);
+    }
+
+    /**
+     * parses a string and try to take an url from it
+     *
+     * @param value the input string
+     * @return a valid url, or null
+     */
+    public static
+    @Nullable
+    URL parseUrl(String value) {
+        try {
+            return new URL(value);
+        } catch (MalformedURLException e) {
+            ANALYTICS_REPORTER.sendHandledException(TAG, "parseUrl", e);
+            return null;
+        }
+    }
+
+    /**
+     * check if a url is relative, and prepends a baseUrl in that case
+     *
+     * @param baseUrl the base url to prepend if the url is relative
+     * @param url     the url to parse (if relative, it must start with '/')
+     * @param qs      query string
+     * @return a valid url, or null
+     */
+    public static
+    @Nullable
+    URL parseUrl(String baseUrl, String url, String qs) {
+        if (url == null) {
+            return null;
+        }
+
+        if (url.startsWith("http://") || url.startsWith("https://")) {
+            return parseUrl(url);
+        } else if (baseUrl != null) {
+            String postfix = qs != null ? (url.indexOf('?') >= 0 ? "&" : "?") + qs : "";
+
+            // url is relative
+            if (baseUrl.endsWith("/")) {
+                baseUrl = baseUrl.substring(0, baseUrl.length());
+            }
+
+            return parseUrl(baseUrl + url + postfix);
+        }
+
+        return null;
+    }
+
+    /**
+     * silly method overload to better and cleaner code generation
+     *
+     * @param url an url
+     * @return the same input url
+     */
+    public static URL parseUrl(URL url) {
+        return url;
+    }
+
+    public static boolean isEmptyOrNull(String text) {
+        return text == null || text.isEmpty();
+    }
+
+    public static boolean isNotEmptyOrNull(String text) {
+        return !isEmptyOrNull(text);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ConnectivityUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ConnectivityUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ConnectivityUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ConnectivityUtils.java	(date 1467729866000)
@@ -0,0 +1,18 @@
+package ibmmobileappbuilder.util;
+
+import android.content.Context;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+
+public class ConnectivityUtils {
+
+    public static boolean isConnected(Context context) {
+        ConnectivityManager cm = (ConnectivityManager) context
+                .getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo netInfo = cm.getActiveNetworkInfo();
+        if (netInfo != null && netInfo.isConnectedOrConnecting()) {
+            return true;
+        }
+        return false;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FilterUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FilterUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FilterUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FilterUtils.java	(date 1467729866000)
@@ -0,0 +1,102 @@
+package ibmmobileappbuilder.util;
+
+import android.content.Context;
+import android.util.Log;
+
+import java.util.Date;
+import java.util.List;
+
+import ibmmobileappbuilder.ds.filter.Filter;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Utility class to ease the sorting and searching actions in lists.
+ */
+public class FilterUtils {
+
+    public static int compareString(Object o1, Object o2) {
+        int res;
+        if (o1 == null || o2 == null) {
+            res = 0;
+        } else {
+            res = ((String) o1).compareToIgnoreCase((String) o2);
+        }
+        return res;
+    }
+
+    public static int compareDouble(Double d1, Double d2) {
+        int res;
+        if (d1 == null || d2 == null) {
+            res = 0;
+        } else {
+            res = d1.compareTo(d2);
+        }
+        return res;
+    }
+
+    public static int compareDate(Context context, Object o1, Object o2) {
+        // params will come as Strings
+        int res;
+        if (o1 == null || o2 == null) {
+            res = 0;
+        } else {
+            try {
+                Date d1 = android.text.format.DateFormat.getMediumDateFormat(context)
+                        .parse((String) o1);
+                Date d2 = android.text.format.DateFormat.getMediumDateFormat(context)
+                        .parse((String) o2);
+                res = d1.compareTo(d2);
+            } catch (Exception e) {
+                analyticsReporter(getApplicationContext()).sendHandledException(
+                        "FilterUtils",
+                        "Parse Error",
+                        e
+                );
+                Log.e("ParseError", e.getMessage());
+                res = 0;
+            }
+        }
+        return res;
+    }
+
+
+    public static boolean searchInString(String columnText, String filterText) {
+        boolean res = false;
+        if (columnText != null && filterText != null) {
+            res = columnText.toLowerCase().contains(filterText.toLowerCase());
+        }
+        return res;
+    }
+
+    public static boolean searchInDouble(Double columnText, String filterText) {
+        boolean res = false;
+        if (columnText != null && filterText != null) {
+            res = columnText.toString().toLowerCase().contains(filterText.toLowerCase());
+        }
+        return res;
+    }
+
+    public static boolean searchInDate(Date columnText, String filterText) {
+        boolean res = false;
+        if (columnText != null && filterText != null) {
+            res = columnText.toString().toLowerCase().contains(filterText.toLowerCase());
+        }
+        return res;
+    }
+
+    public static boolean applyFilters(String name, Object value, List<Filter> filters) {
+        if (filters != null) {
+            for (Filter filter : filters) {
+                if (filter.getField().equals(name)) {
+                    if (!filter.applyFilter(value)) {
+                        return false;
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/EndlessScrollListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/EndlessScrollListener.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/EndlessScrollListener.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/EndlessScrollListener.java	(date 1467729866000)
@@ -0,0 +1,69 @@
+package ibmmobileappbuilder.util;
+
+import android.widget.AbsListView;
+
+/**
+ * Scroll listener for endless lists/grids
+ * Simplified version of: https://github.com/thecodepath/android_guides/wiki/Endless-Scrolling-with-AdapterViews
+ */
+public abstract class EndlessScrollListener implements AbsListView.OnScrollListener {
+
+    // The minimum amount of items to have below your current scroll position
+    // before loading more.
+    private int visibleThreshold = 5;
+
+    // The current offset index of data you have loaded
+    private int currentPage = 0;
+
+    // True if we are still waiting for the last set of data to load.
+    private boolean loading = false;
+
+    // Sets the starting page index
+    private int startingPageIndex = 0;
+
+    public EndlessScrollListener() {
+    }
+
+    public EndlessScrollListener(int visibleThreshold) {
+        this.visibleThreshold = visibleThreshold;
+    }
+
+    public EndlessScrollListener(int visibleThreshold, int startPage) {
+        this.visibleThreshold = visibleThreshold;
+        this.startingPageIndex = startPage;
+        this.currentPage = startPage;
+    }
+
+    // This happens many times a second during a scroll, so be wary of the code you place here.
+    // We are given a few useful parameters to help us work out if we need to load some more data,
+    // but first we check if we are waiting for the previous load to finish.
+    @Override
+    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,
+            int totalItemCount) {
+        // If the total item count is zero (or 1 if we count the footer in) assume the
+        // list is invalidated and should be reset back to initial state
+        if (totalItemCount <= 1) {
+            this.currentPage = this.startingPageIndex;
+            return;
+        }
+
+        // if the last item is visible, load next batch
+        if (!loading && (firstVisibleItem + visibleItemCount
+                >= totalItemCount - visibleThreshold)) {
+            loading = true;
+            onLoadMore(++currentPage, totalItemCount);
+        }
+    }
+
+    public void finishLoading() {
+        this.loading = false;
+    }
+
+    // Defines the process for actually loading more data based on page
+    public abstract void onLoadMore(int page, int totalItemsCount);
+
+    @Override
+    public void onScrollStateChanged(AbsListView view, int scrollState) {
+        // Don't take any action on changed
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ViewHolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ViewHolder.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ViewHolder.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/ViewHolder.java	(date 1467729866000)
@@ -0,0 +1,52 @@
+package ibmmobileappbuilder.util;
+
+import android.util.SparseArray;
+import android.view.View;
+import android.widget.Checkable;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+/**
+ * Implementation of the ViewHolder pattern for reusing views in listings/grids
+ */
+@SuppressWarnings("unchecked")
+public class ViewHolder {
+
+    public static <T extends View> T get(View view, int id) {
+        SparseArray<View> viewHolder = (SparseArray<View>) view.getTag();
+        if (viewHolder == null) {
+            viewHolder = new SparseArray<View>();
+            view.setTag(viewHolder);
+        }
+
+        View childView = viewHolder.get(id);
+        if (childView == null) {
+            childView = view.findViewById(id);
+            viewHolder.put(id, childView);
+        }
+
+        resetView(childView);
+
+        return (T) childView;
+    }
+
+    /**
+     * Reset view content for recycling
+     *
+     * @param view the view to reset
+     */
+    private static void resetView(View view) {
+        if (view instanceof TextView) {
+            ((TextView) view).setText(null);
+        } else if(view instanceof ImageButton){
+            return;
+        }
+        else if (view instanceof ImageView) {
+            ((ImageView) view).setImageDrawable(null);
+        }
+        if(view instanceof Checkable){
+            ((Checkable) view).setChecked(false);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/SecurePreferences.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/SecurePreferences.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/SecurePreferences.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/SecurePreferences.java	(date 1467729866000)
@@ -0,0 +1,364 @@
+package ibmmobileappbuilder.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.provider.Settings;
+import android.util.Base64;
+import android.util.Log;
+
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.KeySpec;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import javax.crypto.Cipher;
+import javax.crypto.KeyGenerator;
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
+import javax.crypto.spec.SecretKeySpec;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Wrapper class for Android's {@link SharedPreferences} interface, which adds a
+ * layer of
+ * encryption to the persistent storage and retrieval of sensitive key-value pairs of primitive
+ * data types.
+ * <p/>
+ * This class provides important - but nevertheless imperfect - protection against simple attacks
+ * by casual snoopers. It is crucial to remember that even encrypted data may still be susceptible
+ * to attacks, especially on rooted or stolen devices!
+ * <p/>
+ * This class requires API level 8 (Android 2.2, a.k.a. "Froyo") or greater.
+ *
+ * @see <a href="http://www.codeproject.com/Articles/549119/Encryption-Wrapper-for-Android-SharedPreferences">CodeProject
+ * article</a>
+ */
+public class SecurePreferences implements SharedPreferences {
+
+    public static final String TAG = SecurePreferences.class.getSimpleName();
+    private static SharedPreferences sFile;
+    private final AnalyticsReporter analyticsReporter = analyticsReporter(getApplicationContext());
+
+    private static byte[] sKey;
+
+    /**
+     * Constructor.
+     *
+     * @param context the caller's context
+     */
+    public SecurePreferences(Context context) {
+        // Proxy design pattern
+        if (SecurePreferences.sFile == null) {
+            SecurePreferences.sFile = PreferenceManager.getDefaultSharedPreferences(context);
+        }
+        // Initialize encryption/decryption key
+        try {
+            final String key = SecurePreferences.generateAesKeyName(context);
+            String value = SecurePreferences.sFile.getString(key, null);
+            if (value == null) {
+                value = SecurePreferences.generateAesKeyValue();
+                SecurePreferences.sFile.edit().putString(key, value).commit();
+            }
+            SecurePreferences.sKey = SecurePreferences.decode(value);
+        } catch (Exception e) {
+            throw new IllegalStateException(e);
+        }
+    }
+
+    private static String encode(byte[] input) {
+        return Base64.encodeToString(input, Base64.NO_PADDING | Base64.NO_WRAP);
+    }
+
+    private static byte[] decode(String input) {
+        return Base64.decode(input, Base64.NO_PADDING | Base64.NO_WRAP);
+    }
+
+    private static String generateAesKeyName(Context context) throws InvalidKeySpecException,
+            NoSuchAlgorithmException {
+        final char[] password = context.getPackageName().toCharArray();
+        final byte[] salt = Settings.Secure.getString(context.getContentResolver(),
+                Settings.Secure.ANDROID_ID
+        ).getBytes();
+
+        // Number of PBKDF2 hardening rounds to use, larger values increase
+        // computation time, you should select a value that causes
+        // computation to take >100ms
+        final int iterations = 1000;
+
+        // Generate a 256-bit key
+        final int keyLength = 256;
+
+        final KeySpec spec = new PBEKeySpec(password, salt, iterations, keyLength);
+        return SecurePreferences.encode(SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1")
+                        .generateSecret(spec).getEncoded()
+        );
+    }
+
+    private static String generateAesKeyValue() throws NoSuchAlgorithmException {
+        // Do *not* seed secureRandom! Automatically seeded from system entropy
+        final SecureRandom random = new SecureRandom();
+
+        // Use the largest AES key length which is supported by the OS
+        final KeyGenerator generator = KeyGenerator.getInstance("AES");
+        try {
+            generator.init(256, random);
+        } catch (Exception e) {
+            try {
+                generator.init(192, random);
+            } catch (Exception e1) {
+                generator.init(128, random);
+            }
+        }
+        return SecurePreferences.encode(generator.generateKey().getEncoded());
+    }
+
+    private static String encrypt(String cleartext) {
+        if (cleartext == null || cleartext.length() == 0) {
+            return cleartext;
+        }
+        try {
+            final Cipher cipher = Cipher.getInstance("AES");
+            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(SecurePreferences.sKey, "AES"));
+            return SecurePreferences.encode(cipher.doFinal(cleartext.getBytes("UTF-8")));
+        } catch (Exception e) {
+            Log.w(SecurePreferences.class.getName(), "encrypt", e);
+            return null;
+        }
+    }
+
+    private static String decrypt(String ciphertext) {
+        if (ciphertext == null || ciphertext.length() == 0) {
+            return ciphertext;
+        }
+        try {
+            final Cipher cipher = Cipher.getInstance("AES");
+            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(SecurePreferences.sKey, "AES"));
+            return new String(cipher.doFinal(SecurePreferences.decode(ciphertext)), "UTF-8");
+        } catch (Exception e) {
+            analyticsReporter(getApplicationContext()).sendHandledException(TAG, "decrypt", e);
+            Log.w(TAG, "decrypt", e);
+            return null;
+        }
+    }
+
+    @Override
+    public Map<String, String> getAll() {
+        final Map<String, ?> encryptedMap = SecurePreferences.sFile.getAll();
+        final Map<String, String> decryptedMap = new HashMap<String, String>(encryptedMap.size());
+        for (Entry<String, ?> entry : encryptedMap.entrySet()) {
+            try {
+                decryptedMap.put(SecurePreferences.decrypt(entry.getKey()),
+                        SecurePreferences.decrypt(entry.getValue().toString())
+                );
+            } catch (Exception e) {
+                analyticsReporter.sendHandledException(TAG, "getAll", e);
+                // Ignore unencrypted key/value pairs
+            }
+        }
+        return decryptedMap;
+    }
+
+    @Override
+    public String getString(String key, String defaultValue) {
+        final String encryptedValue =
+                SecurePreferences.sFile.getString(SecurePreferences.encrypt(key), null);
+        return (encryptedValue != null) ? SecurePreferences.decrypt(encryptedValue) : defaultValue;
+    }
+
+    @Override
+    public Set<String> getStringSet(String key, Set<String> defaultValues) {
+        final Set<String> encryptedSet =
+                SecurePreferences.sFile.getStringSet(SecurePreferences.encrypt(key), null);
+        if (encryptedSet == null) {
+            return defaultValues;
+        }
+        final Set<String> decryptedSet = new HashSet<String>(encryptedSet.size());
+        for (String encryptedValue : encryptedSet) {
+            decryptedSet.add(SecurePreferences.decrypt(encryptedValue));
+        }
+        return decryptedSet;
+    }
+
+    @Override
+    public int getInt(String key, int defaultValue) {
+        final String encryptedValue =
+                SecurePreferences.sFile.getString(SecurePreferences.encrypt(key), null);
+        if (encryptedValue == null) {
+            return defaultValue;
+        }
+        try {
+            return Integer.parseInt(SecurePreferences.decrypt(encryptedValue));
+        } catch (NumberFormatException e) {
+            analyticsReporter.sendHandledException(TAG, "getInt", e);
+            throw new ClassCastException(e.getMessage());
+        }
+    }
+
+    @Override
+    public long getLong(String key, long defaultValue) {
+        final String encryptedValue =
+                SecurePreferences.sFile.getString(SecurePreferences.encrypt(key), null);
+        if (encryptedValue == null) {
+            return defaultValue;
+        }
+        try {
+            return Long.parseLong(SecurePreferences.decrypt(encryptedValue));
+        } catch (NumberFormatException e) {
+            analyticsReporter.sendHandledException(TAG, "getLong", e);
+            throw new ClassCastException(e.getMessage());
+        }
+    }
+
+    @Override
+    public float getFloat(String key, float defaultValue) {
+        final String encryptedValue =
+                SecurePreferences.sFile.getString(SecurePreferences.encrypt(key), null);
+        if (encryptedValue == null) {
+            return defaultValue;
+        }
+        try {
+            return Float.parseFloat(SecurePreferences.decrypt(encryptedValue));
+        } catch (NumberFormatException e) {
+            analyticsReporter.sendHandledException(TAG, "getFloat", e);
+            throw new ClassCastException(e.getMessage());
+        }
+    }
+
+    @Override
+    public boolean getBoolean(String key, boolean defaultValue) {
+        final String encryptedValue =
+                SecurePreferences.sFile.getString(SecurePreferences.encrypt(key), null);
+        if (encryptedValue == null) {
+            return defaultValue;
+        }
+        try {
+            return Boolean.parseBoolean(SecurePreferences.decrypt(encryptedValue));
+        } catch (NumberFormatException e) {
+            analyticsReporter.sendHandledException(TAG, "getBoolean", e);
+            throw new ClassCastException(e.getMessage());
+        }
+    }
+
+    @Override
+    public boolean contains(String key) {
+        return SecurePreferences.sFile.contains(SecurePreferences.encrypt(key));
+    }
+
+    @Override
+    public Editor edit() {
+        return new Editor();
+    }
+
+    /**
+     * Wrapper for Android's {@link SharedPreferences.Editor}.
+     * <p/>
+     * Used for modifying values in a {@link SecurePreferences} object. All changes
+     * you make in an
+     * editor are batched, and not copied back to the original {@link SecurePreferences}
+     * until you
+     * call {@link #commit()} or {@link #apply()}.
+     */
+    public static class Editor implements SharedPreferences.Editor {
+
+        private final SharedPreferences.Editor mEditor;
+
+        /**
+         * Constructor.
+         */
+        private Editor() {
+            mEditor = SecurePreferences.sFile.edit();
+        }
+
+        @Override
+        public SharedPreferences.Editor putString(String key, String value) {
+            mEditor.putString(SecurePreferences.encrypt(key), SecurePreferences.encrypt(value));
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor putStringSet(String key, Set<String> values) {
+            final Set<String> encryptedValues = new HashSet<String>(values.size());
+            for (String value : values) {
+                encryptedValues.add(SecurePreferences.encrypt(value));
+            }
+            mEditor.putStringSet(SecurePreferences.encrypt(key), encryptedValues);
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor putInt(String key, int value) {
+            mEditor.putString(SecurePreferences.encrypt(key),
+                    SecurePreferences.encrypt(Integer.toString(value))
+            );
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor putLong(String key, long value) {
+            mEditor.putString(SecurePreferences.encrypt(key),
+                    SecurePreferences.encrypt(Long.toString(value))
+            );
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor putFloat(String key, float value) {
+            mEditor.putString(SecurePreferences.encrypt(key),
+                    SecurePreferences.encrypt(Float.toString(value))
+            );
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor putBoolean(String key, boolean value) {
+            mEditor.putString(SecurePreferences.encrypt(key),
+                    SecurePreferences.encrypt(Boolean.toString(value))
+            );
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor remove(String key) {
+            mEditor.remove(SecurePreferences.encrypt(key));
+            return this;
+        }
+
+        @Override
+        public SharedPreferences.Editor clear() {
+            mEditor.clear();
+            return this;
+        }
+
+        @Override
+        public boolean commit() {
+            return mEditor.commit();
+        }
+
+        @Override
+        public void apply() {
+            mEditor.apply();
+        }
+    }
+
+    @Override
+    public void registerOnSharedPreferenceChangeListener(
+            OnSharedPreferenceChangeListener listener) {
+        SecurePreferences.sFile.registerOnSharedPreferenceChangeListener(listener);
+    }
+
+    @Override
+    public void unregisterOnSharedPreferenceChangeListener(
+            OnSharedPreferenceChangeListener listener) {
+        SecurePreferences.sFile.unregisterOnSharedPreferenceChangeListener(listener);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/LoginUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/LoginUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/LoginUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/LoginUtils.java	(date 1467729866000)
@@ -0,0 +1,123 @@
+package ibmmobileappbuilder.util;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.util.Log;
+
+import org.apache.http.HttpResponse;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+public class LoginUtils {
+
+    /**
+     * Last date the app was suspended
+     */
+    public static String SUSPENDED_DATE = "suspendedDate";
+
+    /**
+     * Session time (in minutes)
+     */
+    public static String EXPIRATION_TIME = "expirationTime";
+
+    /**
+     * Last user who successfuly logged in
+     */
+    public static String LAST_USER = "lastUser";
+
+    /**
+     * Data-Securitization Token
+     */
+    public static String TOKEN = "token";
+
+    public static long NEVER_EXPIRES = 0;
+
+    public static long SESSION_EXPIRED = -1;
+
+    /**
+     * Check if the user is still logged in, and redirect to login activity if needed
+     *
+     * @param mSharedPreferences a SecurePreferences instance for storing and reading the info
+     * @param loginActivity      the login activity class
+     * @param activity           the current activity
+     */
+    public static void checkLoggedStatus(SecurePreferences mSharedPreferences, Class loginActivity,
+                                         Activity activity) {
+
+        Long suspendedDate = mSharedPreferences.getLong(SUSPENDED_DATE, 0);
+        Long currentDate = System.currentTimeMillis();
+        Long mins = (currentDate - suspendedDate) / (1000 * 60);
+
+        Long expirationTime = mSharedPreferences.getLong(EXPIRATION_TIME, SESSION_EXPIRED);
+
+        // check whether session has expired or not
+        if (expirationTime != NEVER_EXPIRES && mins >= expirationTime) {
+
+            Intent goToLogin = new Intent(activity, loginActivity);
+            goToLogin.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK
+                            | Intent.FLAG_ACTIVITY_NO_HISTORY
+            );
+
+            activity.startActivity(goToLogin);
+            activity.finish();
+        }
+    }
+
+    public static void storeLastActiveStatus(SecurePreferences mSharedPreferences) {
+        mSharedPreferences.edit().putLong(SUSPENDED_DATE, System.currentTimeMillis()).commit();
+    }
+
+    public static void logOut(SecurePreferences mSharedPreferences, Class loginActivity,
+                              Activity activity) {
+        mSharedPreferences.edit().putLong(EXPIRATION_TIME, SESSION_EXPIRED).commit();
+        Intent goToLogin = new Intent(activity, loginActivity);
+        goToLogin.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK
+                        | Intent.FLAG_ACTIVITY_NO_HISTORY
+        );
+        activity.startActivity(goToLogin);
+        activity.finish();
+    }
+
+    public static String getResponseString(HttpResponse response) {
+        BufferedReader reader;
+        String res = null;
+
+        try {
+            reader = new BufferedReader(
+                    new InputStreamReader(response.getEntity().getContent(), "UTF-8")
+            );
+            res = reader.readLine();
+        } catch (IOException e) {
+            logException(e);
+        }
+
+        return res;
+    }
+
+    public static JSONObject parseJSON(String responseString) {
+
+        JSONObject json = null;
+        try {
+            json = new JSONObject(responseString);
+        } catch (JSONException e) {
+            logException(e);
+        }
+        return json;
+    }
+
+    private static void logException(Exception e) {
+        analyticsReporter(getApplicationContext()).sendHandledException(
+                "LoginUtils",
+                "getResponseString",
+                e
+        );
+        Log.e("getResponseString", e.getMessage());
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MapUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MapUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MapUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/MapUtils.java	(date 1467729866000)
@@ -0,0 +1,13 @@
+package ibmmobileappbuilder.util;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class MapUtils {
+
+    public static <KEY, VALUE> Map<KEY, VALUE> singleEntryMap(KEY key, VALUE value) {
+        Map<KEY, VALUE> map = new HashMap<>(1);
+        map.put(key, value);
+        return map;
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/DepthPageTransformer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/DepthPageTransformer.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/DepthPageTransformer.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/DepthPageTransformer.java	(date 1467729866000)
@@ -0,0 +1,42 @@
+package ibmmobileappbuilder.util;
+
+import android.support.v4.view.ViewPager;
+import android.view.View;
+
+public class DepthPageTransformer implements ViewPager.PageTransformer {
+
+    private static final float MIN_SCALE = 0.75f;
+
+    public void transformPage(View view, float position) {
+        int pageWidth = view.getWidth();
+
+        if (position < -1) { // [-Infinity,-1)
+            // This page is way off-screen to the left.
+            view.setAlpha(0);
+
+        } else if (position <= 0) { // [-1,0]
+            // Use the default slide transition when moving to the left page
+            view.setAlpha(1);
+            view.setTranslationX(0);
+            view.setScaleX(1);
+            view.setScaleY(1);
+
+        } else if (position <= 1) { // (0,1]
+            // Fade the page out.
+            view.setAlpha(1 - position);
+
+            // Counteract the default slide transition
+            view.setTranslationX(pageWidth * -position);
+
+            // Scale the page down (between MIN_SCALE and 1)
+            float scaleFactor = MIN_SCALE
+                    + (1 - MIN_SCALE) * (1 - Math.abs(position));
+            view.setScaleX(scaleFactor);
+            view.setScaleY(scaleFactor);
+
+        } else { // (1,+Infinity]
+            // This page is way off-screen to the right.
+            view.setAlpha(0);
+        }
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringLabelFormat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringLabelFormat.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringLabelFormat.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/StringLabelFormat.java	(date 1467729866000)
@@ -0,0 +1,50 @@
+package ibmmobileappbuilder.util;
+
+import java.text.FieldPosition;
+import java.text.Format;
+import java.text.ParsePosition;
+import java.util.List;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Format class used to control the X-Axis labels in charts
+ */
+public class StringLabelFormat extends Format {
+
+    public List<String> labels;
+
+    public StringLabelFormat(List<String> xValues) {
+        labels = xValues;
+    }
+
+    @Override
+    public StringBuffer format(Object object, StringBuffer buffer, FieldPosition field) {
+        int parsedInt = Math.round(Float.parseFloat(object.toString()));
+        String labelString = "";
+        try {
+            labelString = labels.get(parsedInt);
+        } catch (IndexOutOfBoundsException e) {
+            // do nothing
+            analyticsReporter(getApplicationContext()).sendHandledException(
+                    "StringLabelFormat",
+                    "format",
+                    e
+            );
+        }
+        //string length max = 9
+        if (labelString.length() > 9) {
+            labelString = labelString.substring(0, 6) + "...";
+        }
+
+        buffer.append(labelString);
+        return buffer;
+    }
+
+    @Override
+    public Object parseObject(String string, ParsePosition position) {
+        return labels.indexOf(string);
+    }
+
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FragmentUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FragmentUtils.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FragmentUtils.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/FragmentUtils.java	(date 1467729866000)
@@ -0,0 +1,37 @@
+package ibmmobileappbuilder.util;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+
+import java.lang.reflect.Method;
+
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Utils for fragment instantiation
+ */
+public class FragmentUtils {
+    private static final String TAG = FragmentUtils.class.getSimpleName();
+
+    // fragment instantiation
+    public static Fragment instantiate(Class<? extends Fragment> clazz, Bundle defaults) {
+        try {
+            Method method = clazz.getMethod("newInstance", Bundle.class);
+            return (Fragment) method.invoke(null, defaults);
+        } catch (Exception e) {
+            analyticsReporter(getApplicationContext()).sendHandledException(
+                    "FragmentUtils",
+                    "Exception instantiating the fragment [" + clazz.getName() + "]",
+                    e
+            );
+            Log.d(TAG, "Exception instantiating the fragment [" + clazz.getName() + "]");
+            throw new IllegalArgumentException("Couldn't instantie fragment: + clazz.getName()", e);
+        }
+    }
+
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoaderRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoaderRequest.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoaderRequest.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoaderRequest.java	(date 1467729866000)
@@ -0,0 +1,121 @@
+package ibmmobileappbuilder.util.image;
+
+import android.net.Uri;
+import android.support.annotation.AnyRes;
+import android.widget.ImageView;
+
+import ibmmobileappbuilder.core.R;
+
+public class ImageLoaderRequest {
+
+    private final String path;
+    private final Uri uri;
+    private @AnyRes final int resourceToLoad;
+    private @AnyRes final int placeholder;
+    private @AnyRes final int error;
+    private final boolean fit;
+    private final boolean debug;
+    private final ImageView targetView;
+
+    private ImageLoaderRequest(Builder builder) {
+        this.path = builder.path;
+        this.uri = builder.uri;
+        this.placeholder = builder.placeholder;
+        this.error = builder.error;
+        this.fit = builder.fit;
+        this.debug = builder.debug;
+        this.targetView = builder.targetView;
+        this.resourceToLoad = builder.resourceToLoad;
+    }
+
+    public String getPath() {
+        return path;
+    }
+
+    public Uri getUri() {
+        return uri;
+    }
+
+    public @AnyRes int getResourceToLoad() {
+        return resourceToLoad;
+    }
+
+    public int getPlaceholder() {
+        return placeholder;
+    }
+
+    public int getError() {
+        return error;
+    }
+
+    public boolean shouldFit() {
+        return fit;
+    }
+
+    public boolean isDebugging() {
+        return debug;
+    }
+
+    public ImageView getTargetView() {
+        return targetView;
+    }
+
+    public static class Builder {
+        private String path;
+        private Uri uri;
+        private int placeholder = R.color.ima_il_placeholder;
+        private int error = R.drawable.ima_il_error;
+        private boolean fit;
+        private boolean debug;
+        private ImageView targetView;
+        private int resourceToLoad;
+
+        public static Builder imageLoaderRequest() {
+            return new Builder();
+        }
+
+        public Builder withPath(String path) {
+            this.path = path;
+            return this;
+        }
+
+        public Builder withUri(Uri uri) {
+            this.uri = uri;
+            return this;
+        }
+
+        public Builder withPlaceholder(@AnyRes int placeholder) {
+            this.placeholder = placeholder;
+            return this;
+        }
+
+        public Builder withError(@AnyRes int error) {
+            this.error = error;
+            return this;
+        }
+
+        public Builder fit() {
+            this.fit = true;
+            return this;
+        }
+
+        public Builder debugging() {
+            debug = true;
+            return this;
+        }
+
+        public Builder withTargetView(ImageView targetView) {
+            this.targetView = targetView;
+            return this;
+        }
+
+        public Builder withResourceToLoad(@AnyRes int resourceToLoad) {
+            this.resourceToLoad = resourceToLoad;
+            return this;
+        }
+
+        public ImageLoaderRequest build() {
+            return new ImageLoaderRequest(this);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/BitmapUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/BitmapUtil.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/BitmapUtil.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/BitmapUtil.java	(date 1467729866000)
@@ -0,0 +1,64 @@
+package ibmmobileappbuilder.util.image;
+
+import android.annotation.TargetApi;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.Cursor;
+import android.graphics.Bitmap;
+import android.graphics.Matrix;
+import android.net.Uri;
+import android.os.Build;
+import android.provider.DocumentsContract;
+import android.provider.MediaStore;
+import android.util.Log;
+
+public class BitmapUtil {
+
+    private static final String[] CONTENT_ORIENTATION = new String[]{MediaStore.Images.ImageColumns.ORIENTATION};
+
+    public static Bitmap rotateBitmap(Bitmap bitmap, int degrees) {
+        Matrix matrix = new Matrix();
+        matrix.postRotate(degrees);
+        Bitmap rotated = Bitmap.createBitmap(bitmap,
+                0,
+                0,
+                bitmap.getWidth(),
+                bitmap.getHeight(),
+                matrix,
+                true
+        );
+        if (bitmap != rotated) {
+            Log.wtf("DMV", "Bitmpa rotated");
+            bitmap.recycle();
+        } else {
+            Log.wtf("DMV", "Bitmap NOT rotated");
+        }
+        return rotated;
+    }
+
+    @TargetApi(Build.VERSION_CODES.KITKAT)
+    public static int getExifOrientation(Context context, Uri uri) {
+        ContentResolver contentResolver = context.getContentResolver();
+        Cursor cursor = null;
+        try {
+            String id = DocumentsContract.getDocumentId(uri);
+            id = id.split(":")[1];
+            cursor = contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
+                    CONTENT_ORIENTATION,
+                    MediaStore.Images.Media._ID + " = ?",
+                    new String[]{id},
+                    null
+            );
+            if (cursor == null || !cursor.moveToFirst()) {
+                return 0;
+            }
+            return cursor.getInt(0);
+        } catch (RuntimeException ignored) {         // If the orientation column doesn't exist, assume no rotation.
+            return 0;
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoader.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoader.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/ImageLoader.java	(date 1467729866000)
@@ -0,0 +1,6 @@
+package ibmmobileappbuilder.util.image;
+
+public interface ImageLoader {
+
+    void load(ImageLoaderRequest request);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/PicassoImageLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/PicassoImageLoader.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/PicassoImageLoader.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/PicassoImageLoader.java	(date 1467729866000)
@@ -0,0 +1,51 @@
+package ibmmobileappbuilder.util.image;
+
+import android.content.Context;
+import android.net.Uri;
+import android.util.Log;
+
+import com.squareup.picasso.Picasso;
+import com.squareup.picasso.RequestCreator;
+
+import ibmmobileappbuilder.util.image.transformations.PicassoExifDocumentTransformation;
+
+public class PicassoImageLoader implements ImageLoader {
+
+    private static final String TAG = PicassoImageLoader.class.getSimpleName();
+    private final Picasso picasso;
+    private final Context context;
+
+    public PicassoImageLoader(Context context) {
+        this.context = context;
+        this.picasso = Picasso.with(context);
+    }
+
+    @Override
+    public void load(ImageLoaderRequest request) {
+        picasso.setIndicatorsEnabled(request.isDebugging());
+        RequestCreator requestCreator;
+        Uri requestUri = request.getUri();
+        if (request.getPath() != null) {
+            requestCreator = picasso.load(request.getPath());
+        } else if (requestUri != null) {
+            requestCreator = picasso
+                    .load(requestUri)
+                    .transform(new PicassoExifDocumentTransformation(context, requestUri));
+        } else if (request.getResourceToLoad() != 0) {
+            requestCreator = picasso.load(request.getResourceToLoad());
+        } else {
+            requestCreator = picasso.load((String) null);
+            Log.w(TAG, "Attempted to load image without a valid source.");
+        }
+
+        if (request.shouldFit()) {
+            requestCreator.centerInside();
+            requestCreator.fit();
+        }
+
+        requestCreator
+                .placeholder(request.getPlaceholder())
+                .error(request.getError())
+                .into(request.getTargetView());
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/transformations/PicassoExifDocumentTransformation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/transformations/PicassoExifDocumentTransformation.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/transformations/PicassoExifDocumentTransformation.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/util/image/transformations/PicassoExifDocumentTransformation.java	(date 1467729866000)
@@ -0,0 +1,46 @@
+package ibmmobileappbuilder.util.image.transformations;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Build;
+import android.provider.DocumentsContract;
+
+import com.squareup.picasso.Transformation;
+
+import ibmmobileappbuilder.util.image.BitmapUtil;
+
+public class PicassoExifDocumentTransformation implements Transformation {
+    final Context context;
+    final Uri uri;
+
+    public PicassoExifDocumentTransformation(Context context, Uri uri) {
+        this.context = context;
+        this.uri = uri;
+    }
+
+    @Override
+    public Bitmap transform(Bitmap source) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
+            return source;
+        }
+        if (!DocumentsContract.isDocumentUri(context, uri)) {
+            return source;
+        }
+        int exifRotation = BitmapUtil.getExifOrientation(context, uri);
+        if (exifRotation != 0) {
+            return BitmapUtil.rotateBitmap(source, exifRotation);
+        }
+        return source;
+    }
+
+    @Override
+    public String key() {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT ||
+                !DocumentsContract.isDocumentUri(context, uri)) {
+            return "documentTransform()";
+        }
+        return "documentExifTransform(" + DocumentsContract.getDocumentId(uri) + ")";
+    }
+
+}
\ No newline at end of file
Index: TravelAnalyser11/app/src/main/res/menu/drawer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/menu/drawer.xml b/TravelAnalyser11/app/src/main/res/menu/drawer.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/menu/drawer.xml	(date 1475330010000)
@@ -0,0 +1,9 @@
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+  <group android:checkableBehavior="single">
+          <item android:id="@+id/entry0" android:title="Travel Destination"/>
+        <item android:id="@+id/entry1" android:title="suggested clothing"/>
+  </group>
+</menu>
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ImagePicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ImagePicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ImagePicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ImagePicker.java	(date 1467729866000)
@@ -0,0 +1,277 @@
+package ibmmobileappbuilder.views;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.provider.MediaStore;
+import android.support.annotation.NonNull;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.UUID;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.dialogs.ImagePickerOptionsDialog;
+import ibmmobileappbuilder.util.image.ImageLoader;
+import ibmmobileappbuilder.util.image.PicassoImageLoader;
+
+import static android.os.Environment.DIRECTORY_PICTURES;
+import static android.os.Environment.getExternalStoragePublicDirectory;
+import static ibmmobileappbuilder.util.image.ImageLoaderRequest.Builder.imageLoaderRequest;
+
+public class ImagePicker extends LinearLayout implements View.OnClickListener, ImagePickerOptionsDialog.OnOptionSelectedListener {
+    public static final int GALLERY_REQUEST_CODE = 1024;
+    public static final int CAPTURE_REQUEST_CODE = 2048;
+    public static final String FILE_PICKER_TAG = "FilePicker";
+    private static final String SUFFIX_JPG = ".jpg";
+
+    private final ImageLoader imageLoader;
+
+    private final TextView errorView;
+    private final ImageView imageView;
+    private ImagePickerOptionsDialog imagePickerDialog;
+    private final FragmentManager fragmentManager;
+    private Fragment fragment;
+    private final int index;
+    private boolean hasImage;
+    private Callback callback;
+    private File imageFile;
+
+    public ImagePicker(Context context) {
+        this(context, null);
+    }
+
+    public ImagePicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        imageLoader = new PicassoImageLoader(context);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                R.styleable.ImagePicker, 0, 0
+        );
+        String label = a.getString(R.styleable.ImagePicker_label);
+
+        index = a.getInt(R.styleable.ImagePicker_index, 0);
+
+        a.recycle();
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.file_picker, this, true);
+
+        errorView = (TextView) findViewById(R.id.error);
+        TextView labelView = (TextView) findViewById(R.id.label);
+        labelView.setText(label);
+
+        imageView = (ImageView) findViewById(R.id.image);
+
+        labelView.setOnClickListener(this);
+        imageView.setOnClickListener(this);
+
+        // Try to restore previous suspended fragment
+        fragmentManager = ((FragmentActivity) getContext()).getSupportFragmentManager();
+        imagePickerDialog = (ImagePickerOptionsDialog) fragmentManager.findFragmentByTag(
+                FILE_PICKER_TAG
+        );
+        if (imagePickerDialog == null) {
+            imagePickerDialog = new ImagePickerOptionsDialog();
+        }
+    }
+
+    public void setImageBitmap(Bitmap bm) {
+        hasImage = true;
+        this.imageView.setImageBitmap(bm);
+    }
+
+    public void setImageUrl(@NonNull String url) {
+        hasImage = true;
+        imageLoader.load(imageLoaderRequest().withPath(url).withTargetView(imageView).fit().build());
+    }
+
+    public void setImageUri(@NonNull Uri uri) {
+        hasImage = true;
+        imageLoader.load(imageLoaderRequest().withUri(uri).withTargetView(imageView).fit().build());
+    }
+
+    public void setTargetFragment(Fragment fr) {
+        fragment = fr;
+    }
+
+    public File getImageFile() {
+        return imageFile;
+    }
+
+    public void clear() {
+        hasImage = false;
+        imageLoader.load(imageLoaderRequest()
+                        .withResourceToLoad(R.drawable.ic_image_photo)
+                        .withTargetView(imageView)
+                        .build()
+        );
+    }
+
+    @Override
+    public void onClick(View v) {
+        if (hasImage) {
+            imagePickerDialog.setRemoveEnabled(true);
+        }
+        imagePickerDialog.setListener(this);
+        imagePickerDialog.show(fragmentManager, FILE_PICKER_TAG);
+    }
+
+    @Override
+    public void fromStorage() {
+        // Choose from folder
+        Intent fileIntent = new Intent(Intent.ACTION_GET_CONTENT);
+        fileIntent.setType("image/*");
+
+        // picked image will be received in the container fragment
+        fragment.startActivityForResult(
+                Intent.createChooser(fileIntent, null),
+                GALLERY_REQUEST_CODE + index
+        );
+    }
+
+    @Override
+    public void fromCamera() {
+        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+        cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(createImageFile()));
+        // picked image will be received in the container fragment
+        fragment.startActivityForResult(
+                Intent.createChooser(cameraIntent, null),
+                CAPTURE_REQUEST_CODE + index
+        );
+    }
+
+    private File createImageFile() {
+        if (imageFile == null) {
+            String imageFileName = "BU_" + UUID.randomUUID();
+            File storageDir = getExternalStoragePublicDirectory(DIRECTORY_PICTURES);
+            try {
+                imageFile = File.createTempFile(imageFileName, SUFFIX_JPG, storageDir);
+            } catch (IOException e) {
+                throw new RuntimeException("Could not create image");
+            }
+        }
+
+        return imageFile;
+    }
+
+    @Override
+    public void remove() {
+        if (callback != null) {
+            callback.imageRemoved();
+        }
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Parcelable parcelable = super.onSaveInstanceState();
+        return new ImagePickerSavedState(parcelable, imageFile);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        ImagePickerSavedState savedState = (ImagePickerSavedState) state;
+        super.onRestoreInstanceState(savedState.getSuperState());
+        imageFile = savedState.getImageFile();
+    }
+
+    public void setCallback(Callback callback) {
+        this.callback = callback;
+    }
+
+    public Callback getCallback() {
+        return callback;
+    }
+
+    public void setError(int errorRes) {
+        setError(getContext().getString(errorRes));
+    }
+
+    public void setError(CharSequence errorMsg) {
+        if (errorMsg != null) {
+            if (errorView.getVisibility() == GONE) {
+                errorView.setText(errorMsg);
+                errorView.setAlpha(0.0F);
+                errorView.setVisibility(VISIBLE);
+                errorView.animate()
+                        .alpha(1.0F)
+                        .setDuration(200L)
+                        .setInterpolator(new FastOutSlowInInterpolator())
+                        .setListener(null).start();
+            }
+        } else {
+            errorView.animate()
+                    .alpha(0.0F)
+                    .setDuration(200L)
+                    .setInterpolator(new FastOutSlowInInterpolator())
+                    .setListener(new AnimatorListenerAdapter() {
+                                     @Override
+                                     public void onAnimationEnd(Animator animation) {
+                                         errorView.setText(null);
+                                         errorView.setVisibility(GONE);
+                                     }
+                                 }
+                    );
+        }
+    }
+
+    public interface Callback {
+        void imageRemoved();
+    }
+
+    static class ImagePickerSavedState extends BaseSavedState {
+        private final File mImageFile;
+
+        public ImagePickerSavedState(Parcelable parcelable, File imageFile) {
+            super(parcelable);
+            this.mImageFile = imageFile;
+        }
+
+        private ImagePickerSavedState(Parcel in) {
+            super(in);
+            mImageFile = (File) in.readSerializable();
+        }
+
+        public File getImageFile() {
+            return mImageFile;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            super.writeToParcel(dest, flags);
+            dest.writeSerializable(mImageFile);
+        }
+
+        //required field that makes Parcelables from a Parcel
+        public static final Parcelable.Creator<ImagePickerSavedState> CREATOR =
+                new Parcelable.Creator<ImagePickerSavedState>() {
+                    public ImagePickerSavedState createFromParcel(Parcel in) {
+                        return new ImagePickerSavedState(in);
+                    }
+
+                    public ImagePickerSavedState[] newArray(int size) {
+                        return new ImagePickerSavedState[size];
+                    }
+                };
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DatePicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DatePicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DatePicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DatePicker.java	(date 1467729866000)
@@ -0,0 +1,207 @@
+package ibmmobileappbuilder.views;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.content.Context;
+
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.doomonafireball.betterpickers.calendardatepicker.CalendarDatePickerDialog;
+
+import java.text.DateFormat;
+import java.util.Calendar;
+import java.util.Date;
+
+import ibmmobileappbuilder.core.R;
+
+public class DatePicker extends LinearLayout {
+
+    TextView mLabelView;
+    TextView mValueView;
+    ImageButton mReset;
+    private DateSelectedListener mListener;
+    private Date mDate;
+    private final TextView mErrorView;
+
+    public DatePicker(Context context) {
+        this(context, null);
+    }
+
+    public DatePicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                R.styleable.ListSelectionPicker, 0, 0);
+        String label = a.getString(R.styleable.ListSelectionPicker_label);
+
+        a.recycle();
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.date_picker, this, true);
+
+        mLabelView = (TextView) getChildAt(0);
+        mLabelView.setText(label);
+
+        mValueView = (TextView) findViewById(R.id.dateValue);
+        mReset = (ImageButton) findViewById(R.id.dateReset);
+        mReset.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                setDate(null);
+                if(getListener() != null)
+                    getListener().onSelected(null);
+            }
+        });
+
+        mErrorView = (TextView) findViewById(R.id.errorView);
+
+        mValueView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Calendar cal = Calendar.getInstance();
+                if(mDate != null)
+                    cal.setTime(mDate);
+
+                // Try to restore previous suspended fragment
+                FragmentManager fm = ((FragmentActivity) getContext()).getSupportFragmentManager();
+                CalendarDatePickerDialog calendarDatePickerDialog = (CalendarDatePickerDialog) fm.findFragmentByTag("DatePicker");
+
+                if(calendarDatePickerDialog == null) {
+                    calendarDatePickerDialog = CalendarDatePickerDialog.newInstance(dateCallback,
+                            cal.get(Calendar.YEAR),
+                            cal.get(Calendar.MONTH),
+                            cal.get(Calendar.DAY_OF_MONTH)
+                    );
+                }
+                else
+                    calendarDatePickerDialog.setOnDateSetListener(dateCallback);
+
+                calendarDatePickerDialog.show(fm, "DatePicker");
+            }
+        });
+    }
+
+    private void setDateText(Date date) {
+        mValueView.setText(date != null ? DateFormat.getDateInstance().format(date) : null);
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Bundle bundle = new Bundle();
+        bundle.putParcelable("instanceState", super.onSaveInstanceState());
+
+        if (mDate != null) {
+            bundle.putLong("theDate", mDate.getTime());
+        }
+
+        return bundle;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state instanceof Bundle) {
+            Bundle b = (Bundle) state;
+            long dateVal = b.getLong("theDate", -1);
+
+            if (dateVal != -1) {
+                setDate(new Date(dateVal));
+            }
+
+            state = ((Bundle) state).getParcelable("instanceState");
+        }
+
+        super.onRestoreInstanceState(state);
+    }
+
+    public void setDate(Date date){
+        this.mDate = date;
+        setDateText(date);
+    }
+
+    public Date getDate(){
+        return mDate;
+    }
+
+    public void setListener(DateSelectedListener listener){
+        this.mListener = listener;
+    }
+
+    public DateSelectedListener getListener(){
+        return mListener;
+    }
+
+    public void setError(int errorRes){
+        setError(getContext().getString(errorRes));
+    }
+
+    public void setError(CharSequence errorMsg){
+        if(errorMsg != null) {
+            if (mErrorView.getVisibility() == GONE) {
+                mErrorView.setText(errorMsg);
+                mErrorView.setAlpha(0.0F);
+                mErrorView.setVisibility(VISIBLE);
+                mErrorView.animate()
+                        .alpha(1.0F)
+                        .setDuration(200L)
+                        .setInterpolator(new FastOutSlowInInterpolator())
+                        .setListener(null).start();
+            }
+        }
+        else {
+            mErrorView.animate()
+                    .alpha(0.0F)
+                    .setDuration(200L)
+                    .setInterpolator(new FastOutSlowInInterpolator())
+                    .setListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            mErrorView.setText((CharSequence) null);
+                            mErrorView.setVisibility(GONE);
+                        }
+                    });
+        }
+    }
+
+    CalendarDatePickerDialog.OnDateSetListener dateCallback = new CalendarDatePickerDialog.OnDateSetListener() {
+        @Override
+        public void onDateSet(
+                CalendarDatePickerDialog calendarDatePickerDialog,
+                int year,
+                int month,
+                int day) {
+
+            Calendar cal = Calendar.getInstance();
+            cal.set(year, month, day, 0, 0, 0);
+
+            mDate = cal.getTime();
+            setDateText(mDate);
+
+            if (getListener() != null) {
+                getListener().onSelected(cal.getTime());
+            }
+        }
+    };
+
+    public interface DateSelectedListener {
+        /**
+         * callback for listeners. Dates can be null
+         */
+        public void onSelected(Date selected);
+    }
+}
Index: TravelAnalyser11/app/src/main/res/layout/traveldestinationscreen1_custom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/layout/traveldestinationscreen1_custom.xml b/TravelAnalyser11/app/src/main/res/layout/traveldestinationscreen1_custom.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/layout/traveldestinationscreen1_custom.xml	(date 1475330010000)
@@ -0,0 +1,65 @@
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+>
+    <LinearLayout
+        android:id="@+id/progressContainer"
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"
+        android:gravity="center"
+    >
+        <ProgressBar
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+        >
+        </ProgressBar>
+    </LinearLayout>
+    <FrameLayout
+        android:id="@+id/contentContainer"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+    >
+        <ScrollView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:padding="@dimen/activity_margin"
+            android:clipToPadding="false"
+            android:scrollbarStyle="outsideOverlay"
+        >
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="@dimen/card_margin_top"
+                android:paddingBottom="@dimen/card_margin_bottom"
+                android:paddingLeft="@dimen/card_margin_horizontal"
+                android:paddingRight="@dimen/card_margin_horizontal"
+            >
+                <TextView
+                    android:id="@+id/view0"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/view_margin_vertical"
+                    android:paddingBottom="@dimen/view_margin_vertical"
+                    style="@style/TravelDestinationScreen1_view0"
+                >
+                </TextView>
+                <TextView
+                    android:id="@+id/view1"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/view_margin_vertical"
+                    android:paddingBottom="@dimen/view_margin_vertical"
+                    style="@style/TravelDestinationScreen1_view1"
+                >
+                </TextView>
+            </LinearLayout>
+        </ScrollView>
+    </FrameLayout>
+</FrameLayout>
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateRangePicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateRangePicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateRangePicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateRangePicker.java	(date 1467729866000)
@@ -0,0 +1,255 @@
+package ibmmobileappbuilder.views;
+
+import com.doomonafireball.betterpickers.calendardatepicker.CalendarDatePickerDialog;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.text.format.DateFormat;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import java.util.Calendar;
+import java.util.Date;
+
+import ibmmobileappbuilder.core.R;
+
+public class DateRangePicker extends LinearLayout {
+
+    TextView mLabelView;
+
+    TextView mMinDateView;
+    Date mMinDate;
+
+    TextView mMaxDateView;
+    Date mMaxDate;
+
+    DateRangeSelectedListener mListener;
+    private TextView mErrorView;
+
+    public DateRangePicker(Context context) {
+        this(context, null);
+    }
+
+    public DateRangePicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                R.styleable.DateRangePicker, 0, 0
+        );
+        String label = a.getString(R.styleable.DateRangePicker_label);
+
+        a.recycle();
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.daterange_picker, this, true);
+
+        mLabelView = (TextView) getChildAt(0);
+
+        mLabelView.setText(label);
+
+        mErrorView = (TextView) findViewById(R.id.errorView);
+
+        mMinDateView = (TextView) findViewById(R.id.min_value);
+        mMaxDateView = (TextView) findViewById(R.id.max_value);
+
+        setPicker(mMinDateView, true);
+        setPicker(mMaxDateView, false);
+    }
+
+    public void setLabel(String label) {
+        mLabelView.setText(label);
+    }
+
+    public DateRangePicker setMinDate(Date date) {
+        this.mMinDate = date;
+        setDateText(mMinDateView, date, true);
+
+        return this;
+    }
+
+    public DateRangePicker setMaxDate(Date date) {
+        this.mMaxDate = date;
+        setDateText(mMaxDateView, date, false);
+
+        return this;
+    }
+
+    public DateRangePicker setRangeSelectedListener(DateRangeSelectedListener listener) {
+        this.mListener = listener;
+
+        return this;
+    }
+
+    public DateRangeSelectedListener getListener() {
+        return mListener;
+    }
+
+    private void setDateText(TextView view, Date date, boolean min) {
+        view.setText(date != null ?
+                        String.format(getResources().getString(
+                                        min ? R.string.datemin_filter_format : R.string.datemax_filter_format
+                                ),
+                                DateFormat.getMediumDateFormat(getContext()).format(date)
+                        )
+                        : null
+        );
+    }
+
+    private void setPicker(final TextView view, final boolean isMin) {
+
+        view.setOnClickListener(new OnClickListener() {
+                                    @Override
+                                    public void onClick(View v) {
+                                        int year, month, day;
+                                        Calendar cal = Calendar.getInstance();
+
+                                        if (isMin && mMinDate != null) {
+                                            cal.setTime(mMinDate);
+                                        } else if (!isMin && mMaxDate != null) {
+                                            cal.setTime(mMaxDate);
+                                        }
+
+                                        FragmentManager fm = ((FragmentActivity) getContext()).getSupportFragmentManager();
+                                        CalendarDatePickerDialog calendarDatePickerDialog = (CalendarDatePickerDialog) fm.findFragmentByTag(
+                                                "DatePicker"
+                                        );
+
+                                        CalendarDatePickerDialog.OnDateSetListener callback = new CalendarDatePickerDialog.OnDateSetListener() {
+                                            @Override
+                                            public void onDateSet(
+                                                    CalendarDatePickerDialog calendarDatePickerDialog,
+                                                    int year,
+                                                    int month,
+                                                    int day) {
+
+                                                Calendar cal = Calendar.getInstance();
+                                                cal.set(year, month, day, 0, 0, 0);
+
+                                                // set dates
+                                                if (isMin) {
+                                                    mMinDate = cal.getTime();
+                                                } else {
+                                                    mMaxDate = cal.getTime();
+                                                }
+
+                                                setDateText(view, cal.getTime(), isMin);
+
+                                                if (getListener() != null) {
+                                                    getListener().onRangeSelected(mMinDate,
+                                                            mMaxDate
+                                                    );
+                                                }
+                                            }
+                                        };
+                                        if (calendarDatePickerDialog == null) {
+                                            calendarDatePickerDialog = CalendarDatePickerDialog.newInstance(
+                                                    callback,
+                                                    cal.get(Calendar.YEAR),
+                                                    cal.get(Calendar.MONTH),
+                                                    cal.get(Calendar.DAY_OF_MONTH)
+                                            );
+                                        } else {
+                                            calendarDatePickerDialog.setOnDateSetListener(callback);
+                                        }
+
+                                        calendarDatePickerDialog.show(fm, "DatePicker");
+                                    }
+                                }
+        );
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Bundle bundle = new Bundle();
+        bundle.putParcelable("instanceState", super.onSaveInstanceState());
+
+        if (mMinDate != null) {
+            bundle.putLong("rangeMin", mMinDate.getTime());
+        }
+
+        if (mMaxDate != null) {
+            bundle.putLong("rangeMax", mMaxDate.getTime());
+        }
+
+        return bundle;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state instanceof Bundle) {
+            Bundle b = (Bundle) state;
+            long minVal = b.getLong("rangeMin", -1);
+            long maxVal = b.getLong("rangeMax", -1);
+
+            if (minVal != -1) {
+                this.mMinDate = new Date(minVal);
+            }
+
+            if (maxVal != -1) {
+                this.mMaxDate = new Date(maxVal);
+            }
+
+            state = ((Bundle) state).getParcelable("instanceState");
+        }
+
+        super.onRestoreInstanceState(state);
+    }
+
+    public void setError(int errorRes) {
+        setError(getContext().getString(errorRes));
+    }
+
+    public void setError(CharSequence errorMsg) {
+        if (errorMsg != null) {
+            if (mErrorView.getVisibility() == GONE) {
+                mErrorView.setText(errorMsg);
+                mErrorView.setAlpha(0.0F);
+                mErrorView.setVisibility(VISIBLE);
+                mErrorView.animate()
+                        .alpha(1.0F)
+                        .setDuration(200L)
+                        .setInterpolator(new FastOutSlowInInterpolator())
+                        .setListener(null).start();
+            }
+        } else {
+            mErrorView.animate()
+                    .alpha(0.0F)
+                    .setDuration(200L)
+                    .setInterpolator(new FastOutSlowInInterpolator())
+                    .setListener(new AnimatorListenerAdapter() {
+                                     @Override
+                                     public void onAnimationEnd(Animator animation) {
+                                         mErrorView.setText((CharSequence) null);
+                                         mErrorView.setVisibility(GONE);
+                                     }
+                                 }
+                    );
+        }
+    }
+
+    public interface DateRangeSelectedListener {
+
+        /**
+         * callback for listeners. Dates can be null
+         *
+         * @param dateMin the minimun date selected. Can be null
+         * @param dateMax the maximum date selected. Can be null
+         */
+        void onRangeSelected(Date dateMin, Date dateMax);
+    }
+
+}
Index: TravelAnalyser11/app/src/main/res/layout/suggestedclothing_custom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/layout/suggestedclothing_custom.xml b/TravelAnalyser11/app/src/main/res/layout/suggestedclothing_custom.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/layout/suggestedclothing_custom.xml	(date 1475330010000)
@@ -0,0 +1,74 @@
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+>
+    <LinearLayout
+        android:id="@+id/progressContainer"
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"
+        android:gravity="center"
+    >
+        <ProgressBar
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+        >
+        </ProgressBar>
+    </LinearLayout>
+    <FrameLayout
+        android:id="@+id/contentContainer"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+    >
+        <ScrollView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:padding="@dimen/activity_margin"
+            android:clipToPadding="false"
+            android:scrollbarStyle="outsideOverlay"
+        >
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="@dimen/card_margin_top"
+                android:paddingBottom="@dimen/card_margin_bottom"
+                android:paddingLeft="@dimen/card_margin_horizontal"
+                android:paddingRight="@dimen/card_margin_horizontal"
+            >
+                <TextView
+                    android:id="@+id/view0"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/view_margin_vertical"
+                    android:paddingBottom="@dimen/view_margin_vertical"
+                    style="@style/Suggestedclothing_view0"
+                >
+                </TextView>
+                <TextView
+                    android:id="@+id/view1"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/view_margin_vertical"
+                    android:paddingBottom="@dimen/view_margin_vertical"
+                    style="@style/Suggestedclothing_view1"
+                >
+                </TextView>
+                <TextView
+                    android:id="@+id/view2"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/view_margin_vertical"
+                    android:paddingBottom="@dimen/view_margin_vertical"
+                    style="@style/Suggestedclothing_view2"
+                >
+                </TextView>
+            </LinearLayout>
+        </ScrollView>
+    </FrameLayout>
+</FrameLayout>
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TristateBooleanPicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TristateBooleanPicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TristateBooleanPicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TristateBooleanPicker.java	(date 1467729866000)
@@ -0,0 +1,137 @@
+package ibmmobileappbuilder.views;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.LinearLayout;
+import android.widget.Spinner;
+import android.widget.TextView;
+
+import ibmmobileappbuilder.core.R;
+
+public class TristateBooleanPicker extends LinearLayout {
+
+    private final Spinner mSpinner;
+    Boolean mValue = null;
+    private ChoiceListener mClickListener;
+
+    public TristateBooleanPicker(Context context) {
+        this(context, null);
+    }
+
+    public TristateBooleanPicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                                                      R.styleable.DateTimePicker, 0, 0
+        );
+        String label = a.getString(R.styleable.TristateBooleanPicker_label);
+
+        a.recycle();
+
+        setOrientation(HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.tristate_picker, this, true);
+
+        TextView labelView = (TextView) findViewById(R.id.label);
+        labelView.setText(label);
+
+        mSpinner = (Spinner) findViewById(R.id.spinner);
+        ArrayAdapter<String> mAdapter = new ArrayAdapter<String>(getContext(),
+                                                                 R.layout.tristate_picker_item
+        );
+
+        mAdapter.addAll(
+                getResources().getString(android.R.string.yes),
+                getResources().getString(android.R.string.no),
+                getResources().getString(R.string.not_set)
+        );
+
+        mSpinner.setAdapter(mAdapter);
+        mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                                               @Override
+                                               public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                                                   mValue = (position == 2) ? null : (position != 1);
+                                                   if (getListener() != null) {
+                                                       getListener().onChoice(mValue);
+                                                   }
+                                               }
+
+                                               @Override
+                                               public void onNothingSelected(AdapterView<?> parent) {
+                                               }
+                                           }
+        );
+
+        setValue(null);
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Bundle bundle = new Bundle();
+        bundle.putParcelable("instanceState", super.onSaveInstanceState());
+
+        if (mValue != null) {
+            bundle.putInt("boolVal", mValue ? 0 : 1);
+        }
+
+        return bundle;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state instanceof Bundle) {
+            Bundle b = (Bundle) state;
+            int storedVal = b.getInt("boolVal", -1);
+
+            if (storedVal != -1) {
+                setValue(storedVal == 0);
+            } else {
+                setValue(null);
+            }
+
+            state = ((Bundle) state).getParcelable("instanceState");
+        }
+
+        super.onRestoreInstanceState(state);
+    }
+
+    /**
+     * Sets the value for this control. Can be null
+     *
+     * @param choice the new value, or null to clear it.
+     */
+    public void setValue(Boolean choice) {
+        mValue = choice;
+        if (choice == null) {
+            mSpinner.setSelection(2);
+        } else {
+            mSpinner.setSelection(choice ? 0 : 1);
+        }
+    }
+
+    public Boolean getValue() {
+        return mValue;
+    }
+
+    public void setListener(ChoiceListener listener) {
+        mClickListener = listener;
+    }
+
+    public ChoiceListener getListener() {
+        return mClickListener;
+    }
+
+    public interface ChoiceListener {
+        void onChoice(Boolean value);
+    }
+}
Index: TravelAnalyser11/app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values/strings.xml b/TravelAnalyser11/app/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/values/strings.xml	(date 1475330010000)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+
+    <string name="app_name">Travel Analyser 1.1</string>
+
+    <!-- Activity Titles -->
+    <string formatted="false" name="travelAnalyser11Main">Travel Analyser 1.1</string>
+</resources>
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/CheckableLinearLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/CheckableLinearLayout.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/CheckableLinearLayout.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/CheckableLinearLayout.java	(date 1467729866000)
@@ -0,0 +1,87 @@
+package ibmmobileappbuilder.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Checkable;
+import android.widget.LinearLayout;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This is a simple wrapper for {@link LinearLayout} that implements the {@link Checkable}
+ * interface by keeping an internal 'checked' state flag.
+ * <p>
+ * This can be used as the root view for a custom list item layout for
+ * {@link android.widget.AbsListView} elements with a
+ * {@link android.widget.AbsListView#setChoiceMode(int) choiceMode} set.
+ */
+public class CheckableLinearLayout extends LinearLayout implements Checkable {
+    private static final int[] CHECKED_STATE_SET = {android.R.attr.state_checked};
+
+    private boolean mChecked = false;
+    private final List<Checkable> checkableViews;
+
+    public CheckableLinearLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        this.checkableViews = new ArrayList<>(5);
+    }
+
+    @Override
+    public boolean isChecked() {
+        return mChecked;
+    }
+
+    @Override
+    public void setChecked(boolean b) {
+        if (b != mChecked) {
+            mChecked = b;
+            for (Checkable c : checkableViews) {
+                c.setChecked(b);
+            }
+            refreshDrawableState();
+        }
+    }
+
+    @Override
+    public void toggle() {
+        setChecked(!mChecked);
+    }
+
+    @Override
+    public int[] onCreateDrawableState(int extraSpace) {
+        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
+        if (isChecked()) {
+            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
+        }
+        return drawableState;
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        final int childCount = this.getChildCount();
+        for (int i = 0; i < childCount; ++i) {
+            findCheckableChildren(this.getChildAt(i));
+        }
+    }
+
+    /**
+     * Add to our checkable list all the children of the view that implement the
+     * interface Checkable
+     */
+    private void findCheckableChildren(View v) {
+        if (v instanceof Checkable) {
+            this.checkableViews.add((Checkable) v);
+        }
+        if (v instanceof ViewGroup) {
+            final ViewGroup vg = (ViewGroup) v;
+            final int childCount = vg.getChildCount();
+            for (int i = 0; i < childCount; ++i) {
+                findCheckableChildren(vg.getChildAt(i));
+            }
+        }
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values/colors.xml b/TravelAnalyser11/app/src/main/res/values/colors.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/values/colors.xml	(date 1475330010000)
@@ -0,0 +1,36 @@
+
+<resources>
+    <!-- Customizations -->
+
+    <color name="textColor">#545454</color>
+    <color name="textColorSecondary">#99545454</color>
+    <color name="textColorMuted">#4d545454</color>
+    <color name="textBarColor">#545454</color>
+    <color name="window_background">#F3F3F3</color>
+   
+    <!-- background drawable: be sure it has a not too large size/resolution -->
+    <drawable name="activity_background_image">@android:color/transparent</drawable>
+    
+    <!-- toolbar background -->
+    <color name="actionbar_background">#DEDEDE</color>
+
+    <!-- status bar background (android 5.x) -->
+    <color name="primaryDark">#ffa6a6a6</color>
+    
+    <!-- list selections -->
+    <color name="selectionColor">#44545454</color>
+
+    <!-- card style -->
+    <drawable name="background_card">@drawable/bg_light_card</drawable>
+
+    <!-- card view -->
+    <color name="cardBackgroundColor">#99F3F3F3</color>
+
+    <!-- icons -->
+    <drawable name="ic_device_access_call">@drawable/ic_device_access_call_dark</drawable>
+    <drawable name="ic_location_web_site">@drawable/ic_location_web_site_dark</drawable>
+    <drawable name="ic_location_place">@drawable/ic_location_place_dark</drawable>
+    <drawable name="ic_content_email">@drawable/ic_content_email_dark</drawable>
+
+</resources>
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/GeoPicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/GeoPicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/GeoPicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/GeoPicker.java	(date 1467729866000)
@@ -0,0 +1,223 @@
+package ibmmobileappbuilder.views;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationManager;
+import android.support.annotation.Nullable;
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.text.Editable;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.restds.GeoPoint;
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Picker for geolocation points
+ */
+public class GeoPicker extends LinearLayout {
+
+    private static final String TAG = GeoPicker.class.getSimpleName();
+    private final EditText mLatitudeView;
+    private final EditText mLongitudeView;
+    private final TextView mErrorView;
+
+    private GeoPoint mGeoPoint;
+    private PointChangedListener mListener;
+
+    public GeoPicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                R.styleable.GeoPicker, 0, 0);
+        String label = a.getString(R.styleable.GeoPicker_label);
+
+        a.recycle();
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.geopoint_picker, this, true);
+
+        TextView labelView = (TextView) getChildAt(0);
+        labelView.setText(label);
+
+        mLatitudeView = (EditText) findViewById(R.id.latitude);
+
+        mLongitudeView = (EditText) findViewById(R.id.longitude);
+
+        ImageButton myLocationBtn = (ImageButton) findViewById(R.id.my_location_button);
+        myLocationBtn.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+              Location loc = getLastKnownLocation();
+              if (loc != null)
+                  setPoint(new GeoPoint(new double[]{
+                                  loc.getLongitude(),
+                                  loc.getLatitude()}
+                          )
+                  );
+            }
+         }
+        );
+
+        mErrorView = (TextView) findViewById(R.id.error);
+        setWatchers();
+    }
+
+    public GeoPicker setPoint(GeoPoint point){
+        this.mGeoPoint = point;
+        updateViews();
+
+        notifyListener();
+
+        return this;
+    }
+
+    protected void notifyListener(){
+        if(getListener() != null)
+            getListener().onPointChanged(mGeoPoint);
+    }
+
+    public PointChangedListener getListener(){
+        return mListener;
+    }
+
+    public GeoPoint getPoint(){
+        return mGeoPoint;
+    }
+
+    public GeoPicker setListener(PointChangedListener listener){
+        mListener = listener;
+        return this;
+    }
+
+    public void setError(int error) {
+        setError(getContext().getString(error));
+    }
+
+    public void setError(String errorMsg) {
+
+        if (errorMsg != null) {
+            if (mErrorView.getVisibility() == GONE) {
+                mErrorView.setText(errorMsg);
+                mErrorView.setAlpha(0.0F);
+                mErrorView.setVisibility(VISIBLE);
+                mErrorView.animate()
+                        .alpha(1.0F)
+                        .setDuration(200L)
+                        .setInterpolator(new FastOutSlowInInterpolator())
+                        .setListener(null).start();
+            }
+        } else {
+            mErrorView.animate()
+                    .alpha(0.0F)
+                    .setDuration(200L)
+                    .setInterpolator(new FastOutSlowInInterpolator())
+                    .setListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            mErrorView.setText((CharSequence) null);
+                            mErrorView.setVisibility(GONE);
+                        }
+                    });
+        }
+    }
+
+    private void setWatchers(){
+        mLatitudeView.addTextChangedListener(new TextWatcherAdapter() {
+            @Override
+            public void afterTextChanged(Editable s) {
+                Double value = null;
+                try {
+                    value = Double.parseDouble(s.toString());
+                } catch (NumberFormatException e) {
+                    analyticsReporter(getApplicationContext()).sendHandledException(
+                            TAG,
+                            "parseDouble",
+                            e
+                    );
+                }
+
+                setLatitude(value);
+            }
+        });
+
+        mLongitudeView.addTextChangedListener(new TextWatcherAdapter() {
+            @Override
+            public void afterTextChanged(Editable s) {
+                Double value = null;
+                try {
+                    value = Double.parseDouble(s.toString());
+                } catch (NumberFormatException e) {
+                    analyticsReporter(getApplicationContext()).sendHandledException(TAG, "parseDouble", e);
+                }
+
+                setLongitude(value);
+            }
+        });
+    }
+
+    private void setLatitude(Double latitude){
+        if (latitude != null) {
+            createGeoPoint();
+            mGeoPoint.coordinates[GeoPoint.LATITUDE_INDEX] = latitude;
+            notifyListener();
+        }
+    }
+
+    private void setLongitude(Double longitude){
+        if (longitude != null){
+            createGeoPoint();
+            mGeoPoint.coordinates[GeoPoint.LONGITUDE_INDEX] = longitude;
+            notifyListener();
+        }
+    }
+
+    private void updateViews(){
+        mLatitudeView.setText(mGeoPoint != null ?
+                String.format("%.3f", mGeoPoint.coordinates[GeoPoint.LATITUDE_INDEX]) :
+                null);
+        mLongitudeView.setText(mGeoPoint != null ?
+                String.format("%.3f", mGeoPoint.coordinates[GeoPoint.LONGITUDE_INDEX]) :
+                null);
+    }
+
+    private void createGeoPoint(){
+        if(mGeoPoint == null)
+            mGeoPoint = new GeoPoint();
+    }
+
+    private @Nullable Location getLastKnownLocation(){
+
+        // todo move this to background??
+        LocationManager lm = (LocationManager) getContext().getSystemService(Context.LOCATION_SERVICE);
+        Criteria cr = new Criteria();
+        cr.setAccuracy(Criteria.ACCURACY_COARSE);
+
+        String provider = lm.getBestProvider(cr, true);
+        if(provider == null)
+            return null;
+
+        return lm.getLastKnownLocation(provider);
+    }
+
+    public interface PointChangedListener{
+        void onPointChanged(GeoPoint point);
+    }
+}
Index: TravelAnalyser11/app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values/styles.xml b/TravelAnalyser11/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/values/styles.xml	(date 1475330010000)
@@ -0,0 +1,58 @@
+
+<resources>
+    <!-- Base application theme. -->
+    <style name="AppBaseTheme" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="android:windowBackground">@color/window_background</item>
+
+        <!-- toolbar -->
+        <item name="colorPrimary">@color/actionbar_background</item>
+        <item name="colorPrimaryDark">@color/primaryDark</item>
+        <item name="android:textColorPrimary">@color/textBarColor</item>
+
+        <!-- colors -->
+        <item name="android:textColorSecondary">@color/textColorSecondary</item>
+        <item name="android:textColorHint">@color/textColorSecondary</item>
+        <item name="colorAccent">@color/actionbar_background</item>
+        <item name="colorControlHighlight">@color/primaryDark</item>
+
+        <!-- toolbar styles -->
+        <item name="windowActionModeOverlay">true</item>
+        <item name="actionModeStyle">@style/ActionModeStyle</item>
+    </style>
+
+    <!-- app theme (default version) -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <item name="windowActionBar">false</item>
+    </style>
+
+    <!-- labels in detail screens -->
+     <style name="LabelTextStyle" parent="TextStyle">
+        <item name="android:minHeight">36dp</item>
+        <item name="android:gravity">bottom</item>
+        <item name="android:textAllCaps">true</item>
+        <item name="android:textStyle">bold</item>
+        <item name="android:textAppearance">?android:attr/textAppearanceSmall</item>
+        <item name="android:textColor">@color/textColorSecondary</item>
+    </style>
+    <style name="TravelDestinationScreen1_view0" parent="TextStyle">
+        <item name="android:textAppearance">?android:attr/textAppearanceMedium</item>
+        <item name="android:gravity">left|center_vertical</item>
+    </style>
+    <style name="TravelDestinationScreen1_view1" parent="TextStyle">
+        <item name="android:textAppearance">?android:attr/textAppearanceMedium</item>
+        <item name="android:gravity">left|center_vertical</item>
+    </style>
+    <style name="Suggestedclothing_view0" parent="TextStyle">
+        <item name="android:textAppearance">?android:attr/textAppearanceMedium</item>
+        <item name="android:gravity">left|center_vertical</item>
+    </style>
+    <style name="Suggestedclothing_view1" parent="TextStyle">
+        <item name="android:textAppearance">?android:attr/textAppearanceMedium</item>
+        <item name="android:gravity">left|center_vertical</item>
+    </style>
+    <style name="Suggestedclothing_view2" parent="TextStyle">
+        <item name="android:textAppearance">?android:attr/textAppearanceMedium</item>
+        <item name="android:gravity">left|center_vertical</item>
+    </style>
+</resources>
+
Index: TravelAnalyser11/app/src/main/res/values/config.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values/config.xml b/TravelAnalyser11/app/src/main/res/values/config.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/res/values/config.xml	(date 1475330010000)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+    <!-- Url for ibmmobileappbuilder-hosted data -->
+    <string name="dynamic_url">https://appbuilder.ibmcloud.com/api/app/data/</string>
+
+    <!-- authentication for app services -->
+    <string name="api_key">F5bQp0ulUurbWLjb5UVWDwOLpvrfGmnOw1cPFgZ49F</string>
+    <string name="app_id">083e2f69-a5c2-4a6c-9a37-c48cfbd446d1</string>
+
+</resources>
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TextWatcherAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TextWatcherAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TextWatcherAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/TextWatcherAdapter.java	(date 1467729866000)
@@ -0,0 +1,21 @@
+package ibmmobileappbuilder.views;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+
+public class TextWatcherAdapter implements TextWatcher {
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+
+    }
+}
Index: TravelAnalyser11/app/src/main/res/values-v21/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values-v21/styles.xml b/TravelAnalyser11/app/src/main/res/values-v21/styles.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/app/src/main/res/values-v21/styles.xml	(date 1467729866000)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <style name="AppTheme" parent="AppBaseTheme">
+        <item name="android:windowEnterTransition">@android:transition/explode</item>
+        <item name="android:windowReturnTransition">@android:transition/explode</item>
+        <item name="android:windowSharedElementEnterTransition">@android:transition/move</item>
+        <item name="android:windowSharedElementExitTransition">@android:transition/move</item>
+    </style>
+
+    <style name="AppTheme.Drawer">
+        <item name="android:windowTranslucentStatus">true</item>
+    </style>
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateTimePicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateTimePicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateTimePicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/DateTimePicker.java	(date 1467729866000)
@@ -0,0 +1,338 @@
+package ibmmobileappbuilder.views;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.text.format.DateFormat;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.doomonafireball.betterpickers.calendardatepicker.CalendarDatePickerDialog;
+import com.doomonafireball.betterpickers.radialtimepicker.RadialTimePickerDialog;
+
+import java.util.Calendar;
+import java.util.Date;
+
+import ibmmobileappbuilder.core.R;
+
+public class DateTimePicker extends LinearLayout {
+
+    TextView mLabelView;
+
+    TextView mDateView;
+    Calendar mDateTime;
+
+    TextView mTimeView;
+
+    ImageButton mReset;
+
+    DateSelectedListener mListener;
+    private TextView mErrorView;
+
+    public DateTimePicker(Context context) {
+        this(context, null);
+    }
+
+    public DateTimePicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                R.styleable.DateTimePicker, 0, 0);
+        String label = a.getString(R.styleable.DateTimePicker_label);
+
+        a.recycle();
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.datetime_picker, this, true);
+
+        mLabelView = (TextView) getChildAt(0);
+
+        mLabelView.setText(label);
+
+        mDateView = (TextView) findViewById(R.id.dateValue);
+        mTimeView = (TextView) findViewById(R.id.timeValue);
+        mReset = (ImageButton) findViewById(R.id.dateReset);
+        mErrorView = (TextView) findViewById(R.id.errorView);
+
+        setDatePicker(mDateView, true);
+        setTimePicker(mTimeView, false);
+        setResetHandler();
+    }
+
+    private void setResetHandler() {
+        mReset.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                setDateTime(null);
+                if(getListener() != null)
+                    getListener().onDateSelected(null);
+            }
+        });
+    }
+
+    public void setLabel(String label) {
+        mLabelView.setText(label);
+    }
+
+    /**
+     * Set the date part
+     * @param date a Date object
+     * @return DateTimePicker instance for chaining
+     */
+    public DateTimePicker setDate(Date date) {
+        if(date != null){
+            if (this.mDateTime == null) {
+                this.mDateTime = Calendar.getInstance();
+                this.mDateTime.setTime(date);
+            }
+            else{
+                // set the date part
+                Calendar from = Calendar.getInstance();
+                from.setTime(date);
+
+                mDateTime.set(from.get(Calendar.YEAR), from.get(Calendar.MONTH), from.get(Calendar.DAY_OF_MONTH));
+            }
+
+            setDateText(mDateView, mDateTime);
+        }
+
+        return this;
+    }
+
+    public DateTimePicker setTime(Date date) {
+
+        if(date != null){
+            if (this.mDateTime == null) {
+                this.mDateTime = Calendar.getInstance();
+                this.mDateTime.setTime(date);
+            }
+            else{
+                // set the time part
+                Calendar from = Calendar.getInstance();
+                from.setTime(date);
+
+                mDateTime.set(Calendar.HOUR_OF_DAY, from.get(Calendar.HOUR_OF_DAY));
+                mDateTime.set(Calendar.MINUTE, from.get(Calendar.MINUTE));
+                mDateTime.set(Calendar.SECOND, from.get(Calendar.SECOND));
+                mDateTime.set(Calendar.MILLISECOND, from.get(Calendar.MILLISECOND));
+            }
+
+            setTimeText(mTimeView, mDateTime);
+        }
+
+        return this;
+    }
+
+
+
+    public DateTimePicker setDateTime(Date date){
+
+        if(date != null){
+            if(this.mDateTime == null)
+                this.mDateTime = Calendar.getInstance();
+
+            this.mDateTime.setTime(date);
+        }
+        else
+            this.mDateTime = null;
+
+        setDateText(mDateView, mDateTime);
+        setTimeText(mTimeView, mDateTime);
+        return this;
+    }
+
+    public DateTimePicker setDateTimeSelectedListener(DateSelectedListener listener) {
+        this.mListener = listener;
+        return this;
+    }
+
+    public DateSelectedListener getListener(){
+        return mListener;
+    }
+
+    private void setDateText(TextView view, Calendar cal){
+        view.setText(cal != null ?
+                DateFormat.getMediumDateFormat(getContext()).format(cal.getTime())
+                : null);
+    }
+
+    private void setTimeText(TextView mTimeView, Calendar mDateTime) {
+        mTimeView.setText(mDateTime != null ?
+            DateFormat.getTimeFormat(getContext()).format(mDateTime.getTime())
+            : null);
+    }
+
+    private void setDatePicker(final TextView view, final boolean isMin) {
+        view.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Calendar cal = mDateTime;
+                if(cal == null)
+                    cal = Calendar.getInstance();
+
+                // Try to restore previous suspended fragment
+                FragmentManager fm = ((FragmentActivity) getContext()).getSupportFragmentManager();
+                CalendarDatePickerDialog calendarDatePickerDialog = (CalendarDatePickerDialog) fm.findFragmentByTag("DatePicker");
+
+                if(calendarDatePickerDialog == null) {
+                    calendarDatePickerDialog = CalendarDatePickerDialog.newInstance(dateCallback,
+                            cal.get(Calendar.YEAR),
+                            cal.get(Calendar.MONTH),
+                            cal.get(Calendar.DAY_OF_MONTH)
+                    );
+                }
+                else
+                    calendarDatePickerDialog.setOnDateSetListener(dateCallback);
+
+                calendarDatePickerDialog.show(fm, "DatePicker");
+            }
+        });
+    }
+
+    private void setTimePicker(final TextView view, final boolean isMin) {
+        view.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Calendar cal = mDateTime;
+                if(cal == null)
+                    cal = Calendar.getInstance();
+
+                // Try to restore previous suspended fragment
+                FragmentManager fm = ((FragmentActivity) getContext()).getSupportFragmentManager();
+                RadialTimePickerDialog radialTimePickerDialog = (RadialTimePickerDialog) fm.findFragmentByTag("TimePicker");
+
+                if(radialTimePickerDialog == null) {
+                    radialTimePickerDialog = RadialTimePickerDialog.newInstance(timeCallback,
+                            cal.get(Calendar.HOUR_OF_DAY),
+                            cal.get(Calendar.MINUTE),
+                            false
+                    );
+                }
+                else
+                    radialTimePickerDialog.setOnTimeSetListener(timeCallback);
+
+                radialTimePickerDialog.show(fm, "TimePicker");
+            }
+        });
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Bundle bundle = new Bundle();
+        bundle.putParcelable("instanceState", super.onSaveInstanceState());
+
+        if (mDateTime != null) {
+            bundle.putLong("datetime", mDateTime.getTime().getTime());
+        }
+
+        return bundle;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state instanceof Bundle) {
+            Bundle b = (Bundle) state;
+            long datetimeVal = b.getLong("datetime", -1);
+
+            if (datetimeVal != -1) {
+                setDateTime(new Date(datetimeVal));
+            }
+
+            state = ((Bundle) state).getParcelable("instanceState");
+        }
+
+        super.onRestoreInstanceState(state);
+    }
+
+    public void setError(int errorRes){
+        setError(getContext().getString(errorRes));
+    }
+
+    public void setError(CharSequence errorMsg){
+        if(errorMsg != null) {
+            if (mErrorView.getVisibility() == GONE) {
+                mErrorView.setText(errorMsg);
+                mErrorView.setAlpha(0.0F);
+                mErrorView.setVisibility(VISIBLE);
+                mErrorView.animate()
+                        .alpha(1.0F)
+                        .setDuration(200L)
+                        .setInterpolator(new FastOutSlowInInterpolator())
+                        .setListener(null).start();
+            }
+        }
+        else {
+            mErrorView.animate()
+                    .alpha(0.0F)
+                    .setDuration(200L)
+                    .setInterpolator(new FastOutSlowInInterpolator())
+                    .setListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            mErrorView.setText((CharSequence) null);
+                            mErrorView.setVisibility(GONE);
+                        }
+                    });
+        }
+    }
+
+    CalendarDatePickerDialog.OnDateSetListener dateCallback = new CalendarDatePickerDialog.OnDateSetListener() {
+        @Override
+        public void onDateSet(
+                CalendarDatePickerDialog calendarDatePickerDialog,
+                int year,
+                int month,
+                int day) {
+
+            Calendar cal = Calendar.getInstance();
+            cal.set(year, month, day, 0, 0, 0);
+
+            setDate(cal.getTime());
+            notifyListener();
+        }
+    };
+
+    RadialTimePickerDialog.OnTimeSetListener timeCallback = new RadialTimePickerDialog.OnTimeSetListener() {
+        @Override
+        public void onTimeSet(RadialTimePickerDialog radialTimePickerDialog, int h, int m) {
+            Calendar cal = Calendar.getInstance();
+            cal.set(Calendar.HOUR_OF_DAY, h);
+            cal.set(Calendar.MINUTE, m);
+            cal.set(Calendar.SECOND, 0);
+            cal.set(Calendar.MILLISECOND, 0);
+
+            setTime(cal.getTime());
+            notifyListener();
+        }
+    };
+
+    private void notifyListener(){
+        if (getListener() != null) {
+            getListener().onDateSelected(mDateTime.getTime());
+        }
+    }
+
+
+    public interface DateSelectedListener {
+
+        /**
+         * callback for listeners. Dates can be null
+         */
+        public void onDateSelected(Date date);
+    }
+
+}
Index: TravelAnalyser11/app/src/main/res/values-v19/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values-v19/styles.xml b/TravelAnalyser11/app/src/main/res/values-v19/styles.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/app/src/main/res/values-v19/styles.xml	(date 1467729866000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <style name="AppTheme.Drawer">
+        <item name="android:windowTranslucentStatus">false</item>
+    </style>
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ListSelectionPicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ListSelectionPicker.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ListSelectionPicker.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ListSelectionPicker.java	(date 1467729866000)
@@ -0,0 +1,144 @@
+package ibmmobileappbuilder.views;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.dialogs.SelectionDialog;
+
+public class ListSelectionPicker extends LinearLayout {
+
+    TextView mLabelView;
+
+    TextView mSelectionView;
+
+    SelectionDialog mDialog;
+
+    ArrayList<String> mValues;
+
+    ListSelectedListener mListener;
+
+    String mLabel;
+
+    private String mTag;
+
+    public ListSelectionPicker(Context context) {
+        this(context, null);
+    }
+
+    public ListSelectionPicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        TypedArray a = context.obtainStyledAttributes(attrs,
+                                                      R.styleable.ListSelectionPicker, 0, 0
+        );
+        mLabel = a.getString(R.styleable.ListSelectionPicker_label);
+
+        a.recycle();
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        LayoutInflater inflater = LayoutInflater.from(context);
+        inflater.inflate(R.layout.listselection_picker, this, true);
+
+        mLabelView = (TextView) getChildAt(0);
+        mLabelView.setText(mLabel);
+
+        mSelectionView = (TextView) getChildAt(1);
+
+        setPicker();
+    }
+
+    public void setLabel(String label) {
+        this.mLabel = label;
+        mLabelView.setText(label);
+    }
+
+    public ListSelectionPicker setSelectionDialog(SelectionDialog dialog) {
+        this.mDialog = dialog;
+        if (mDialog != null) {
+            // Attach callback
+            mDialog.setSelectionListener(
+                    new SelectionDialog.SelectionListener() {
+                        @Override
+                        public void onSelected(ArrayList<String> terms) {
+                            setSelectedValues(terms);
+
+                            if (getSelectedListener() != null) {
+                                getSelectedListener().onSelected(terms);
+                            }
+                        }
+                    }
+            );
+        }
+
+        return this;
+    }
+
+    public ListSelectionPicker setSelectedListener(ListSelectedListener listener) {
+        this.mListener = listener;
+        return this;
+    }
+
+    public ListSelectedListener getSelectedListener() {
+        return this.mListener;
+    }
+
+    public ListSelectionPicker setTag(String tag) {
+        this.mTag = tag;
+        return this;
+    }
+
+    public ListSelectionPicker setSelectedValues(ArrayList<String> values) {
+        this.mValues = values;
+        if (mValues != null) {
+            mSelectionView.setText(TextUtils.join(", ", mValues));
+        } else {
+            mSelectionView.setText(null);
+        }
+        return this;
+    }
+
+    private void setPicker() {
+
+        this.setOnClickListener(
+                new OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        // initial values
+                        Bundle bundle = new Bundle();
+                        bundle.putStringArrayList(SelectionDialog.INITIAL_VALUES,
+                                                  mValues
+                        );
+
+                        mDialog.setArguments(bundle);
+                        mDialog.show(((FragmentActivity) getContext()).getSupportFragmentManager(),
+                                     mTag
+                        );
+                    }
+
+                }
+        );
+    }
+
+    public interface ListSelectedListener {
+
+        /**
+         * callback for listeners. Dates can be null
+         */
+        void onSelected(ArrayList<String> selected);
+    }
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ActionView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ActionView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ActionView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ActionView.java	(date 1467729866000)
@@ -0,0 +1,30 @@
+package ibmmobileappbuilder.views;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import ibmmobileappbuilder.core.R;
+
+/**
+ * TextView used in drawer actions section
+ */
+public class ActionView extends LinearLayout {
+
+    public ActionView(Context context) {
+        super(context);
+        LayoutInflater inflater = (LayoutInflater) context
+                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        if (inflater != null) {
+            View v = inflater.inflate(R.layout.drawer_item, this);
+            v.setBackgroundColor(getResources().getColor(R.color.window_background));
+        }
+    }
+
+    public void setText(String s) {
+        ((TextView) this.findViewById(android.R.id.text1)).setText(s);
+    }
+
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ResizableImageView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ResizableImageView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ResizableImageView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/ResizableImageView.java	(date 1467729866000)
@@ -0,0 +1,61 @@
+package ibmmobileappbuilder.views;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.widget.ImageView;
+
+/**
+ * ImageView class. This kind of view will adjust to fit all horizontal available space,
+ * maintaining the aspect ratio.
+ */
+public class ResizableImageView extends ImageView {
+
+    public ResizableImageView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public ResizableImageView(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        Drawable d = getDrawable();
+        if (d == null) {
+            super.setMeasuredDimension(widthMeasureSpec, heightMeasureSpec);
+            return;
+        }
+
+        int imageHeight = d.getIntrinsicHeight();
+        int imageWidth = d.getIntrinsicWidth();
+
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+
+        float imageRatio = 0.0F;
+        if (imageHeight > 0) {
+            imageRatio = imageWidth / imageHeight;
+        }
+        float sizeRatio = 0.0F;
+        if (heightSize > 0) {
+            sizeRatio = widthSize / heightSize;
+        }
+
+        int width;
+        int height;
+        if (imageRatio >= sizeRatio) {
+            // set width to maximum allowed
+            width = widthSize;
+            // scale height
+            height = width * imageHeight / imageWidth;
+        } else {
+            // set height to maximum allowed
+            height = heightSize;
+            // scale width
+            width = height * imageWidth / imageHeight;
+        }
+
+        setMeasuredDimension(width, height);
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/SquareImageView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/SquareImageView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/SquareImageView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/SquareImageView.java	(date 1467729866000)
@@ -0,0 +1,23 @@
+package ibmmobileappbuilder.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.ImageView;
+
+/** An image view which always remains square with respect to its width. */
+final class SquareImageView extends ImageView {
+
+    public SquareImageView(Context context) {
+        super(context);
+    }
+
+    public SquareImageView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        setMeasuredDimension(getMeasuredWidth(), getMeasuredWidth());
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTextView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTextView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTextView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTextView.java	(date 1467729866000)
@@ -0,0 +1,76 @@
+package ibmmobileappbuilder.views.org.sufficientlysecure.htmltextview;
+
+import android.content.Context;
+import android.text.Html;
+import android.text.method.LinkMovementMethod;
+import android.util.AttributeSet;
+
+import java.io.InputStream;
+
+public class HtmlTextView extends JellyBeanSpanFixTextView {
+
+    public static final String TAG = "HtmlTextView";
+
+    public static final boolean DEBUG = false;
+
+    public HtmlTextView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    public HtmlTextView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public HtmlTextView(Context context) {
+        super(context);
+    }
+
+    /**
+     * http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string
+     *
+     * @param is the input stream
+     * @return the string
+     */
+    static private String convertStreamToString(InputStream is) {
+        java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
+        return s.hasNext() ? s.next() : "";
+    }
+
+    /**
+     * Loads HTML from a raw resource, i.e., a HTML file in res/raw/.
+     * This allows translatable resource (e.g., res/raw-de/ for german).
+     * The containing HTML is parsed to Android's Spannable format and then displayed.
+     *
+     * @param context the current context
+     * @param id      for example: R.raw.help
+     */
+    public void setHtmlFromRawResource(Context context, int id, boolean useLocalDrawables) {
+        // load html from html file from /res/raw
+        InputStream inputStreamText = context.getResources().openRawResource(id);
+
+        setHtmlFromString(convertStreamToString(inputStreamText), useLocalDrawables);
+    }
+
+    /**
+     * Parses String containing HTML to Android's Spannable format and displays it in this
+     * TextView.
+     *
+     * @param html String containing HTML, for example: "<b>Hello world!</b>"
+     */
+    public void setHtmlFromString(String html, boolean useLocalDrawables) {
+        Html.ImageGetter imgGetter;
+        if (useLocalDrawables) {
+            imgGetter = new LocalImageGetter(getContext());
+        } else {
+            imgGetter = new UrlImageGetter(this, getContext());
+        }
+        // this uses Android's Html class for basic parsing, and HtmlTagHandler
+        setText(Html.fromHtml(html, imgGetter, new HtmlTagHandler()));
+
+        // make links work
+        setMovementMethod(LinkMovementMethod.getInstance());
+
+        // no flickering when clicking textview for Android < 4, but overriders color...
+//        text.setTextColor(getResources().getColor(android.R.color.secondary_text_dark_nodisable));
+    }
+}
Index: TravelAnalyser11/app/src/main/res/values-w820dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/res/values-w820dp/dimens.xml b/TravelAnalyser11/app/src/main/res/values-w820dp/dimens.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/app/src/main/res/values-w820dp/dimens.xml	(date 1467729866000)
@@ -0,0 +1,7 @@
+<!-- This App has been generated using http://www.radarconline.com , the Bright Enterprise App Builder -->
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTagHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTagHandler.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTagHandler.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/HtmlTagHandler.java	(date 1467729866000)
@@ -0,0 +1,147 @@
+package ibmmobileappbuilder.views.org.sufficientlysecure.htmltextview;
+
+import org.xml.sax.XMLReader;
+
+import android.text.Editable;
+import android.text.Html;
+import android.text.Layout;
+import android.text.Spannable;
+import android.text.style.AlignmentSpan;
+import android.text.style.BulletSpan;
+import android.text.style.LeadingMarginSpan;
+import android.text.style.TypefaceSpan;
+import android.util.Log;
+
+import java.util.Vector;
+
+/**
+ * Some parts of this code are based on android.text.Html
+ */
+public class HtmlTagHandler implements Html.TagHandler {
+
+    private int mListItemCount = 0;
+
+    private final Vector<String> mListParents = new Vector<>();
+
+    private static class Code {
+
+    }
+
+    private static class Center {
+
+    }
+
+    @Override
+    public void handleTag(final boolean opening, final String tag, Editable output,
+            final XMLReader xmlReader) {
+        if (opening) {
+            // opening tag
+            if (HtmlTextView.DEBUG) {
+                Log.d(HtmlTextView.TAG, "opening, output: " + output.toString());
+            }
+
+            if (tag.equalsIgnoreCase("ul") || tag.equalsIgnoreCase("ol") || tag
+                    .equalsIgnoreCase("dd")) {
+                mListParents.add(tag);
+                mListItemCount = 0;
+            } else if (tag.equalsIgnoreCase("code")) {
+                start(output, new Code());
+            } else if (tag.equalsIgnoreCase("center")) {
+                start(output, new Center());
+            }
+        } else {
+            // closing tag
+            if (HtmlTextView.DEBUG) {
+                Log.d(HtmlTextView.TAG, "closing, output: " + output.toString());
+            }
+
+            if (tag.equalsIgnoreCase("ul") || tag.equalsIgnoreCase("ol") || tag
+                    .equalsIgnoreCase("dd")) {
+                mListParents.remove(tag);
+                mListItemCount = 0;
+            } else if (tag.equalsIgnoreCase("li")) {
+                handleListTag(output);
+            } else if (tag.equalsIgnoreCase("code")) {
+                end(output, Code.class, new TypefaceSpan("monospace"), false);
+            } else if (tag.equalsIgnoreCase("center")) {
+                end(output, Center.class, new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER),
+                        true);
+            }
+        }
+    }
+
+    /**
+     * Mark the opening tag by using private classes
+     */
+    private void start(Editable output, Object mark) {
+        int len = output.length();
+        output.setSpan(mark, len, len, Spannable.SPAN_MARK_MARK);
+
+        if (HtmlTextView.DEBUG) {
+            Log.d(HtmlTextView.TAG, "len: " + len);
+        }
+    }
+
+    private void end(Editable output, Class kind, Object repl, boolean paragraphStyle) {
+        Object obj = getLast(output, kind);
+        // start of the tag
+        int where = output.getSpanStart(obj);
+        // end of the tag
+        int len = output.length();
+
+        output.removeSpan(obj);
+
+        if (where != len) {
+            // paragraph styles like AlignmentSpan need to end with a new line!
+            if (paragraphStyle) {
+                output.append("\n");
+                len++;
+            }
+            output.setSpan(repl, where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+        }
+
+        if (HtmlTextView.DEBUG) {
+            Log.d(HtmlTextView.TAG, "where: " + where);
+            Log.d(HtmlTextView.TAG, "len: " + len);
+        }
+    }
+
+    /**
+     * Get last marked position of a specific tag kind (private class)
+     */
+    private Object getLast(Editable text, Class kind) {
+        Object[] objs = text.getSpans(0, text.length(), kind);
+        if (objs.length == 0) {
+            return null;
+        } else {
+            for (int i = objs.length; i > 0; i--) {
+                if (text.getSpanFlags(objs[i - 1]) == Spannable.SPAN_MARK_MARK) {
+                    return objs[i - 1];
+                }
+            }
+            return null;
+        }
+    }
+
+    private void handleListTag(Editable output) {
+        if (mListParents.lastElement().equals("ul")) {
+            output.append("\n");
+            String[] split = output.toString().split("\n");
+
+            int lastIndex = split.length - 1;
+            int start = output.length() - split[lastIndex].length() - 1;
+            output.setSpan(new BulletSpan(15 * mListParents.size()), start, output.length(), 0);
+        } else if (mListParents.lastElement().equals("ol")) {
+            mListItemCount++;
+
+            output.append("\n");
+            String[] split = output.toString().split("\n");
+
+            int lastIndex = split.length - 1;
+            int start = output.length() - split[lastIndex].length() - 1;
+            output.insert(start, mListItemCount + ". ");
+            output.setSpan(new LeadingMarginSpan.Standard(15 * mListParents.size()), start,
+                    output.length(), 0);
+        }
+    }
+} 
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/LocalImageGetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/LocalImageGetter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/LocalImageGetter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/LocalImageGetter.java	(date 1467729866000)
@@ -0,0 +1,38 @@
+package ibmmobileappbuilder.views.org.sufficientlysecure.htmltextview;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.text.Html;
+import android.util.Log;
+
+/**
+ * Copied from http://stackoverflow.com/a/22298833
+ */
+public class LocalImageGetter implements Html.ImageGetter {
+
+    Context c;
+
+    public LocalImageGetter(Context c) {
+        this.c = c;
+    }
+
+    public Drawable getDrawable(String source) {
+        int id = c.getResources().getIdentifier(source, "drawable", c.getPackageName());
+
+        if (id == 0) {
+            // the drawable resource wasn't found in our package, maybe it is a stock android drawable?
+            id = c.getResources().getIdentifier(source, "drawable", "android");
+        }
+
+        if (id == 0) {
+            // prevent a crash if the resource still can't be found
+            Log.e(HtmlTextView.TAG, "source could not be found: " + source);
+            return null;
+        } else {
+            Drawable d = c.getResources().getDrawable(id);
+            d.setBounds(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());
+            return d;
+        }
+    }
+
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/UrlImageGetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/UrlImageGetter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/UrlImageGetter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/UrlImageGetter.java	(date 1467729866000)
@@ -0,0 +1,108 @@
+package ibmmobileappbuilder.views.org.sufficientlysecure.htmltextview;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.DefaultHttpClient;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.os.AsyncTask;
+import android.text.Html.ImageGetter;
+import android.view.View;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+
+public class UrlImageGetter implements ImageGetter {
+
+    Context c;
+
+    View container;
+
+    /**
+     * Construct the URLImageParser which will execute AsyncTask and refresh the container
+     */
+    public UrlImageGetter(View t, Context c) {
+        this.c = c;
+        this.container = t;
+    }
+
+    public Drawable getDrawable(String source) {
+        UrlDrawable urlDrawable = new UrlDrawable();
+
+        // get the actual source
+        ImageGetterAsyncTask asyncTask = new ImageGetterAsyncTask(urlDrawable);
+
+        asyncTask.execute(source);
+
+        // return reference to URLDrawable which will asynchronously load the image specified in the src tag
+        return urlDrawable;
+    }
+
+    public class ImageGetterAsyncTask extends AsyncTask<String, Void, Drawable> {
+
+        UrlDrawable urlDrawable;
+
+        public ImageGetterAsyncTask(UrlDrawable d) {
+            this.urlDrawable = d;
+        }
+
+        @Override
+        protected Drawable doInBackground(String... params) {
+            String source = params[0];
+            return fetchDrawable(source);
+        }
+
+        @Override
+        protected void onPostExecute(Drawable result) {
+            // set the correct bound according to the result from HTTP call
+            urlDrawable.setBounds(0, 0, 0 + result.getIntrinsicWidth(),
+                    0 + result.getIntrinsicHeight());
+
+            // change the reference of the current drawable to the result from the HTTP call
+            urlDrawable.drawable = result;
+
+            // redraw the image by invalidating the container
+            UrlImageGetter.this.container.invalidate();
+        }
+
+        /**
+         * Get the Drawable from URL
+         */
+        public Drawable fetchDrawable(String urlString) {
+            try {
+                InputStream is = fetch(urlString);
+                Drawable drawable = Drawable.createFromStream(is, "src");
+                drawable.setBounds(0, 0, 0 + drawable.getIntrinsicWidth(),
+                        0 + drawable.getIntrinsicHeight());
+                return drawable;
+            } catch (Exception e) {
+                return null;
+            }
+        }
+
+        private InputStream fetch(String urlString) throws MalformedURLException, IOException {
+            DefaultHttpClient httpClient = new DefaultHttpClient();
+            HttpGet request = new HttpGet(urlString);
+            HttpResponse response = httpClient.execute(request);
+            return response.getEntity().getContent();
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public class UrlDrawable extends BitmapDrawable {
+
+        protected Drawable drawable;
+
+        @Override
+        public void draw(Canvas canvas) {
+            // override the draw to facilitate refresh function later
+            if (drawable != null) {
+                drawable.draw(canvas);
+            }
+        }
+    }
+} 
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/JellyBeanSpanFixTextView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/JellyBeanSpanFixTextView.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/JellyBeanSpanFixTextView.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/views/org/sufficientlysecure/htmltextview/JellyBeanSpanFixTextView.java	(date 1467729866000)
@@ -0,0 +1,200 @@
+package ibmmobileappbuilder.views.org.sufficientlysecure.htmltextview;
+
+import android.content.Context;
+import android.text.SpannableStringBuilder;
+import android.text.Spanned;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * <p/>
+ * A {@link TextView} that insert spaces around its text spans where needed to
+ * prevent
+ * {@link IndexOutOfBoundsException} in {@link #onMeasure(int, int)} on Jelly Bean.
+ * <p/>
+ * When {@link #onMeasure(int, int)} throws an exception, we try to fix the text by adding spaces
+ * around spans, until it works again. We then try removing some of the added spans, to minimize
+ * the
+ * insertions.
+ * <p/>
+ * The fix is time consuming (a few ms, it depends on the size of your text), but it should only
+ * happen once per text change.
+ * <p/>
+ * See http://code.google.com/p/android/issues/detail?id=35466
+ */
+public class JellyBeanSpanFixTextView extends TextView {
+
+    private static class FixingResult {
+
+        public final boolean fixed;
+
+        public final List<Object> spansWithSpacesBefore;
+
+        public final List<Object> spansWithSpacesAfter;
+
+        public static FixingResult fixed(List<Object> spansWithSpacesBefore,
+                List<Object> spansWithSpacesAfter) {
+            return new FixingResult(true, spansWithSpacesBefore, spansWithSpacesAfter);
+        }
+
+        public static FixingResult notFixed() {
+            return new FixingResult(false, null, null);
+        }
+
+        private FixingResult(boolean fixed, List<Object> spansWithSpacesBefore,
+                List<Object> spansWithSpacesAfter) {
+            this.fixed = fixed;
+            this.spansWithSpacesBefore = spansWithSpacesBefore;
+            this.spansWithSpacesAfter = spansWithSpacesAfter;
+        }
+    }
+
+    public JellyBeanSpanFixTextView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    public JellyBeanSpanFixTextView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public JellyBeanSpanFixTextView(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        try {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        } catch (IndexOutOfBoundsException e) {
+            fixOnMeasure(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+
+    /**
+     * If possible, fixes the Spanned text by adding spaces around spans when needed.
+     */
+    private void fixOnMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        CharSequence text = getText();
+        if (text instanceof Spanned) {
+            SpannableStringBuilder builder = new SpannableStringBuilder(text);
+            fixSpannedWithSpaces(builder, widthMeasureSpec, heightMeasureSpec);
+        } else {
+            if (HtmlTextView.DEBUG) {
+                Log.d(HtmlTextView.TAG, "The text isn't a Spanned");
+            }
+            fallbackToString(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+
+    /**
+     * Add spaces around spans until the text is fixed, and then removes the unneeded spaces
+     */
+    private void fixSpannedWithSpaces(SpannableStringBuilder builder, int widthMeasureSpec,
+            int heightMeasureSpec) {
+        long startFix = System.currentTimeMillis();
+
+        FixingResult result = addSpacesAroundSpansUntilFixed(builder, widthMeasureSpec,
+                heightMeasureSpec);
+
+        if (result.fixed) {
+            removeUnneededSpaces(widthMeasureSpec, heightMeasureSpec, builder, result);
+        } else {
+            fallbackToString(widthMeasureSpec, heightMeasureSpec);
+        }
+
+        if (HtmlTextView.DEBUG) {
+            long fixDuration = System.currentTimeMillis() - startFix;
+            Log.d(HtmlTextView.TAG, "fixSpannedWithSpaces() duration in ms: " + fixDuration);
+        }
+    }
+
+    private FixingResult addSpacesAroundSpansUntilFixed(SpannableStringBuilder builder,
+            int widthMeasureSpec, int heightMeasureSpec) {
+
+        Object[] spans = builder.getSpans(0, builder.length(), Object.class);
+        List<Object> spansWithSpacesBefore = new ArrayList<Object>(spans.length);
+        List<Object> spansWithSpacesAfter = new ArrayList<Object>(spans.length);
+
+        for (Object span : spans) {
+            int spanStart = builder.getSpanStart(span);
+            if (isNotSpace(builder, spanStart - 1)) {
+                builder.insert(spanStart, " ");
+                spansWithSpacesBefore.add(span);
+            }
+
+            int spanEnd = builder.getSpanEnd(span);
+            if (isNotSpace(builder, spanEnd)) {
+                builder.insert(spanEnd, " ");
+                spansWithSpacesAfter.add(span);
+            }
+
+            try {
+                setTextAndMeasure(builder, widthMeasureSpec, heightMeasureSpec);
+                return FixingResult.fixed(spansWithSpacesBefore, spansWithSpacesAfter);
+            } catch (IndexOutOfBoundsException notFixed) {
+            }
+        }
+        if (HtmlTextView.DEBUG) {
+            Log.d(HtmlTextView.TAG, "Could not fix the Spanned by adding spaces around spans");
+        }
+        return FixingResult.notFixed();
+    }
+
+    private boolean isNotSpace(CharSequence text, int where) {
+        if (where < 0) {
+            return true;
+        }
+        return text.charAt(where) != ' ';
+    }
+
+    private void setTextAndMeasure(CharSequence text, int widthMeasureSpec, int heightMeasureSpec) {
+        setText(text);
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    }
+
+    private void removeUnneededSpaces(int widthMeasureSpec, int heightMeasureSpec,
+            SpannableStringBuilder builder, FixingResult result) {
+
+        for (Object span : result.spansWithSpacesAfter) {
+            int spanEnd = builder.getSpanEnd(span);
+            builder.delete(spanEnd, spanEnd + 1);
+            try {
+                setTextAndMeasure(builder, widthMeasureSpec, heightMeasureSpec);
+            } catch (IndexOutOfBoundsException ignored) {
+                builder.insert(spanEnd, " ");
+            }
+        }
+
+        boolean needReset = true;
+        for (Object span : result.spansWithSpacesBefore) {
+            int spanStart = builder.getSpanStart(span);
+            builder.delete(spanStart - 1, spanStart);
+            try {
+                setTextAndMeasure(builder, widthMeasureSpec, heightMeasureSpec);
+                needReset = false;
+            } catch (IndexOutOfBoundsException ignored) {
+                needReset = true;
+                int newSpanStart = spanStart - 1;
+                builder.insert(newSpanStart, " ");
+            }
+        }
+
+        if (needReset) {
+            setText(builder);
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+
+    private void fallbackToString(int widthMeasureSpec, int heightMeasureSpec) {
+        if (HtmlTextView.DEBUG) {
+            Log.d(HtmlTextView.TAG, "Fallback to unspanned text");
+        }
+        String fallbackText = getText().toString();
+        setTextAndMeasure(fallbackText, widthMeasureSpec, heightMeasureSpec);
+    }
+
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/OpenUriAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/OpenUriAction.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/OpenUriAction.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/OpenUriAction.java	(date 1467729866000)
@@ -0,0 +1,44 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+import ibmmobileappbuilder.core.R;
+
+import static android.content.Intent.createChooser;
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+public class OpenUriAction implements Action {
+
+    private final Uri uri;
+    private final IntentLauncher intentLauncher;
+
+
+    public OpenUriAction(IntentLauncher intentLauncher, @NonNull String uri) {
+        this.intentLauncher = intentLauncher;
+        Uri parsedUri = Uri.parse(uri);
+        if (parsedUri.getScheme() == null) {
+            parsedUri = Uri.parse("http://" + uri);
+        }
+        this.uri = parsedUri;
+    }
+
+    @Override
+    public void execute(@NonNull Context context) {
+        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        intentLauncher.start(context, createChooser(intent, context.getString(R.string.open_url)));
+    }
+
+    @NonNull
+    @Override
+    public AnalyticsInfo getAnalyticsInfo() {
+        return analyticsInfo()
+                .withAction("Open link")
+                .withTarget(uri.toString())
+                .build();
+    }
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/ActivityIntentLauncher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/ActivityIntentLauncher.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/ActivityIntentLauncher.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/ActivityIntentLauncher.java	(date 1467729866000)
@@ -0,0 +1,13 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.support.annotation.NonNull;
+
+public class ActivityIntentLauncher implements IntentLauncher {
+
+    @Override
+    public void start(@NonNull Context context, @NonNull Intent intent) {
+        context.startActivity(intent);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/PhoneAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/PhoneAction.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/PhoneAction.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/PhoneAction.java	(date 1467729866000)
@@ -0,0 +1,42 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+import ibmmobileappbuilder.core.R;
+
+import static android.content.Intent.createChooser;
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+/**
+ * Mail sender action
+ */
+public class PhoneAction implements Action {
+
+    private final IntentLauncher intentLauncher;
+    private final String phoneNumber;
+
+    public PhoneAction(IntentLauncher intentLauncher, String phoneNumber) {
+        this.intentLauncher = intentLauncher;
+        this.phoneNumber = phoneNumber;
+    }
+
+    @Override
+    public void execute(@NonNull Context context) {
+        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + phoneNumber));
+
+        intentLauncher.start(context, createChooser(intent, context.getString(R.string.call)));
+    }
+
+    @NonNull
+    @Override
+    public AnalyticsInfo getAnalyticsInfo() {
+        return analyticsInfo()
+                .withAction("Call to phone")
+                .withTarget(phoneNumber)
+                .build();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MapsAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MapsAction.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MapsAction.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MapsAction.java	(date 1467729866000)
@@ -0,0 +1,41 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+import ibmmobileappbuilder.core.R;
+
+import static android.content.Intent.createChooser;
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+public class MapsAction implements Action {
+
+    private final IntentLauncher intentLauncher;
+    private final String uri;
+
+    public MapsAction(IntentLauncher intentLauncher, String uri) {
+        this.intentLauncher = intentLauncher;
+        this.uri = uri;
+    }
+
+    @Override
+    public void execute(@NonNull Context context) {
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));
+
+        intentLauncher.start(context,
+                createChooser(intent, context.getString(R.string.find_on_map))
+        );
+    }
+
+    @NonNull
+    @Override
+    public AnalyticsInfo getAnalyticsInfo() {
+        return analyticsInfo()
+                .withAction("Find on map")
+                .withTarget(uri)
+                .build();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/StartActivityAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/StartActivityAction.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/StartActivityAction.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/StartActivityAction.java	(date 1467729866000)
@@ -0,0 +1,59 @@
+package ibmmobileappbuilder.actions;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+public class StartActivityAction implements Action {
+
+    private final Class clazz;
+    private final Bundle bundle;
+    private final int requestCode;
+
+    public StartActivityAction(Class clazz) {
+        this(clazz, 0);
+    }
+
+    public StartActivityAction(Class clazz, int requestCode) {
+        this(clazz, null, requestCode);
+    }
+
+    public StartActivityAction(Class clazz, Bundle bundle) {
+        this(clazz, bundle, 0);
+    }
+
+    public StartActivityAction(Class clazz, Bundle bundle, int requestCode) {
+        this.clazz = clazz;
+        this.bundle = bundle;
+        this.requestCode = requestCode;
+    }
+
+    @Override
+    public void execute(@NonNull Context context) {
+        Intent intent = new Intent(context, this.clazz);
+        if (bundle != null) {
+            intent.putExtras(bundle);
+        }
+
+        if (requestCode != 0) {
+            ((Activity) context).startActivityForResult(intent, requestCode);
+        } else {
+            context.startActivity(intent);
+        }
+    }
+
+    @NonNull
+    @Override
+    public AnalyticsInfo getAnalyticsInfo() {
+        return analyticsInfo()
+                .withAction("Start activity")
+                .withTarget(clazz.getSimpleName())
+                .build();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/VideoAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/VideoAction.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/VideoAction.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/VideoAction.java	(date 1467729866000)
@@ -0,0 +1,41 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+import ibmmobileappbuilder.core.R;
+
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+/**
+ * Play video action
+ */
+public class VideoAction implements Action {
+
+    private final IntentLauncher intentLauncher;
+    private final String link;
+
+    public VideoAction(IntentLauncher intentLauncher, String link) {
+        this.intentLauncher = intentLauncher;
+        this.link = link;
+    }
+
+    @Override
+    public void execute(@NonNull Context context) {
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(link));
+
+        intentLauncher.start(context, Intent.createChooser(intent, context.getString(R.string.play_video)));
+    }
+
+    @NonNull
+    @Override
+    public AnalyticsInfo getAnalyticsInfo() {
+        return analyticsInfo()
+                .withAction("Play video")
+                .withTarget(link)
+                .build();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/Action.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/Action.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/Action.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/Action.java	(date 1467729866000)
@@ -0,0 +1,16 @@
+package ibmmobileappbuilder.actions;
+
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+
+public interface Action {
+
+    void execute(@NonNull Context context);
+
+    @NonNull
+    AnalyticsInfo getAnalyticsInfo();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MailAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MailAction.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MailAction.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/MailAction.java	(date 1467729866000)
@@ -0,0 +1,48 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+import ibmmobileappbuilder.core.R;
+
+import static android.content.Intent.createChooser;
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+/**
+ * Mail sender action
+ */
+public class MailAction implements Action {
+
+    private final String mail;
+    private final IntentLauncher intentLauncher;
+
+    public MailAction(IntentLauncher intentLauncher, String mail) {
+        this.intentLauncher = intentLauncher;
+        if (mail != null && !mail.startsWith("mailto:")) {
+            this.mail = "mailto:" + mail;
+        } else {
+            this.mail = mail;
+        }
+    }
+
+    @Override
+    public void execute(@NonNull Context context) {
+        Intent intent = new Intent(Intent.ACTION_SENDTO, Uri.parse(mail));
+
+        intentLauncher.start(context,
+                createChooser(intent, context.getString(R.string.send_email))
+        );
+    }
+
+    @NonNull
+    @Override
+    public AnalyticsInfo getAnalyticsInfo() {
+        return analyticsInfo()
+                .withAction("Send email")
+                .withTarget(mail)
+                .build();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/SelectionDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/SelectionDialog.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/SelectionDialog.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/SelectionDialog.java	(date 1467729866000)
@@ -0,0 +1,63 @@
+package ibmmobileappbuilder.dialogs;
+
+import android.support.v4.app.DialogFragment;
+
+import java.util.ArrayList;
+
+/**
+ * Abstract base class for selection dialogs.
+ * Developers must subclass appropriately. This is useful for master-detail and selection scenarios
+ *
+ * @see ValuesSelectionDialog
+ */
+public abstract class SelectionDialog extends DialogFragment {
+    public static final String INITIAL_VALUES = "InitialValues";
+
+    protected SelectionListener selectionListener;
+    protected boolean multipleChoice;
+    protected boolean haveSearch;
+    protected String title;
+
+    /**
+     * If this dialog will allow multiple choices
+     *
+     * @param multipleChoice true to enable multiple choices
+     */
+    public SelectionDialog setMultipleChoice(boolean multipleChoice) {
+        this.multipleChoice = multipleChoice;
+        return this;
+    }
+
+    /**
+     * Enable a search edit text in this selection dialog.
+     *
+     * @param hs true to enable searches
+     */
+    public SelectionDialog setHaveSearch(boolean hs) {
+        this.haveSearch = hs;
+        return this;
+    }
+
+    public SelectionDialog setTitle(String title) {
+        this.title = title;
+        return this;
+    }
+
+
+    /**
+     * The listener to be called when a selection is done (single or multiple)
+     *
+     * @param listener an object implementing the {@link SelectionListener} interface.
+     */
+    public void setSelectionListener(SelectionListener listener) {
+        this.selectionListener = listener;
+    }
+
+    /**
+     * interface for dialog dismiss actions
+     */
+    public interface SelectionListener {
+
+        void onSelected(ArrayList<String> terms);
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/IntentLauncher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/IntentLauncher.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/IntentLauncher.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/actions/IntentLauncher.java	(date 1467729866000)
@@ -0,0 +1,10 @@
+package ibmmobileappbuilder.actions;
+
+import android.content.Context;
+import android.content.Intent;
+import android.support.annotation.NonNull;
+
+public interface IntentLauncher {
+
+    void start(@NonNull Context context, @NonNull Intent intent);
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/MyApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/MyApplication.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/MyApplication.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/MyApplication.java	(date 1475330010000)
@@ -0,0 +1,21 @@
+
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254;
+
+import android.app.Application;
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+
+/**
+ * You can use this as a global place to keep application-level resources
+ * such as singletons, services, etc.
+ */
+public class MyApplication extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        ApplicationInjector.setApplicationContext(this);
+    }
+}
+
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSSchemaItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSSchemaItem.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSSchemaItem.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSSchemaItem.java	(date 1475330010000)
@@ -0,0 +1,52 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+
+import ibmmobileappbuilder.mvp.model.IdentifiableBean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import com.google.gson.annotations.SerializedName;
+
+public class Data1DSSchemaItem implements Parcelable, IdentifiableBean {
+
+    @SerializedName("id") public String id;
+    @SerializedName("name") public String name;
+    @SerializedName("type") public String type;
+
+    @Override
+    public String getIdentifiableId() {
+      return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(id);
+        dest.writeString(name);
+        dest.writeString(type);
+    }
+
+    public static final Creator<Data1DSSchemaItem> CREATOR = new Creator<Data1DSSchemaItem>() {
+        @Override
+        public Data1DSSchemaItem createFromParcel(Parcel in) {
+            Data1DSSchemaItem item = new Data1DSSchemaItem();
+
+            item.id = in.readString();
+            item.name = in.readString();
+            item.type = in.readString();
+            return item;
+        }
+
+        @Override
+        public Data1DSSchemaItem[] newArray(int size) {
+            return new Data1DSSchemaItem[size];
+        }
+    };
+
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ImagePickerOptionsDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ImagePickerOptionsDialog.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ImagePickerOptionsDialog.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ImagePickerOptionsDialog.java	(date 1467729866000)
@@ -0,0 +1,72 @@
+package ibmmobileappbuilder.dialogs;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.DialogFragment;
+
+import java.util.Arrays;
+
+import ibmmobileappbuilder.core.R;
+
+public class ImagePickerOptionsDialog extends DialogFragment{
+    boolean removeEnabled;
+    private OnOptionSelectedListener mListener;
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), getTheme());
+
+        String[] actions = getResources().getStringArray(R.array.image_picker_actions);
+        if(!getRemoveEnabled()){
+            actions = Arrays.copyOf(actions, 2);
+        }
+        builder.setItems(actions, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                OnOptionSelectedListener listener = getListener();
+                if(listener != null) {
+                    switch (which) {
+                        case 0:
+                            listener.fromCamera();
+                            break;
+                        case 1:
+                            listener.fromStorage();
+                            break;
+                        case 2:
+                            listener.remove();
+                            break;
+                    }
+                }
+
+            }
+        });
+
+        return builder.create();
+    }
+
+    public void setRemoveEnabled(boolean re){
+        this.removeEnabled = re;
+    }
+
+    public boolean getRemoveEnabled(){
+        return removeEnabled;
+    }
+
+    public void setListener(OnOptionSelectedListener listener){
+        mListener = listener;
+    }
+
+    public OnOptionSelectedListener getListener(){
+        return mListener;
+    }
+
+    public interface OnOptionSelectedListener{
+        void fromStorage();
+        void fromCamera();
+        void remove();
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ValuesSelectionDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ValuesSelectionDialog.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ValuesSelectionDialog.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/dialogs/ValuesSelectionDialog.java	(date 1467729866000)
@@ -0,0 +1,211 @@
+package ibmmobileappbuilder.dialogs;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.SearchView;
+import android.util.SparseBooleanArray;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.Distinct;
+import ibmmobileappbuilder.ds.SearchOptions;
+
+/**
+ * Selection dialog that takes unique values from a datasource column. Useful for implementing filters
+ */
+public class ValuesSelectionDialog extends SelectionDialog {
+    private ArrayAdapter<String> adapter;
+    private Distinct datasource;
+    private String columnName;
+    private ListView listView;
+    private boolean isFiltering;
+    private ArrayList<String> checkedValues;
+    private boolean canceled;
+    private SearchOptions searchOptions;
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getActivity(),
+                // http://stackoverflow.com/a/28561766/3344594
+                Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT ?
+                        R.style.SelectionDialog :
+                        R.style.SelectionDialog_PreL
+        );
+
+        // Get the layout inflater
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+
+        canceled = false;
+
+        // Set up the listview
+        View view = inflater.inflate(R.layout.selection_dialog, null);
+        listView = (ListView) view.findViewById(android.R.id.list);
+
+        createAdapter();
+        listView.setAdapter(adapter);
+        listView.setChoiceMode(
+                multipleChoice ? AbsListView.CHOICE_MODE_MULTIPLE : AbsListView.CHOICE_MODE_SINGLE
+        );
+
+        if (haveSearch) {
+            SearchView searchView = (SearchView) view.findViewById(R.id.search);
+            searchView.setVisibility(View.VISIBLE);
+
+            searchView.setOnQueryTextListener(
+                    new SearchView.OnQueryTextListener() {
+                        @Override
+                        public boolean onQueryTextSubmit(String s) {
+                            if (!"".equals(s)) {
+                                isFiltering = true;
+                                adapter.getFilter().filter(s);
+
+                                // clear previous selection
+                                listView.clearChoices();
+                                return true;
+                            }
+                            return false;
+                        }
+
+                        @Override
+                        public boolean onQueryTextChange(String s) {
+                            return false;
+                        }
+                    }
+            );
+
+            searchView.setOnCloseListener(
+                    new SearchView.OnCloseListener() {
+                        @Override
+                        public boolean onClose() {
+                            if (isFiltering) {
+                                adapter.getFilter().filter(null);
+                                isFiltering = false;
+                                return true;
+                            }
+                            return false;
+                        }
+                    }
+            );
+        }
+
+        // add an OK button and listener
+        Button okBtn = (Button) view.findViewById(R.id.search_btn);
+        okBtn.setOnClickListener(
+                new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        ValuesSelectionDialog.this.dismiss();
+                    }
+                }
+        );
+
+        if (getArguments() != null) {
+            checkedValues = getArguments().getStringArrayList(INITIAL_VALUES);
+        }
+        builder.setTitle(title)
+                .setView(view);
+
+        if (datasource != null) {
+            datasource.getUniqueValuesFor(columnName,
+                    new Datasource.Listener<List<String>>() {
+                        @Override
+                        public void onSuccess(List<String> objects) {
+                            adapter.clear();
+                            adapter.addAll(new ArrayList<>(objects));
+                        }
+
+                        @Override
+                        public void onFailure(Exception e) {
+                            //TODO notify
+//                            BusProvider.getInstance().post(new DatasourceFailureEvent());
+                            ValuesSelectionDialog.this.dismiss();
+                        }
+                    }
+            );
+        }
+
+        builder.setTitle(title);
+
+        return builder.create();
+    }
+
+    public ValuesSelectionDialog setDatasource(Datasource datasource) {
+        if (!(datasource instanceof Distinct)) {
+            throw new IllegalArgumentException("Datasource must implement Distinct interface");
+        }
+
+        this.datasource = (Distinct) datasource;
+        return this;
+    }
+
+    public ValuesSelectionDialog setSearchOptions(SearchOptions searchOptions) {
+        this.searchOptions = searchOptions;
+        return this;
+    }
+
+    public ValuesSelectionDialog setColumnName(String columnName) {
+        this.columnName = columnName;
+        return this;
+    }
+
+    private void createAdapter() {
+        adapter = new ArrayAdapter<String>(
+                getActivity(),
+                multipleChoice ?
+                        R.layout.dialog_item_multiple_choice :
+                        R.layout.dialog_item_single_choice
+        ) {
+            @Override
+            public View getView(int position, View convertView, ViewGroup parent) {
+                String value = adapter.getItem(position);
+                if (checkedValues != null && checkedValues.contains(value)) {
+                    listView.setItemChecked(position, true);
+                }
+
+                return super.getView(position, convertView, parent);
+            }
+        };
+
+    }
+
+    @Override
+    public void onCancel(final DialogInterface dialog) {
+        super.onCancel(dialog);
+        canceled = true;
+    }
+
+    @Override
+    public void onDismiss(final DialogInterface dialog) {
+        if (!canceled && selectionListener != null) {
+            SparseBooleanArray checked = listView.getCheckedItemPositions();
+            ArrayList<String> res = new ArrayList<>(checked.size());
+            for (int i = 0; i < checked.size(); i++) {
+                if (checked.valueAt(i)) {
+                    res.add(adapter.getItem(checked.keyAt(i)));
+                }
+            }
+
+            // invoke callback
+            selectionListener.onSelected(res);
+        }
+
+        super.onDismiss(dialog);
+    }
+
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSService.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSService.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSService.java	(date 1475330010000)
@@ -0,0 +1,40 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+import java.net.URL;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.R;
+import ibmmobileappbuilder.ds.RestService;
+import ibmmobileappbuilder.util.StringUtils;
+
+/**
+ * "DataDSService" REST Service implementation
+ */
+public class DataDSService extends RestService<DataDSServiceRest>{
+
+    public static DataDSService getInstance(){
+          return new DataDSService();
+    }
+
+    private DataDSService() {
+        super(DataDSServiceRest.class);
+
+    }
+
+    @Override
+    public String getServerUrl() {
+        return "https://ibm-pods.buildup.io";
+    }
+
+    @Override
+    protected String getApiKey() {
+        return "zoOZxMxP";
+    }
+
+    @Override
+    public URL getImageUrl(String path){
+        return StringUtils.parseUrl("https://ibm-pods.buildup.io/app/57ef713e57acb003000664b7",
+                path,
+                "apikey=zoOZxMxP");
+    }
+
+}
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/DatasourceAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/DatasourceAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/DatasourceAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/DatasourceAdapter.java	(date 1467729866000)
@@ -0,0 +1,161 @@
+package ibmmobileappbuilder.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.BaseAdapter;
+
+import java.lang.ref.WeakReference;
+import java.util.List;
+
+import ibmmobileappbuilder.ds.Cache;
+import ibmmobileappbuilder.ds.Datasource;
+
+/**
+ * Adapter backed by a {@link Datasource}.
+ * <p/>
+ * Based on an implementation of {@link BaseAdapter} which uses the new/bind pattern for its views,
+ * <a href="https://gist.github.com/JakeWharton/5423616">
+ * https://gist.github.com/JakeWharton/5423616
+ * </a>. Apache 2.0 licensed.
+ */
+public abstract class DatasourceAdapter<T> extends ArrayAdapter<T> {
+
+
+    private final LayoutInflater inflater;
+    private final int viewId;
+
+    protected final Datasource<T> datasource;
+    protected Callback callback;
+    protected WeakReference<Context> contextWeakReference;
+
+    public DatasourceAdapter(Context context, int viewId, Datasource<T> datasource) {
+        super(context, viewId);
+        this.inflater = LayoutInflater.from(context);
+        this.datasource = datasource;
+        this.viewId = viewId;
+        this.contextWeakReference = new WeakReference<>(context);
+
+        setNotifyOnChange(false); // we want to control when observers will be notified
+    }
+
+    /**
+     * Sets a new callback for operations
+     *
+     * @param c the new callback to register
+     */
+    public void setCallback(Callback c) {
+        this.callback = c;
+    }
+
+    public Callback getCallback() {
+        return callback;
+    }
+
+
+    public void refresh() {
+        refresh(false);
+    }
+
+    /**
+     * Perform a full query to the datasource
+     */
+    public void refresh(boolean forceRefresh) {
+        // invalidate current data
+        if (datasource instanceof Cache) {
+            ((Cache) datasource).invalidate();
+        }
+
+        datasource.getItems(
+                new Datasource.Listener<List<T>>() {
+                    @Override
+                    public void onSuccess(final List<T> result) {
+                        // ensure that datasource callbacks (which may be async) are run in ui thread
+                        runOnActivity(
+                                new Runnable() {
+                                    @Override
+                                    public void run() {
+
+                                        clear();
+                                        addAll(result);
+
+                                        notifyDataSetChanged();
+                                        // signal that the data is available
+                                        if (callback != null) {
+                                            callback.onDataAvailable();
+                                        }
+                                    }
+                                }
+                        );
+                    }
+
+                    @Override
+                    public void onFailure(final Exception e) {
+                        runOnActivity(
+                                new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        // inform the user
+                                        if (callback != null) {
+                                            callback.onDatasourceError(e);
+                                        }
+                                        notifyDatasourceError(e);
+                                        notifyDataSetChanged();
+                                    }
+                                }
+                        );
+                    }
+                }
+        );
+    }
+
+    private void runOnActivity(Runnable runnable) {
+        Activity act = (Activity) contextWeakReference.get();
+        if (act != null) {
+            act.runOnUiThread(runnable);
+        }
+    }
+
+    @Override
+    public final View getView(int position, View view, ViewGroup container) {
+        if (view == null) {
+            view = newView(inflater, position, container);
+            if (view == null) {
+                throw new IllegalStateException("newView result must not be null.");
+            }
+        }
+
+        bindView(getItem(position), position, view);
+        return view;
+    }
+
+    public void notifyDatasourceError(Exception e) {
+
+    }
+
+    /**
+     * Create a new instance of a view for the specified position.
+     */
+    private View newView(LayoutInflater inflater, int position, ViewGroup container) {
+        return inflater.inflate(viewId, container, false);
+    }
+
+    /**
+     * Bind the data for the specified {@code position} to the view.
+     */
+    public abstract void bindView(T item, int position, View view);
+
+    /**
+     * Callback interface for datasource operations. All callbacks will be called on UI Thread
+     */
+    public interface Callback {
+        void onPageRequested();
+
+        void onDataAvailable();
+
+        void onDatasourceError(Exception e);
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/PaginationAwareAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/PaginationAwareAdapter.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/PaginationAwareAdapter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/adapters/PaginationAwareAdapter.java	(date 1467729866000)
@@ -0,0 +1,105 @@
+package ibmmobileappbuilder.adapters;
+
+import android.content.Context;
+import android.util.Log;
+import android.widget.BaseAdapter;
+
+import java.util.List;
+
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.ForceRefreshDatasource;
+import ibmmobileappbuilder.ds.Pagination;
+
+/**
+ * Adapter backed by a {@link Datasource}.
+ * <p/>
+ * Based on an implementation of {@link BaseAdapter} which uses the new/bind pattern for its views,
+ * <a href="https://gist.github.com/JakeWharton/5423616">
+ * https://gist.github.com/JakeWharton/5423616
+ * </a>. Apache 2.0 licensed.
+ */
+public abstract class PaginationAwareAdapter<T> extends DatasourceAdapter<T> {
+
+    private static final String TAG = PaginationAwareAdapter.class.getSimpleName();
+
+    private int currentPage = -1;
+    private boolean reachedEnd;
+
+    public PaginationAwareAdapter(Context context, int viewId, Datasource<T> datasource) {
+        super(context, viewId, datasource);
+    }
+
+    /**
+     * Perform a full query to the datasource
+     */
+    public void refresh(boolean forceRefresh) {
+        // reset vars
+        currentPage = -1;
+        reachedEnd = false;
+
+        // load first page
+        loadNextPage(true, forceRefresh); // clear and load first page
+    }
+
+    public void loadNextPage() {
+        loadNextPage(false);
+    }
+
+    public void loadNextPage(boolean clear) {
+        loadNextPage(clear, false);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void loadNextPage(final boolean clear, boolean forceRefresh) {
+        if (!reachedEnd) {
+            Log.d(TAG, "loading page: " + (currentPage + 1));
+            Pagination<T> pagedDS = (Pagination<T>) datasource;
+            final int pageSize = pagedDS.getPageSize();
+
+            // notify next page is being requested
+            if (callback != null) {
+                callback.onPageRequested();
+            }
+
+            //if clear we are refreshing so we have to force a sync
+            Datasource.Listener<List<T>> paginationListener = new Datasource.Listener<List<T>>() {
+                @Override
+                public void onSuccess(final List<T> result) {
+                    if (result.size() < pageSize) {
+                        reachedEnd = true;
+                    }
+
+                    // clear if it is first page
+                    if (clear) {
+                        clear();
+                    }
+
+                    addAll(result);
+
+                    notifyDataSetChanged();
+                    if (callback != null) {
+                        callback.onDataAvailable();
+                    }
+                }
+
+                @Override
+                public void onFailure(final Exception e) {
+                    // inform the user
+                    notifyDatasourceError(e);
+                    notifyDataSetChanged();
+                    if (callback != null) {
+                        callback.onDatasourceError(e);
+                    }
+                }
+            };
+
+            //TODO this should be able to apply some text searchs
+            if (pagedDS instanceof ForceRefreshDatasource) {
+                ForceRefreshDatasource forceRefreshDs = (ForceRefreshDatasource) pagedDS;
+                forceRefreshDs.getItems(++currentPage, forceRefresh, paginationListener);
+            } else {
+                pagedDS.getItems(++currentPage, paginationListener);
+            }
+        }
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DS.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DS.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DS.java	(date 1475330010000)
@@ -0,0 +1,192 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+
+import ibmmobileappbuilder.ds.Count;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.Distinct;
+import ibmmobileappbuilder.ds.Pagination;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.util.FilterUtils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * "Data1DS" static data source (85495451-eb07-4207-ad04-06cc894f7bc7)
+ */
+public class Data1DS implements Datasource<Data1DSSchemaItem>, Count,
+            Pagination<Data1DSSchemaItem>, Distinct {
+
+    private static final int PAGE_SIZE = 20;
+
+    private SearchOptions searchOptions;
+
+    public static Data1DS getInstance(SearchOptions searchOptions){
+        return new Data1DS(searchOptions);
+    }
+
+    private Data1DS(SearchOptions searchOptions){
+        this.searchOptions = searchOptions;
+    }
+
+    @Override
+    public void getItems(Listener<List<Data1DSSchemaItem>> listener) {
+        listener.onSuccess(Data1DSItems.ITEMS);
+    }
+
+    @Override
+    public int getPageSize(){
+        return PAGE_SIZE;
+    }
+
+    @Override
+    public void getItem(String id, Listener<Data1DSSchemaItem> listener) {
+        final int pos = Integer.parseInt(id);
+        if(Data1DSItems.ITEMS.size() <= pos){
+        	listener.onSuccess(new Data1DSSchemaItem());
+        }
+        else {
+	        Data1DSSchemaItem dc = Data1DSItems.ITEMS.get(pos);
+	        if( dc != null)
+	            listener.onSuccess(dc);
+	        else
+	            listener.onFailure(new IllegalArgumentException("Data1DSSchemaItem not found: " + pos));
+	    }
+    }
+
+    @Override public int getCount(){
+        return Data1DSItems.ITEMS.size();
+    }
+
+    @Override
+    public void getItems(int pagenum, Listener<List<Data1DSSchemaItem>> listener) {
+        int first = pagenum * PAGE_SIZE;
+        int last = first + PAGE_SIZE;
+        ArrayList<Data1DSSchemaItem> result = new ArrayList<Data1DSSchemaItem>();
+        List<Data1DSSchemaItem> filteredList = applySearchOptions(Data1DSItems.ITEMS);
+        if(first < filteredList.size())
+            for (int i = first; (i < last) && (i < filteredList.size()); i++)
+                result.add(filteredList.get(i));
+
+        listener.onSuccess(result);
+    }
+
+    @Override
+    public void onSearchTextChanged(String s){
+        searchOptions.setSearchText(s);
+    }
+
+    @Override
+    public void addFilter(Filter filter){
+        searchOptions.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        searchOptions.setFilters(null);
+    }
+
+    private List<Data1DSSchemaItem> applySearchOptions(List<Data1DSSchemaItem> result) {
+        List<Data1DSSchemaItem> filteredList = result;
+
+        //Searching options
+        String searchText = searchOptions.getSearchText();
+
+        if(searchOptions.getFixedFilters() != null)
+            filteredList = applyFilters(filteredList, searchOptions.getFixedFilters());
+
+        if(searchOptions.getFilters() != null)
+            filteredList = applyFilters(filteredList, searchOptions.getFilters());
+
+        if (searchText != null && !"".equals(searchText))
+            filteredList = applySearch(filteredList, searchText);
+
+        //Sorting options
+        Comparator comparator = searchOptions.getSortComparator();
+        if (comparator != null) {
+            if (searchOptions.isSortAscending()) {
+                Collections.sort(filteredList, comparator);
+            } else {
+                Collections.sort(filteredList, Collections.reverseOrder(comparator));
+            }
+        }
+
+        return filteredList;
+    }
+
+    private List<Data1DSSchemaItem> applySearch(List<Data1DSSchemaItem> items, String searchText) {
+        List<Data1DSSchemaItem> filteredList = new ArrayList<>();
+
+        for (Data1DSSchemaItem item : items) {
+                        
+            if (FilterUtils.searchInString(item.id, searchText) ||
+            FilterUtils.searchInString(item.name, searchText) ||
+            FilterUtils.searchInString(item.type, searchText))
+            {
+                filteredList.add(item);
+            }
+        }
+
+        return filteredList;
+
+    }
+
+    private List<Data1DSSchemaItem> applyFilters(List<Data1DSSchemaItem> items, List<Filter> filters) {
+        List<Data1DSSchemaItem> filteredList = new ArrayList<>();
+
+        for (Data1DSSchemaItem item : items) {
+            if (
+                FilterUtils.applyFilters("id", item.id, filters) &&
+                FilterUtils.applyFilters("name", item.name, filters) &&
+                FilterUtils.applyFilters("type", item.type, filters)
+                ){
+
+                filteredList.add(item);
+            }
+        }
+
+        return filteredList;
+    }
+
+    // Distinct interface
+
+    @Override
+    public void getUniqueValuesFor(String columnName, Listener<List<String>> listener) {
+        List<Data1DSSchemaItem> filteredList = applySearchOptions(Data1DSItems.ITEMS);
+        listener.onSuccess(mapItems(filteredList, columnName));
+    }
+
+    private List<String> mapItems(List<Data1DSSchemaItem> items, String columnName){
+        // return only unique values
+        ArrayList<String> res = new ArrayList();
+        for (Data1DSSchemaItem item: items){
+            String mapped = mapItem(item, columnName);
+            if(mapped != null && !res.contains(mapped))
+                res.add(mapped);
+        }
+
+        return res;
+    }
+
+    private String mapItem(Data1DSSchemaItem item, String columnName){
+        // get fields
+        switch (columnName){
+                        
+            case "id":
+                return item.id;
+            
+            case "name":
+                return item.name;
+            
+            case "type":
+                return item.type;
+            default:
+               return null;
+        }
+    }
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DefaultLoginService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DefaultLoginService.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DefaultLoginService.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DefaultLoginService.java	(date 1467729866000)
@@ -0,0 +1,98 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.services;
+
+import android.os.AsyncTask;
+import android.util.Base64;
+import android.util.Log;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import ibmmobileappbuilder.util.LoginUtils;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Represents an asynchronous login/registration task used to authenticate
+ * the user.
+ */
+public class DefaultLoginService extends AsyncTask<Void, Void, Map<String, String>>
+        implements LoginService {
+
+    private String mEmail;
+
+    private String mPassword;
+
+    private String mServerUrl;
+
+    private HttpClient httpclient;
+
+    public DefaultLoginService(String serverUrl) {
+        mServerUrl = serverUrl;
+        httpclient = new DefaultHttpClient();
+    }
+
+    @Override
+    protected Map<String, String> doInBackground(Void... params) {
+
+        HttpUriRequest request = new HttpPost(mServerUrl);
+        String credentials = mEmail + ":" + mPassword;
+        String base64EncodedCredentials = Base64
+                .encodeToString(credentials.getBytes(), Base64.NO_WRAP);
+        request.addHeader("Authorization", "Basic " + base64EncodedCredentials);
+        HttpResponse response = null;
+        Map<String, String> responseParams = new HashMap<String, String>();
+
+        try {
+            response = httpclient.execute(request);
+        } catch (IOException e) {
+            analyticsReporter(getApplicationContext()).sendHandledException(
+                    "DefaultLoginService",
+                    "Client execute",
+                    e
+            );
+            Log.e("clientExecute", e.getMessage());
+        }
+
+        if (response != null && response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
+
+            String line = LoginUtils.getResponseString(response);
+            JSONObject json = LoginUtils.parseJSON(line);
+
+            try {
+                responseParams.put(LoginUtils.EXPIRATION_TIME, json.getString("expirationTime"));
+                responseParams.put(LoginUtils.TOKEN, json.getString("token"));
+            } catch (JSONException e) {
+                analyticsReporter(getApplicationContext()).sendHandledException(
+                        "DefaultLoginService",
+                        "jsonGetLong",
+                        e
+                );
+                Log.e("jsonGetLong", e.getMessage());
+            }
+        }
+        return responseParams;
+    }
+
+    @Override
+    public void attemptLogin(String email, String password) {
+        this.mEmail = email;
+        this.mPassword = password;
+        this.execute();
+    }
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDS.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDS.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDS.java	(date 1475330010000)
@@ -0,0 +1,198 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+
+import ibmmobileappbuilder.ds.Count;
+import ibmmobileappbuilder.ds.Datasource;
+import ibmmobileappbuilder.ds.Distinct;
+import ibmmobileappbuilder.ds.Pagination;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.util.FilterUtils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * "TravelDestinationDS" static data source (d915ae74-1c01-493d-93ff-1fd5831a3e91)
+ */
+public class TravelDestinationDS implements Datasource<TravelDestinationDSSchemaItem>, Count,
+            Pagination<TravelDestinationDSSchemaItem>, Distinct {
+
+    private static final int PAGE_SIZE = 20;
+
+    private SearchOptions searchOptions;
+
+    public static TravelDestinationDS getInstance(SearchOptions searchOptions){
+        return new TravelDestinationDS(searchOptions);
+    }
+
+    private TravelDestinationDS(SearchOptions searchOptions){
+        this.searchOptions = searchOptions;
+    }
+
+    @Override
+    public void getItems(Listener<List<TravelDestinationDSSchemaItem>> listener) {
+        listener.onSuccess(TravelDestinationDSItems.ITEMS);
+    }
+
+    @Override
+    public int getPageSize(){
+        return PAGE_SIZE;
+    }
+
+    @Override
+    public void getItem(String id, Listener<TravelDestinationDSSchemaItem> listener) {
+        final int pos = Integer.parseInt(id);
+        if(TravelDestinationDSItems.ITEMS.size() <= pos){
+        	listener.onSuccess(new TravelDestinationDSSchemaItem());
+        }
+        else {
+	        TravelDestinationDSSchemaItem dc = TravelDestinationDSItems.ITEMS.get(pos);
+	        if( dc != null)
+	            listener.onSuccess(dc);
+	        else
+	            listener.onFailure(new IllegalArgumentException("TravelDestinationDSSchemaItem not found: " + pos));
+	    }
+    }
+
+    @Override public int getCount(){
+        return TravelDestinationDSItems.ITEMS.size();
+    }
+
+    @Override
+    public void getItems(int pagenum, Listener<List<TravelDestinationDSSchemaItem>> listener) {
+        int first = pagenum * PAGE_SIZE;
+        int last = first + PAGE_SIZE;
+        ArrayList<TravelDestinationDSSchemaItem> result = new ArrayList<TravelDestinationDSSchemaItem>();
+        List<TravelDestinationDSSchemaItem> filteredList = applySearchOptions(TravelDestinationDSItems.ITEMS);
+        if(first < filteredList.size())
+            for (int i = first; (i < last) && (i < filteredList.size()); i++)
+                result.add(filteredList.get(i));
+
+        listener.onSuccess(result);
+    }
+
+    @Override
+    public void onSearchTextChanged(String s){
+        searchOptions.setSearchText(s);
+    }
+
+    @Override
+    public void addFilter(Filter filter){
+        searchOptions.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        searchOptions.setFilters(null);
+    }
+
+    private List<TravelDestinationDSSchemaItem> applySearchOptions(List<TravelDestinationDSSchemaItem> result) {
+        List<TravelDestinationDSSchemaItem> filteredList = result;
+
+        //Searching options
+        String searchText = searchOptions.getSearchText();
+
+        if(searchOptions.getFixedFilters() != null)
+            filteredList = applyFilters(filteredList, searchOptions.getFixedFilters());
+
+        if(searchOptions.getFilters() != null)
+            filteredList = applyFilters(filteredList, searchOptions.getFilters());
+
+        if (searchText != null && !"".equals(searchText))
+            filteredList = applySearch(filteredList, searchText);
+
+        //Sorting options
+        Comparator comparator = searchOptions.getSortComparator();
+        if (comparator != null) {
+            if (searchOptions.isSortAscending()) {
+                Collections.sort(filteredList, comparator);
+            } else {
+                Collections.sort(filteredList, Collections.reverseOrder(comparator));
+            }
+        }
+
+        return filteredList;
+    }
+
+    private List<TravelDestinationDSSchemaItem> applySearch(List<TravelDestinationDSSchemaItem> items, String searchText) {
+        List<TravelDestinationDSSchemaItem> filteredList = new ArrayList<>();
+
+        for (TravelDestinationDSSchemaItem item : items) {
+                        
+            if (FilterUtils.searchInString(item.id, searchText) ||
+            FilterUtils.searchInString(item.text1, searchText) ||
+            FilterUtils.searchInString(item.text2, searchText) ||
+            FilterUtils.searchInString(item.text3, searchText))
+            {
+                filteredList.add(item);
+            }
+        }
+
+        return filteredList;
+
+    }
+
+    private List<TravelDestinationDSSchemaItem> applyFilters(List<TravelDestinationDSSchemaItem> items, List<Filter> filters) {
+        List<TravelDestinationDSSchemaItem> filteredList = new ArrayList<>();
+
+        for (TravelDestinationDSSchemaItem item : items) {
+            if (
+                FilterUtils.applyFilters("id", item.id, filters) &&
+                FilterUtils.applyFilters("text1", item.text1, filters) &&
+                FilterUtils.applyFilters("text2", item.text2, filters) &&
+                FilterUtils.applyFilters("picture", item.picture, filters) &&
+                FilterUtils.applyFilters("text3", item.text3, filters)
+                ){
+
+                filteredList.add(item);
+            }
+        }
+
+        return filteredList;
+    }
+
+    // Distinct interface
+
+    @Override
+    public void getUniqueValuesFor(String columnName, Listener<List<String>> listener) {
+        List<TravelDestinationDSSchemaItem> filteredList = applySearchOptions(TravelDestinationDSItems.ITEMS);
+        listener.onSuccess(mapItems(filteredList, columnName));
+    }
+
+    private List<String> mapItems(List<TravelDestinationDSSchemaItem> items, String columnName){
+        // return only unique values
+        ArrayList<String> res = new ArrayList();
+        for (TravelDestinationDSSchemaItem item: items){
+            String mapped = mapItem(item, columnName);
+            if(mapped != null && !res.contains(mapped))
+                res.add(mapped);
+        }
+
+        return res;
+    }
+
+    private String mapItem(TravelDestinationDSSchemaItem item, String columnName){
+        // get fields
+        switch (columnName){
+                        
+            case "id":
+                return item.id;
+            
+            case "text1":
+                return item.text1;
+            
+            case "text2":
+                return item.text2;
+            
+            case "text3":
+                return item.text3;
+            default:
+               return null;
+        }
+    }
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/LoginService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/LoginService.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/LoginService.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/LoginService.java	(date 1467729866000)
@@ -0,0 +1,14 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.services;
+
+/**
+ * Base interface for a login service
+ */
+public interface LoginService {
+
+    void attemptLogin(String email, String password);
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSItems.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSItems.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSItems.java	(date 1475330010000)
@@ -0,0 +1,20 @@
+
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+import java.net.URL;
+import ibmmobileappbuilder.util.StringUtils;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.R;
+import java.util.ArrayList;
+import java.util.List;
+import ibmmobileappbuilder.util.StringUtils;
+
+// TravelDestinationDSSchemaItem static data
+public class TravelDestinationDSItems{
+
+    public static List<TravelDestinationDSSchemaItem> ITEMS = new ArrayList<TravelDestinationDSSchemaItem>();
+    public static void addItem(TravelDestinationDSSchemaItem item) {
+        ITEMS.add(item);
+    }
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/RefreshBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/RefreshBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/RefreshBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/RefreshBehavior.java	(date 1467729866000)
@@ -0,0 +1,34 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ui.Refreshable;
+
+/**
+ * Add refresh pattern to lists
+ */
+public class RefreshBehavior extends NoOpBehavior {
+
+    private Refreshable refreshable;
+
+    public RefreshBehavior(Refreshable fragment) {
+        refreshable = fragment;
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        inflater.inflate(R.menu.refresh_menu, menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == R.id.action_refresh) {
+            refreshable.refresh();
+            return true;
+        }
+        return false;
+    }
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDS.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDS.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDS.java	(date 1475330010000)
@@ -0,0 +1,201 @@
+
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+
+import android.content.Context;
+
+import java.net.URL;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
+
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.restds.AppNowDatasource;
+import ibmmobileappbuilder.util.StringUtils;
+import ibmmobileappbuilder.ds.restds.TypedByteArrayUtils;
+
+import retrofit.Callback;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+
+/**
+ * "DataDS" data source. (e37eb8dc-6eb2-4635-8592-5eb9696050e3)
+ */
+public class DataDS extends AppNowDatasource<DataDSItem>{
+
+    // default page size
+    private static final int PAGE_SIZE = 20;
+
+    private DataDSService service;
+
+    public static DataDS getInstance(SearchOptions searchOptions){
+        return new DataDS(searchOptions);
+    }
+
+    private DataDS(SearchOptions searchOptions) {
+        super(searchOptions);
+        this.service = DataDSService.getInstance();
+    }
+
+    @Override
+    public void getItem(String id, final Listener<DataDSItem> listener) {
+        if ("0".equals(id)) {
+                        getItems(new Listener<List<DataDSItem>>() {
+                @Override
+                public void onSuccess(List<DataDSItem> items) {
+                    if(items != null && items.size() > 0) {
+                        listener.onSuccess(items.get(0));
+                    } else {
+                        listener.onSuccess(new DataDSItem());
+                    }
+                }
+
+                @Override
+                public void onFailure(Exception e) {
+                    listener.onFailure(e);
+                }
+            });
+        } else {
+                      service.getServiceProxy().getDataDSItemById(id, new Callback<DataDSItem>() {
+                @Override
+                public void success(DataDSItem result, Response response) {
+                                        listener.onSuccess(result);
+                }
+
+                @Override
+                public void failure(RetrofitError error) {
+                                        listener.onFailure(error);
+                }
+            });
+        }
+    }
+
+    @Override
+    public void getItems(final Listener<List<DataDSItem>> listener) {
+        getItems(0, listener);
+    }
+
+    @Override
+    public void getItems(int pagenum, final Listener<List<DataDSItem>> listener) {
+        String conditions = getConditions(searchOptions, getSearchableFields());
+        int skipNum = pagenum * PAGE_SIZE;
+        String skip = skipNum == 0 ? null : String.valueOf(skipNum);
+        String limit = PAGE_SIZE == 0 ? null: String.valueOf(PAGE_SIZE);
+        String sort = getSort(searchOptions);
+                service.getServiceProxy().queryDataDSItem(
+                skip,
+                limit,
+                conditions,
+                sort,
+                null,
+                null,
+                new Callback<List<DataDSItem>>() {
+            @Override
+            public void success(List<DataDSItem> result, Response response) {
+                                listener.onSuccess(result);
+            }
+
+            @Override
+            public void failure(RetrofitError error) {
+                                listener.onFailure(error);
+            }
+        });
+    }
+
+    private String[] getSearchableFields() {
+        return new String[]{"nAME", "tYPE"};
+    }
+
+    // Pagination
+
+    @Override
+    public int getPageSize(){
+        return PAGE_SIZE;
+    }
+
+    @Override
+    public void getUniqueValuesFor(String searchStr, final Listener<List<String>> listener) {
+        String conditions = getConditions(searchOptions, getSearchableFields());
+                service.getServiceProxy().distinct(searchStr, conditions, new Callback<List<String>>() {
+             @Override
+             public void success(List<String> result, Response response) {
+                                  result.removeAll(Collections.<String>singleton(null));
+                 listener.onSuccess(result);
+             }
+
+             @Override
+             public void failure(RetrofitError error) {
+                                  listener.onFailure(error);
+             }
+        });
+    }
+
+    @Override
+    public URL getImageUrl(String path) {
+        return service.getImageUrl(path);
+    }
+
+    @Override
+    public void create(DataDSItem item, Listener<DataDSItem> listener) {
+                          service.getServiceProxy().createDataDSItem(item, callbackFor(listener));
+          }
+
+    private Callback<DataDSItem> callbackFor(final Listener<DataDSItem> listener) {
+      return new Callback<DataDSItem>() {
+          @Override
+          public void success(DataDSItem item, Response response) {
+                            listener.onSuccess(item);
+          }
+
+          @Override
+          public void failure(RetrofitError error) {
+                            listener.onFailure(error);
+          }
+      };
+    }
+
+    @Override
+    public void updateItem(DataDSItem item, Listener<DataDSItem> listener) {
+                          service.getServiceProxy().updateDataDSItem(item.getIdentifiableId(), item, callbackFor(listener));
+          }
+
+    @Override
+    public void deleteItem(DataDSItem item, final Listener<DataDSItem> listener) {
+                service.getServiceProxy().deleteDataDSItemById(item.getIdentifiableId(), new Callback<DataDSItem>() {
+            @Override
+            public void success(DataDSItem result, Response response) {
+                                listener.onSuccess(result);
+            }
+
+            @Override
+            public void failure(RetrofitError error) {
+                                listener.onFailure(error);
+            }
+        });
+    }
+
+    @Override
+    public void deleteItems(List<DataDSItem> items, final Listener<DataDSItem> listener) {
+                service.getServiceProxy().deleteByIds(collectIds(items), new Callback<List<DataDSItem>>() {
+            @Override
+            public void success(List<DataDSItem> item, Response response) {
+                                listener.onSuccess(null);
+            }
+
+            @Override
+            public void failure(RetrofitError error) {
+                                listener.onFailure(error);
+            }
+        });
+    }
+
+    protected List<String> collectIds(List<DataDSItem> items){
+        List<String> ids = new ArrayList<>();
+        for(DataDSItem item: items){
+            ids.add(item.getIdentifiableId());
+        }
+        return ids;
+    }
+
+}
+
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSSchemaItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSSchemaItem.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSSchemaItem.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/TravelDestinationDSSchemaItem.java	(date 1475330010000)
@@ -0,0 +1,60 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+import java.net.URL;
+import ibmmobileappbuilder.util.StringUtils;
+
+import ibmmobileappbuilder.mvp.model.IdentifiableBean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import com.google.gson.annotations.SerializedName;
+
+public class TravelDestinationDSSchemaItem implements Parcelable, IdentifiableBean {
+
+    @SerializedName("id") public String id;
+    @SerializedName("text1") public String text1;
+    @SerializedName("text2") public String text2;
+    @SerializedName("picture") public Integer picture;
+    @SerializedName("text3") public String text3;
+
+    @Override
+    public String getIdentifiableId() {
+      return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(id);
+        dest.writeString(text1);
+        dest.writeString(text2);
+        dest.writeValue(picture);
+        dest.writeString(text3);
+    }
+
+    public static final Creator<TravelDestinationDSSchemaItem> CREATOR = new Creator<TravelDestinationDSSchemaItem>() {
+        @Override
+        public TravelDestinationDSSchemaItem createFromParcel(Parcel in) {
+            TravelDestinationDSSchemaItem item = new TravelDestinationDSSchemaItem();
+
+            item.id = in.readString();
+            item.text1 = in.readString();
+            item.text2 = in.readString();
+            item.picture = (Integer) in.readValue(null);
+            item.text3 = in.readString();
+            return item;
+        }
+
+        @Override
+        public TravelDestinationDSSchemaItem[] newArray(int size) {
+            return new TravelDestinationDSSchemaItem[size];
+        }
+    };
+
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DummyLoginService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DummyLoginService.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DummyLoginService.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/services/DummyLoginService.java	(date 1467729866000)
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2016.
+ * This code is part of IBM Mobile App Builder
+ */
+
+package ibmmobileappbuilder.services;
+
+import android.os.AsyncTask;
+
+
+public class DummyLoginService extends AsyncTask<Void, Void, Boolean> implements LoginService {
+
+    /**
+     * A dummy authentication store containing known user names and passwords.
+     */
+    private static final String[] DUMMY_CREDENTIALS = new String[]{
+            "test@icinetic.com:icinetic"};
+
+    private String mEmail;
+
+    private String mPassword;
+
+    @Override
+    protected Boolean doInBackground(Void... voids) {
+        try {
+            // Simulate network access.
+            Thread.sleep(2000);
+        } catch (InterruptedException e) {
+            return false;
+        }
+
+        for (String credential : DUMMY_CREDENTIALS) {
+            String[] pieces = credential.split(":");
+            if (pieces[0].equals(mEmail)) {
+                // Account exists, return true if the password matches.
+                return pieces[1].equals(mPassword);
+            }
+        }
+
+        return true;
+    }
+
+
+    @Override
+    public void attemptLogin(String email, String password) {
+        mEmail = email;
+        mPassword = password;
+        this.execute();
+    }
+}
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/AnalyticsBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/AnalyticsBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/AnalyticsBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/AnalyticsBehavior.java	(date 1467729866000)
@@ -0,0 +1,26 @@
+package ibmmobileappbuilder.behaviors;
+
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+
+public class AnalyticsBehavior extends NoOpBehavior {
+
+    private final AnalyticsReporter analyticsReporter;
+    private final String pageName;
+
+    public AnalyticsBehavior(AnalyticsReporter analyticsReporter, String pageName) {
+        this.analyticsReporter = analyticsReporter;
+        this.pageName = pageName;
+    }
+
+    @Override
+    public void onStart() {
+        analyticsReporter.sendView(pageName);
+    }
+
+    @Override
+    public void onActionClick(AnalyticsInfo action) {
+        analyticsReporter.sendEvent(action.toMap());
+    }
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSItems.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSItems.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/Data1DSItems.java	(date 1475330010000)
@@ -0,0 +1,512 @@
+
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.R;
+import java.util.ArrayList;
+import java.util.List;
+import ibmmobileappbuilder.util.StringUtils;
+
+// Data1DSSchemaItem static data
+public class Data1DSItems{
+
+    public static List<Data1DSSchemaItem> ITEMS = new ArrayList<Data1DSSchemaItem>();
+    static {
+        // Add items.
+        Data1DSSchemaItem item;
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Mexico";
+        item.id = "57ef8c18493d14030084a64a";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Costa Rica";
+        item.id = "57ef8c18493d14030084a64c";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "El Salvador";
+        item.id = "57ef8c18493d14030084a64d";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Guatemala";
+        item.id = "57ef8c18493d14030084a64e";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Honduras";
+        item.id = "57ef8c18493d14030084a64f";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Nicaragua";
+        item.id = "57ef8c18493d14030084a650";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Panama";
+        item.id = "57ef8c18493d14030084a651";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Bolivia";
+        item.id = "57ef8c18493d14030084a652";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Brazil";
+        item.id = "57ef8c18493d14030084a653";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Colombia";
+        item.id = "57ef8c18493d14030084a654";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Ecuador";
+        item.id = "57ef8c18493d14030084a655";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "French Guiana";
+        item.id = "57ef8c18493d14030084a656";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Gal├ípagos Islands";
+        item.id = "57ef8c18493d14030084a657";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Guyana";
+        item.id = "57ef8c18493d14030084a658";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Paraguay";
+        item.id = "57ef8c18493d14030084a659";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Peru";
+        item.id = "57ef8c18493d14030084a65a";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Suriname";
+        item.id = "57ef8c18493d14030084a65b";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Venezuela";
+        item.id = "57ef8c18493d14030084a65c";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Suriname";
+        item.id = "57ef8c18493d14030084a65d";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Venezuela";
+        item.id = "57ef8c18493d14030084a65e";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Anguilla";
+        item.id = "57ef8c18493d14030084a65f";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Antigua and Barbuda";
+        item.id = "57ef8c18493d14030084a660";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Aruba";
+        item.id = "57ef8c18493d14030084a661";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Bahamas";
+        item.id = "57ef8c18493d14030084a662";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Barbados";
+        item.id = "57ef8c18493d14030084a663";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "British Virgin Islands";
+        item.id = "57ef8c18493d14030084a664";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Cayman Islands";
+        item.id = "57ef8c18493d14030084a665";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Cuba";
+        item.id = "57ef8c18493d14030084a666";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Dominica";
+        item.id = "57ef8c18493d14030084a667";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Dominican Republic";
+        item.id = "57ef8c18493d14030084a668";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Grenada";
+        item.id = "57ef8c18493d14030084a669";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Guadeloupe";
+        item.id = "57ef8c18493d14030084a66a";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Haiti";
+        item.id = "57ef8c18493d14030084a66b";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Jamaica";
+        item.id = "57ef8c18493d14030084a66c";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Martinique";
+        item.id = "57ef8c18493d14030084a66d";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Montserrat";
+        item.id = "57ef8c18493d14030084a66e";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Netherlands Antilles";
+        item.id = "57ef8c18493d14030084a66f";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Puerto Rico";
+        item.id = "57ef8c18493d14030084a670";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Saint Barth├⌐lemy";
+        item.id = "57ef8c18493d14030084a671";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Saint Kits and Nevis";
+        item.id = "57ef8c18493d14030084a672";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Saint Lucia";
+        item.id = "57ef8c18493d14030084a673";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Saint Martin (France)";
+        item.id = "57ef8c18493d14030084a674";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Saint Vincent and the Grenadines";
+        item.id = "57ef8c18493d14030084a675";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Trinidad and Tobago";
+        item.id = "57ef8c18493d14030084a676";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Turks and Cacaos Islands";
+        item.id = "57ef8c18493d14030084a677";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "United States Virgin Islands";
+        item.id = "57ef8c18493d14030084a678";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Angola";
+        item.id = "57ef8c18493d14030084a679";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Cameroon";
+        item.id = "57ef8c18493d14030084a67a";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Central African Republic";
+        item.id = "57ef8c18493d14030084a67b";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Chad";
+        item.id = "57ef8c18493d14030084a67c";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Congo";
+        item.id = "57ef8c18493d14030084a67d";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Democratic Republic of Congo (Zaire)";
+        item.id = "57ef8c18493d14030084a67e";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Equatorial Guinea";
+        item.id = "57ef8c18493d14030084a67f";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Gabon";
+        item.id = "57ef8c18493d14030084a680";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Sudan";
+        item.id = "57ef8c18493d14030084a681";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Zambi";
+        item.id = "57ef8c18493d14030084a682";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Burundi";
+        item.id = "57ef8c18493d14030084a683";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Comoros";
+        item.id = "57ef8c18493d14030084a684";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Djibouti";
+        item.id = "57ef8c18493d14030084a685";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Eritrea";
+        item.id = "57ef8c18493d14030084a686";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Ethiopia";
+        item.id = "57ef8c18493d14030084a687";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Kenya";
+        item.id = "57ef8c18493d14030084a688";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Madagascar";
+        item.id = "57ef8c18493d14030084a689";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Malawi";
+        item.id = "57ef8c18493d14030084a68a";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Mauritius";
+        item.id = "57ef8c18493d14030084a68b";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Mayotte";
+        item.id = "57ef8c18493d14030084a68c";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Mozambique";
+        item.id = "57ef8c18493d14030084a68d";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Reunion";
+        item.id = "57ef8c18493d14030084a68e";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Rwanda";
+        item.id = "57ef8c18493d14030084a68f";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Seychelles";
+        item.id = "57ef8c18493d14030084a690";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Somalia";
+        item.id = "57ef8c18493d14030084a691";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Tanzania";
+        item.id = "57ef8c18493d14030084a692";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Uganda";
+        item.id = "57ef8c18493d14030084a693";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Benin";
+        item.id = "57ef8c18493d14030084a694";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Burkina Faso";
+        item.id = "57ef8c18493d14030084a695";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Ivory Coast";
+        item.id = "57ef8c18493d14030084a696";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Brunei";
+        item.id = "57ef8c18493d14030084a697";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Burma (Myanmar)";
+        item.id = "57ef8c18493d14030084a698";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Cambodia";
+        item.id = "57ef8c18493d14030084a699";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "East Timor";
+        item.id = "57ef8c18493d14030084a69a";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Indonesia";
+        item.id = "57ef8c18493d14030084a69b";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Laos";
+        item.id = "57ef8c18493d14030084a69c";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Malaysia";
+        item.id = "57ef8c18493d14030084a69d";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Philippines";
+        item.id = "57ef8c18493d14030084a69e";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Singapore";
+        item.id = "57ef8c18493d14030084a69f";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Thailand";
+        item.id = "57ef8c18493d14030084a6a0";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Vietnam";
+        item.id = "57ef8c18493d14030084a6a1";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "The Gambia";
+        item.id = "57ef8c18493d14030084a6a2";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Ghana";
+        item.id = "57ef8c18493d14030084a6a3";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Guinea";
+        item.id = "57ef8c18493d14030084a6a4";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Liberia";
+        item.id = "57ef8c18493d14030084a6a6";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Mali";
+        item.id = "57ef8c18493d14030084a6a7";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Mauritania";
+        item.id = "57ef8c18493d14030084a6a8";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Niger";
+        item.id = "57ef8c18493d14030084a6a9";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Nigeria";
+        item.id = "57ef8c18493d14030084a6aa";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Saint Helena";
+        item.id = "57ef8c18493d14030084a6ab";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Sao tome and Principe";
+        item.id = "57ef8c18493d14030084a6ac";
+        addItem(item);
+        item = new Data1DSSchemaItem();
+        item.type = "Tropical";
+        item.name = "Senegal";
+        item.id = "57ef8c18493d14030084a6ad";
+        addItem(item);
+    }
+    public static void addItem(Data1DSSchemaItem item) {
+        ITEMS.add(item);
+    }
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SelectionBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SelectionBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SelectionBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SelectionBehavior.java	(date 1467729866000)
@@ -0,0 +1,112 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.os.Bundle;
+import android.util.SparseBooleanArray;
+import android.view.ActionMode;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AbsListView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ui.ListGridFragment;
+import ibmmobileappbuilder.util.ColorUtils;
+
+/**
+ * A behavior that enables the Contextual Action Bar (CAB) in its activity. At the moment,
+ * only ListViews are supported
+ */
+public class SelectionBehavior<T> extends NoOpBehavior {
+
+    private final ListGridFragment fragment;
+    private final int mTitleRes;
+
+    private Callback<T> mCallback;
+
+    private AbsListView mView;
+    private int mIconRes;
+
+    public SelectionBehavior(ListGridFragment<T> fr, int titleRes) {
+        this.fragment = fr;
+        this.mTitleRes = titleRes;
+    }
+
+    public SelectionBehavior(ListGridFragment<T> fr, int titleRes, int iconRes) {
+        this.fragment = fr;
+        this.mTitleRes = titleRes;
+        mIconRes = iconRes;
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        View lv = view.findViewById(android.R.id.list);
+
+        if (lv instanceof AbsListView) {
+            mView = (AbsListView) lv;
+            mView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE_MODAL);
+            mView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
+                @Override
+                public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
+                    // nothing to do
+                }
+
+                @Override
+                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                    MenuItem item = menu.add(mTitleRes);
+                    if(mIconRes != 0) {
+                        item.setIcon(mIconRes);
+                        ColorUtils.tintIcon(item, R.color.textBarColor, fragment.getActivity());
+                    }
+                    return true;
+                }
+
+                @Override
+                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+                    return false;
+                }
+
+                @Override
+                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                    // call custom callback
+                    if (mCallback != null) {
+                        ArrayList<T> res = getCheckedItems();
+                        mCallback.onSelected(res);
+                        mode.finish();
+                        return true;
+                    }
+
+                    return false;
+                }
+
+                @Override
+                public void onDestroyActionMode(ActionMode mode) {
+                }
+
+                @SuppressWarnings("unchecked")
+                private ArrayList<T> getCheckedItems() {
+                    SparseBooleanArray checked = mView.getCheckedItemPositions();
+                    ArrayList<T> res = new ArrayList<T>(checked.size());
+
+                    for (int i = 0; i < checked.size(); i++) {
+                        boolean value = checked.get(checked.keyAt(i));
+                        if (value)
+                            res.add((T) fragment.getAdapter().getItem(checked.keyAt(i)));
+                    }
+                    return res;
+                }
+            });
+        }
+    }
+
+    public void setCallback(Callback<T> callback) {
+        this.mCallback = callback;
+    }
+
+    public interface Callback<T> {
+
+        void onSelected(List<T> selectedItems);
+    }
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSServiceRest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSServiceRest.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSServiceRest.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSServiceRest.java	(date 1475330010000)
@@ -0,0 +1,46 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+import java.util.List;
+import retrofit.Callback;
+import retrofit.http.GET;
+import retrofit.http.Query;
+import retrofit.http.POST;
+import retrofit.http.Body;
+import retrofit.http.DELETE;
+import retrofit.http.Path;
+import retrofit.http.PUT;
+
+public interface DataDSServiceRest{
+
+	@GET("/app/57ef713e57acb003000664b7/r/dataDS")
+	void queryDataDSItem(
+		@Query("skip") String skip,
+		@Query("limit") String limit,
+		@Query("conditions") String conditions,
+		@Query("sort") String sort,
+		@Query("select") String select,
+		@Query("populate") String populate,
+		Callback<List<DataDSItem>> cb);
+
+	@GET("/app/57ef713e57acb003000664b7/r/dataDS/{id}")
+	void getDataDSItemById(@Path("id") String id, Callback<DataDSItem> cb);
+
+	@DELETE("/app/57ef713e57acb003000664b7/r/dataDS/{id}")
+  void deleteDataDSItemById(@Path("id") String id, Callback<DataDSItem> cb);
+
+  @POST("/app/57ef713e57acb003000664b7/r/dataDS/deleteByIds")
+  void deleteByIds(@Body List<String> ids, Callback<List<DataDSItem>> cb);
+
+  @POST("/app/57ef713e57acb003000664b7/r/dataDS")
+  void createDataDSItem(@Body DataDSItem item, Callback<DataDSItem> cb);
+
+  @PUT("/app/57ef713e57acb003000664b7/r/dataDS/{id}")
+  void updateDataDSItem(@Path("id") String id, @Body DataDSItem item, Callback<DataDSItem> cb);
+
+  @GET("/app/57ef713e57acb003000664b7/r/dataDS")
+  void distinct(
+        @Query("distinct") String colName,
+        @Query("conditions") String conditions,
+        Callback<List<String>> cb);
+}
+
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingActivity.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingActivity.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingActivity.java	(date 1475330010000)
@@ -0,0 +1,28 @@
+
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+
+import ibmmobileappbuilder.ui.BaseDetailActivity;
+
+/**
+ * SuggestedclothingActivity detail activity
+ */
+public class SuggestedclothingActivity extends BaseDetailActivity {
+  
+  	@Override
+    protected void onCreate(Bundle savedState) {
+        super.onCreate(savedState);
+        
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+    }
+
+    @Override
+    protected Class<? extends Fragment> getFragmentClass() {
+        return SuggestedclothingFragment.class;
+    }
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/Behavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/Behavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/Behavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/Behavior.java	(date 1467729866000)
@@ -0,0 +1,41 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+
+/**
+ * Try to abstract some android patterns as plugable behaviors
+ * in the fragment lifecycle
+ */
+public interface Behavior {
+
+    void onStart();
+
+    void onResume();
+
+    void onPause();
+
+    void onStop();
+
+    void onCreateOptionsMenu(Menu menu, MenuInflater inflater);
+
+    boolean onOptionsItemSelected(MenuItem item);
+
+    void onViewCreated(View view, Bundle savedInstanceState);
+
+    void onActivityResult(int requestCode, int resultCode, Intent data);
+
+    // for lists
+    void onItemClick(AdapterView<?> parent, View view, int position, long id);
+
+    boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id);
+
+    void onActionClick(AnalyticsInfo action);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/ShareBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/ShareBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/ShareBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/ShareBehavior.java	(date 1467729866000)
@@ -0,0 +1,46 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.content.Context;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.util.ColorUtils;
+
+/**
+ * Creates a Share action provider
+ */
+public class ShareBehavior extends NoOpBehavior {
+
+    private final ShareListener mListener;
+    Context mContext;
+
+    public ShareBehavior(Context context, ShareListener listener) {
+        mContext = context;
+        mListener = listener;
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        MenuItem item = menu.add(R.string.share);
+        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        item.setIcon(R.drawable.abc_ic_menu_share_mtrl_alpha);
+        ColorUtils.tintIcon(item, R.color.textBarColor, mContext);
+
+        item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+            @Override
+            public boolean onMenuItemClick(MenuItem item) {
+                mListener.onShare();
+                return true;
+            }
+        });
+    }
+
+    public interface ShareListener{
+        /**
+         * Updates this sharing action
+         */
+        void onShare();
+    }
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSItem.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSItem.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ds/DataDSItem.java	(date 1475330010000)
@@ -0,0 +1,52 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds;
+
+import ibmmobileappbuilder.mvp.model.IdentifiableBean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import com.google.gson.annotations.SerializedName;
+
+public class DataDSItem implements Parcelable, IdentifiableBean {
+
+    @SerializedName("nAME") public String nAME;
+    @SerializedName("tYPE") public String tYPE;
+    @SerializedName("id") public String id;
+
+    @Override
+    public String getIdentifiableId() {
+      return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(nAME);
+        dest.writeString(tYPE);
+        dest.writeString(id);
+    }
+
+    public static final Creator<DataDSItem> CREATOR = new Creator<DataDSItem>() {
+        @Override
+        public DataDSItem createFromParcel(Parcel in) {
+            DataDSItem item = new DataDSItem();
+
+            item.nAME = in.readString();
+            item.tYPE = in.readString();
+            item.id = in.readString();
+            return item;
+        }
+
+        @Override
+        public DataDSItem[] newArray(int size) {
+            return new DataDSItem[size];
+        }
+    };
+
+}
+
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/NoOpBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/NoOpBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/NoOpBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/NoOpBehavior.java	(date 1467729866000)
@@ -0,0 +1,74 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+
+import ibmmobileappbuilder.analytics.model.AnalyticsInfo;
+
+/**
+ * Behavior with default implementations for all methods.
+ * Other behaviors should inherit from this one.
+ */
+public class NoOpBehavior implements Behavior {
+
+    @Override
+    public void onStart() {
+
+    }
+
+    @Override
+    public void onResume() {
+
+    }
+
+    @Override
+    public void onPause() {
+
+    }
+
+    @Override
+    public void onStop() {
+
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        return false;
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data){
+
+    }
+
+    @Override
+    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+        return false;
+    }
+
+    @Override
+    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+
+    }
+
+    @Override
+    public void onActionClick(AnalyticsInfo action) {
+
+    }
+
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Activity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Activity.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Activity.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Activity.java	(date 1475330010000)
@@ -0,0 +1,28 @@
+
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+
+import ibmmobileappbuilder.ui.BaseDetailActivity;
+
+/**
+ * TravelDestinationScreen1Activity detail activity
+ */
+public class TravelDestinationScreen1Activity extends BaseDetailActivity {
+  
+  	@Override
+    protected void onCreate(Bundle savedState) {
+        super.onCreate(savedState);
+        
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+    }
+
+    @Override
+    protected Class<? extends Fragment> getFragmentClass() {
+        return TravelDestinationScreen1Fragment.class;
+    }
+}
+
+
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingFragment.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingFragment.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/SuggestedclothingFragment.java	(date 1475330010000)
@@ -0,0 +1,79 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui;
+import android.annotation.SuppressLint;
+import android.os.Bundle;
+import android.view.View;
+import android.view.LayoutInflater;
+import android.view.ViewGroup;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.R;
+import ibmmobileappbuilder.ds.Datasource;
+import android.widget.TextView;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import java.util.Arrays;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds.Data1DSSchemaItem;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds.Data1DS;
+
+public class SuggestedclothingFragment extends ibmmobileappbuilder.ui.DetailFragment<Data1DSSchemaItem>  {
+
+    private Datasource<Data1DSSchemaItem> datasource;
+    private SearchOptions searchOptions;
+
+    public static SuggestedclothingFragment newInstance(Bundle args){
+        SuggestedclothingFragment card = new SuggestedclothingFragment();
+        card.setArguments(args);
+
+        return card;
+    }
+
+    public SuggestedclothingFragment(){
+        super();
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+            searchOptions = SearchOptions.Builder.searchOptions().build();
+    }
+
+    @Override
+    public Datasource getDatasource() {
+      if (datasource != null) {
+          return datasource;
+      }
+          datasource = Data1DS.getInstance(searchOptions);
+          return datasource;
+    }
+
+    // Bindings
+
+    @Override
+    protected int getLayout() {
+        return R.layout.suggestedclothing_custom;
+    }
+
+    @Override
+    @SuppressLint("WrongViewCast")
+    public void bindView(final Data1DSSchemaItem item, View view) {
+        
+        TextView view0 = (TextView) view.findViewById(R.id.view0);
+        view0.setText("Tops");
+        
+        
+        TextView view1 = (TextView) view.findViewById(R.id.view1);
+        view1.setText("Sportswear");
+        
+        
+        TextView view2 = (TextView) view.findViewById(R.id.view2);
+        view2.setText("Festive wear");
+        
+    }
+
+    @Override
+    protected void onShow(Data1DSSchemaItem item) {
+        // set the title for this fragment
+        getActivity().setTitle("suggested clothing");
+    }
+
+}
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/FabBehaviour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/FabBehaviour.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/FabBehaviour.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/FabBehaviour.java	(date 1467729866000)
@@ -0,0 +1,114 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.os.Bundle;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.AnticipateInterpolator;
+import android.view.animation.OvershootInterpolator;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.util.ColorUtils;
+
+/**
+ * A behavior for implementing floating action buttons as main actions in a fragment
+ * TODO: Add animations
+ */
+public class FabBehaviour extends NoOpBehavior implements View.OnClickListener {
+
+    private final View.OnClickListener mListener;
+    private final boolean mAnimated;
+    Fragment mFragment;
+    int mResource;
+    int duration;
+    FloatingActionButton mFab;
+
+    public FabBehaviour(Fragment fragment, int drawableResource, View.OnClickListener listener) {
+        this(fragment, drawableResource, listener, false);
+    }
+
+    public FabBehaviour(Fragment fragment, int drawableResource, View.OnClickListener listener, boolean animated) {
+        this.mFragment = fragment;
+        mListener = listener;
+        mResource = drawableResource;
+        duration = fragment.getResources().getInteger(android.R.integer.config_mediumAnimTime);
+        mAnimated = animated;
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        setupFab(view);
+    }
+
+    private void setupFab(View view) {
+        // Tint fab drawable
+        LayoutInflater inflater = LayoutInflater.from(mFragment.getActivity());
+        inflater.inflate(R.layout.fab, (ViewGroup) view);
+
+        mFab = (FloatingActionButton) view.findViewById(R.id.fab);
+        mFab.setImageResource(mResource);
+
+        if (mFab != null) {
+            ColorUtils.tintIcon(mFab.getDrawable(), R.color.textBarColor, mFragment.getActivity());
+            mFab.setOnClickListener(this);
+        }
+    }
+
+    @Override
+    public void onResume() {
+        show(null);
+    }
+
+    @Override
+    public void onClick(final View v) {
+        hide(new AnimatorListenerAdapter() {
+                 @Override
+                 public void onAnimationEnd(Animator animation) {
+                     mListener.onClick(v);
+                 }
+             }
+        );
+    }
+
+    public void hide(final Animator.AnimatorListener listener) {
+        if (mAnimated) {
+            mFab.animate()
+                    .translationX(300f)
+                    .setDuration(duration)
+                    .setInterpolator(new AnticipateInterpolator())
+                    .setListener(new AnimatorListenerAdapter() {
+                                     @Override
+                                     public void onAnimationEnd(Animator animation) {
+                                         mFab.setVisibility(View.GONE);
+                                         listener.onAnimationEnd(animation);
+                                     }
+                                 }
+                    );
+        } else {
+            listener.onAnimationEnd(null);
+        }
+    }
+
+    public void show(Animator.AnimatorListener listener) {
+        if (mFab.getVisibility() == View.GONE) {
+            if (mAnimated) {
+                //mFab.setTranslationX(300f);
+                mFab.setVisibility(View.VISIBLE);
+                mFab.animate()
+                        .translationX(0)
+                        .setDuration(duration)
+                        .setInterpolator(new OvershootInterpolator())
+                        .setListener(listener)
+                        .start();
+            } else {
+                mFab.setVisibility(View.VISIBLE);
+            }
+        }
+    }
+
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Fragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Fragment.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Fragment.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelDestinationScreen1Fragment.java	(date 1475330010000)
@@ -0,0 +1,79 @@
+
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui;
+import android.annotation.SuppressLint;
+import android.os.Bundle;
+import android.view.View;
+import android.view.LayoutInflater;
+import android.view.ViewGroup;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.R;
+import ibmmobileappbuilder.ds.Datasource;
+import android.widget.TextView;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.Filter;
+import java.util.Arrays;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds.Data1DSSchemaItem;
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ds.Data1DS;
+
+public class TravelDestinationScreen1Fragment extends ibmmobileappbuilder.ui.DetailFragment<Data1DSSchemaItem>  {
+
+    private Datasource<Data1DSSchemaItem> datasource;
+    private SearchOptions searchOptions;
+
+    public static TravelDestinationScreen1Fragment newInstance(Bundle args){
+        TravelDestinationScreen1Fragment card = new TravelDestinationScreen1Fragment();
+        card.setArguments(args);
+
+        return card;
+    }
+
+    public TravelDestinationScreen1Fragment(){
+        super();
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+            searchOptions = SearchOptions.Builder.searchOptions().build();
+    }
+
+    @Override
+    public Datasource getDatasource() {
+      if (datasource != null) {
+          return datasource;
+      }
+          datasource = Data1DS.getInstance(searchOptions);
+          return datasource;
+    }
+
+    // Bindings
+
+    @Override
+    protected int getLayout() {
+        return R.layout.traveldestinationscreen1_custom;
+    }
+
+    @Override
+    @SuppressLint("WrongViewCast")
+    public void bindView(final Data1DSSchemaItem item, View view) {
+        if (item.name != null){
+            
+            TextView view0 = (TextView) view.findViewById(R.id.view0);
+            view0.setText(item.name);
+            
+        }
+        if (item.type != null){
+            
+            TextView view1 = (TextView) view.findViewById(R.id.view1);
+            view1.setText(item.type);
+            
+        }
+    }
+
+    @Override
+    protected void onShow(Data1DSSchemaItem item) {
+        // set the title for this fragment
+        getActivity().setTitle("Travel Destination");
+    }
+
+}
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SearchBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SearchBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SearchBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SearchBehavior.java	(date 1467729866000)
@@ -0,0 +1,69 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.support.v4.view.MenuItemCompat;
+import android.support.v7.widget.SearchView;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ui.Filterable;
+
+/**
+ * Adds an action bar search interface
+ */
+public class SearchBehavior extends NoOpBehavior {
+
+    Filterable mFilterable;
+
+    SearchView searchView;
+
+    public SearchBehavior(Filterable f) {
+        mFilterable = f;
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        inflater.inflate(R.menu.search_menu, menu);
+        MenuItem searchMenuItem = menu.findItem(R.id.search);
+        searchView = (SearchView) MenuItemCompat.getActionView(searchMenuItem);
+
+        if (searchView != null) {
+            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
+                @Override
+                public boolean onQueryTextSubmit(String s) {
+                    refreshSearch(s);
+                    return false;
+                }
+
+                @Override
+                public boolean onQueryTextChange(String s) {
+                    if (s.equals("")) {
+                        refreshSearch(null);
+                    }
+                    return false;
+                }
+            });
+
+            MenuItemCompat.setOnActionExpandListener(searchMenuItem,
+                    new MenuItemCompat.OnActionExpandListener() {
+                        @Override
+                        public boolean onMenuItemActionExpand(MenuItem menuItem) {
+                            //nothing to override
+                            return true;
+                        }
+
+                        @Override
+                        public boolean onMenuItemActionCollapse(MenuItem menuItem) {
+                            //reset the filtering string
+                            refreshSearch(null);
+                            return true;
+                        }
+                    });
+        }
+    }
+
+    public void refreshSearch(String newFilter) {
+        mFilterable.onSearchTextChanged(newFilter);
+    }
+}
Index: TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelAnalyser11Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelAnalyser11Main.java b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelAnalyser11Main.java
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/java/com/ibm/mobileappbuilder/travelanalyser1/pkg120161001081254/ui/TravelAnalyser11Main.java	(date 1475330010000)
@@ -0,0 +1,24 @@
+package com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.ui;
+
+import android.support.v4.app.Fragment;
+import android.util.SparseArray;
+
+import ibmmobileappbuilder.ui.DrawerActivity;
+
+import com.ibm.mobileappbuilder.travelanalyser1.pkg120161001081254.R;
+
+public class TravelAnalyser11Main extends DrawerActivity {
+
+    private final SparseArray<Class<? extends Fragment>> sectionFragments = new SparseArray<>();
+    {
+                sectionFragments.append(R.id.entry0, TravelDestinationScreen1Fragment.class);
+            sectionFragments.append(R.id.entry1, SuggestedclothingFragment.class);
+    }
+
+    @Override
+    public SparseArray<Class<? extends Fragment>> getSectionFragmentClasses() {
+      return sectionFragments;
+    }
+
+}
+
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SwipeRefreshBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SwipeRefreshBehavior.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SwipeRefreshBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/behaviors/SwipeRefreshBehavior.java	(date 1467729866000)
@@ -0,0 +1,70 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.database.DataSetObserver;
+import android.os.Bundle;
+import android.support.v4.widget.SwipeRefreshLayout;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+
+import java.lang.ref.WeakReference;
+
+import ibmmobileappbuilder.core.R;
+import ibmmobileappbuilder.ui.ListGridFragment;
+
+/**
+ * Pull to refresh pattern for listing fragments
+ */
+public class SwipeRefreshBehavior extends NoOpBehavior implements SwipeRefreshLayout.OnRefreshListener {
+
+    private final WeakReference<ListGridFragment> mWeakFragment;
+
+    private SwipeRefreshLayout mSwipeRefreshLayout;
+
+    public SwipeRefreshBehavior(ListGridFragment<?> fragment) {
+        this.mWeakFragment = new WeakReference<ListGridFragment>(fragment);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        ListGridFragment fr = mWeakFragment.get();
+
+        if (fr != null) {
+            //setup
+            mSwipeRefreshLayout = new SwipeRefreshLayout(fr.getActivity());
+            mSwipeRefreshLayout.setOnRefreshListener(this);
+
+            //layout modification
+            AbsListView listView = (AbsListView) view.findViewById(android.R.id.list);
+            ViewGroup parent = ((ViewGroup) listView.getParent());
+            parent.removeView(listView);
+            parent.addView(mSwipeRefreshLayout, 0);
+            mSwipeRefreshLayout.addView(listView);
+
+            //color customization
+            mSwipeRefreshLayout.setColorSchemeResources(
+                    R.color.material_deep_teal_500,
+                    R.color.material_deep_teal_200,
+                    R.color.material_blue_grey_800);
+        }
+    }
+
+    @Override
+    public void onRefresh() {
+        ListGridFragment fr = mWeakFragment.get();
+
+        if (fr != null) {
+            fr.getAdapter().registerDataSetObserver(new DataSetObserver() {
+                // wait async for completion
+                @Override
+                public void onChanged() {
+                    super.onChanged();
+                    mSwipeRefreshLayout.setRefreshing(false);
+                }
+            });
+            fr.refresh();
+        }
+
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/ApplicationInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/ApplicationInjector.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/ApplicationInjector.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/ApplicationInjector.java	(date 1467729866000)
@@ -0,0 +1,20 @@
+package ibmmobileappbuilder.injectors;
+
+import android.app.Application;
+import android.content.Context;
+
+public class ApplicationInjector {
+
+    private static Application context;
+
+    public static void setApplicationContext(Application application) {
+        context = application;
+    }
+
+    public static Context getApplicationContext() {
+        if (context != null) {
+            return context;
+        }
+        throw new IllegalStateException("You must set the application context first");
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/GsonInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/GsonInjector.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/GsonInjector.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/injectors/GsonInjector.java	(date 1467729866000)
@@ -0,0 +1,23 @@
+package ibmmobileappbuilder.injectors;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import java.util.Date;
+
+import ibmmobileappbuilder.gson.BooleanJsonTypeAdapter;
+import ibmmobileappbuilder.gson.DateJsonTypeAdapter;
+import ibmmobileappbuilder.gson.IntegerJsonTypeAdapter;
+
+public class GsonInjector {
+
+    private static final Gson CLOUDANT_GSON = new GsonBuilder()
+            .registerTypeAdapter(Integer.class, new IntegerJsonTypeAdapter())
+            .registerTypeAdapter(Date.class, new DateJsonTypeAdapter())
+            .registerTypeAdapter(Boolean.class, new BooleanJsonTypeAdapter())
+            .create();
+
+    public static Gson cloudantGson() {
+        return CLOUDANT_GSON;
+    }
+}
Index: TravelAnalyser11/app/src/main/assets/wlclient.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/TravelAnalyser11/app/src/main/assets/wlclient.properties b/TravelAnalyser11/app/src/main/assets/wlclient.properties
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/app/src/main/assets/wlclient.properties	(date 1475330010000)
@@ -0,0 +1,17 @@
+# Licensed Materials - Property of IBM
+# 5725-I43 (C) Copyright IBM Corp. 2011, 2013. All Rights Reserved.
+# US Government Users Restricted Rights - Use, duplication or
+# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
+
+wlServerProtocol = 
+wlServerHost = 
+wlServerPort = 
+wlServerContext = 
+wlAppId = TravelAnalyser11_Android
+wlAppVersion = 1.0
+wlEnvironment = Androidnative
+wlUid = wY/mbnwKTDDYQUvuQCdSgg==
+wlPlatformVersion = 7.1.11
+#languagePreferences = Add locales in order of preference (e.g. en, fr, fr-CA)
+#For Push Notifications,uncomment below line and assign value to it
+#GcmSenderId =
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/Validator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/Validator.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/Validator.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/Validator.java	(date 1467729866000)
@@ -0,0 +1,7 @@
+package ibmmobileappbuilder.validation;
+
+public interface Validator<T> {
+    boolean validate(T item);
+
+    void setError(boolean show);
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/navigation/Navigation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/navigation/Navigation.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/navigation/Navigation.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/navigation/Navigation.java	(date 1467729866000)
@@ -0,0 +1,25 @@
+package ibmmobileappbuilder.navigation;
+
+import android.support.v4.app.Fragment;
+import android.util.SparseArray;
+
+import ibmmobileappbuilder.ui.DrawerActivity;
+
+/**
+ * Interface for Navigation activities. Navigation Activities are mainly used for the upper
+ * navigation level, and are composed by sections, implemented as {@link
+ * Fragment}.
+ * Navigation between sections is up to concrete implementations.
+ * Each concrete activity may implement its own navigation pattern.
+ * See {@link DrawerActivity}
+ */
+public interface Navigation {
+
+    /**
+     * Get the array of fragment classes that implements each section
+     *
+     * @return an array of fragment classes
+     */
+    SparseArray<Class<? extends Fragment>> getSectionFragmentClasses();
+
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DatePickerValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DatePickerValidator.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DatePickerValidator.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DatePickerValidator.java	(date 1467729866000)
@@ -0,0 +1,31 @@
+package ibmmobileappbuilder.validation;
+
+import android.view.View;
+
+import ibmmobileappbuilder.views.DatePicker;
+
+/**
+ * Validator that uses a {@link DatePicker} for errors
+ */
+public abstract class DatePickerValidator<T> implements Validator<T> {
+
+    private final View mView;
+    private final int mPickerId;
+    private final int mErrorMsgId;
+
+    public DatePickerValidator(View rootView, int pickerId, int errorMsgId) {
+        mView = rootView;
+        mPickerId = pickerId;
+        mErrorMsgId = errorMsgId;
+    }
+
+    @Override
+    public void setError(boolean show) {
+        DatePicker picker = (DatePicker) mView.findViewById(mPickerId);
+        if (show) {
+            picker.setError(mErrorMsgId);
+        } else {
+            picker.setError(null);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DateTimePickerValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DateTimePickerValidator.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DateTimePickerValidator.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/DateTimePickerValidator.java	(date 1467729866000)
@@ -0,0 +1,31 @@
+package ibmmobileappbuilder.validation;
+
+import android.view.View;
+
+import ibmmobileappbuilder.views.DateTimePicker;
+
+/**
+ * Validator that uses a {@link DateTimePicker} for errors
+ */
+public abstract class DateTimePickerValidator<T> implements Validator<T> {
+
+    private final View mView;
+    private final int mPickerId;
+    private final int mErrorMsgId;
+
+    public DateTimePickerValidator(View rootView, int pickerId, int errorMsgId) {
+        mView = rootView;
+        mPickerId = pickerId;
+        mErrorMsgId = errorMsgId;
+    }
+
+    @Override
+    public void setError(boolean show) {
+        DateTimePicker picker = (DateTimePicker) mView.findViewById(mPickerId);
+        if (show) {
+            picker.setError(mErrorMsgId);
+        } else {
+            picker.setError(null);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/TextValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/TextValidator.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/TextValidator.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/TextValidator.java	(date 1467729866000)
@@ -0,0 +1,30 @@
+package ibmmobileappbuilder.validation;
+
+import android.support.design.widget.TextInputLayout;
+import android.view.View;
+
+/**
+ * Validator that uses a {@link TextInputLayout} for errors
+ */
+public abstract class TextValidator<T> implements Validator<T> {
+
+    private final View mView;
+    private final int mLayoutResId;
+    private final int mErrorMsgId;
+
+    public TextValidator(View rootView, int layoutResId, int errorMsgId) {
+        mView = rootView;
+        mLayoutResId = layoutResId;
+        mErrorMsgId = errorMsgId;
+    }
+
+    @Override
+    public void setError(boolean show) {
+        TextInputLayout layout = (TextInputLayout) mView.findViewById(mLayoutResId);
+        if (show) {
+            layout.setError(mView.getContext().getString(mErrorMsgId));
+        } else {
+            layout.setError(null);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/ImagePickerValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/ImagePickerValidator.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/ImagePickerValidator.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/ImagePickerValidator.java	(date 1467729866000)
@@ -0,0 +1,32 @@
+package ibmmobileappbuilder.validation;
+
+import android.view.View;
+
+import ibmmobileappbuilder.views.DatePicker;
+import ibmmobileappbuilder.views.ImagePicker;
+
+/**
+ * Validator that uses a {@link DatePicker} for errors
+ */
+public abstract class ImagePickerValidator<T> implements Validator<T> {
+
+    private final View mView;
+    private final int mPickerId;
+    private final int mErrorMsgId;
+
+    public ImagePickerValidator(View rootView, int pickerId, int errorMsgId) {
+        mView = rootView;
+        mPickerId = pickerId;
+        mErrorMsgId = errorMsgId;
+    }
+
+    @Override
+    public void setError(boolean show) {
+        ImagePicker picker = (ImagePicker) mView.findViewById(mPickerId);
+        if (show) {
+            picker.setError(mErrorMsgId);
+        } else {
+            picker.setError(null);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/GeoPointValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/GeoPointValidator.java b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/GeoPointValidator.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/java/ibmmobileappbuilder/validation/GeoPointValidator.java	(date 1467729866000)
@@ -0,0 +1,32 @@
+package ibmmobileappbuilder.validation;
+
+import android.view.View;
+
+import ibmmobileappbuilder.views.GeoPicker;
+
+/**
+ * Validator that uses a {@link GeoPicker} for errors
+ */
+
+public abstract class GeoPointValidator<T> implements Validator<T> {
+
+    private final View mView;
+    private final int mMsgId;
+    private final int mPickerId;
+
+    public GeoPointValidator(View rootView, int viewId, int errorMsgId) {
+        mView = rootView;
+        mPickerId = viewId;
+        mMsgId = errorMsgId;
+    }
+
+    @Override
+    public void setError(boolean show) {
+        GeoPicker picker = (GeoPicker) mView.findViewById(mPickerId);
+        if (show) {
+            picker.setError(mMsgId);
+        } else {
+            picker.setError(null);
+        }
+    }
+}
Index: TravelAnalyser11/core/src/test/java/ibm/mobile/appbuilder/action/ActivityIntentLauncherTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/test/java/ibm/mobile/appbuilder/action/ActivityIntentLauncherTest.java b/TravelAnalyser11/core/src/test/java/ibm/mobile/appbuilder/action/ActivityIntentLauncherTest.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/test/java/ibm/mobile/appbuilder/action/ActivityIntentLauncherTest.java	(date 1467729866000)
@@ -0,0 +1,36 @@
+package ibm.mobile.ibmmobileappbuilder.action;
+
+import android.content.Context;
+import android.content.Intent;
+
+import org.jmock.Expectations;
+import org.jmock.auto.Mock;
+import org.jmock.integration.junit4.JUnitRuleMockery;
+import org.junit.Rule;
+import org.junit.Test;
+
+import ibmmobileappbuilder.actions.ActivityIntentLauncher;
+import util.ClassImpostorizerJunitRuleMockery;
+
+import static org.hamcrest.CoreMatchers.sameInstance;
+
+public class ActivityIntentLauncherTest {
+
+    private static final Intent AN_INTENT = new Intent();
+
+    @Rule public JUnitRuleMockery mockery = new ClassImpostorizerJunitRuleMockery();
+    @Mock private Context mockContext;
+
+    private final ActivityIntentLauncher intentLauncher = new ActivityIntentLauncher();
+
+    @Test
+    public void startsActivity() {
+        mockery.checking(
+                new Expectations() {{
+                    oneOf(mockContext).startActivity(with(sameInstance(AN_INTENT)));
+                }}
+        );
+
+        intentLauncher.start(mockContext, AN_INTENT);
+    }
+}
\ No newline at end of file
Index: TravelAnalyser11/core/src/test/java/util/ClassImpostorizerJunitRuleMockery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/test/java/util/ClassImpostorizerJunitRuleMockery.java b/TravelAnalyser11/core/src/test/java/util/ClassImpostorizerJunitRuleMockery.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/test/java/util/ClassImpostorizerJunitRuleMockery.java	(date 1467729866000)
@@ -0,0 +1,11 @@
+package util;
+
+import org.jmock.integration.junit4.JUnitRuleMockery;
+import org.jmock.lib.legacy.ClassImposteriser;
+
+public class ClassImpostorizerJunitRuleMockery extends JUnitRuleMockery {
+    public ClassImpostorizerJunitRuleMockery() {
+        super();
+        setImposteriser(ClassImposteriser.INSTANCE);
+    }
+}
Index: TravelAnalyser11/core/src/common/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/common/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java b/TravelAnalyser11/core/src/common/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/common/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java	(date 1467729866000)
@@ -0,0 +1,37 @@
+package ibmmobileappbuilder.behaviors;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.ui.ListGridFragment;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Pull to refresh pattern for listing fragments
+ */
+public class AnalyticsSwipeRefreshBehavior extends SwipeRefreshBehavior {
+
+    private AnalyticsReporter analyticsReporter;
+
+    public AnalyticsSwipeRefreshBehavior(ListGridFragment<?> fragment) {
+        super(fragment);
+        try {
+            analyticsReporter = analyticsReporter(getApplicationContext());
+        } catch (Exception e) {
+            analyticsReporter = null;
+        }
+    }
+
+    @Override
+    public void onRefresh() {
+        super.onRefresh();
+        if (analyticsReporter == null) {
+            return;
+        }
+        analyticsReporter.sendEvent(analyticsInfo()
+                        .withAction("pullToRefresh")
+                        .build().toMap()
+        );
+    }
+}
Index: TravelAnalyser11/push/src/ibm/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/push/src/ibm/AndroidManifest.xml b/TravelAnalyser11/push/src/ibm/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/push/src/ibm/AndroidManifest.xml	(date 1467729866000)
@@ -0,0 +1,28 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="ibmmobileappbuilder.push">
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
+    <uses-permission android:name="com.ibm.clientsdk.android.app.permission.C2D_MESSAGE"/>
+    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE"/>
+    <uses-permission android:name="android.permission.WAKE_LOCK"/>
+    <uses-permission android:name="android.permission.GET_ACCOUNTS"/>
+    <uses-permission android:name="android.permission.USE_CREDENTIALS"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+
+
+    <application>
+        <!-- Add GCM Intent Service and intent-filters for RECEIVE and REGISTRATION of notifications -->
+        <service android:name="com.ibm.mobilefirstplatform.clientsdk.android.push.api.MFPPushIntentService"/>
+
+        <receiver
+            android:name="com.ibm.mobilefirstplatform.clientsdk.android.push.internal.MFPPushBroadcastReceiver"
+            android:permission="com.google.android.c2dm.permission.SEND">
+            <intent-filter>
+                <action android:name="com.google.android.c2dm.intent.RECEIVE"/>
+
+                <category android:name="com.ibm.mobilefirstplatform.clientsdk.android.app"/>
+            </intent-filter>
+        </receiver>
+    </application>
+</manifest>
Index: TravelAnalyser11/push/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/push/src/main/AndroidManifest.xml b/TravelAnalyser11/push/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/push/src/main/AndroidManifest.xml	(date 1467729866000)
@@ -0,0 +1,3 @@
+<manifest package="ibmmobileappbuilder.push">
+
+</manifest>
Index: TravelAnalyser11/push/src/ibm/java/ibmmobileappbuilder/push/BluemixPushWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/push/src/ibm/java/ibmmobileappbuilder/push/BluemixPushWrapper.java b/TravelAnalyser11/push/src/ibm/java/ibmmobileappbuilder/push/BluemixPushWrapper.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/push/src/ibm/java/ibmmobileappbuilder/push/BluemixPushWrapper.java	(date 1467729866000)
@@ -0,0 +1,37 @@
+package ibmmobileappbuilder.push;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.ibm.mobilefirstplatform.clientsdk.android.core.api.BMSClient;
+import com.ibm.mobilefirstplatform.clientsdk.android.push.api.MFPPush;
+import com.ibm.mobilefirstplatform.clientsdk.android.push.api.MFPPushException;
+import com.ibm.mobilefirstplatform.clientsdk.android.push.api.MFPPushResponseListener;
+
+import java.net.MalformedURLException;
+
+public class BluemixPushWrapper implements MFPPushResponseListener<String> {
+
+    private static final String TAG = BluemixPushWrapper.class.getSimpleName();
+
+    public void register(Context appContext, String bluemixAppRoute, String bluemixAppGuid) {
+        try {
+            BMSClient.getInstance().initialize(appContext, bluemixAppRoute, bluemixAppGuid);
+            // Initialize Push client
+            MFPPush.getInstance().initialize(appContext);
+            MFPPush.getInstance().register(this);
+        } catch (MalformedURLException e) {
+            Log.e(TAG, "Please, check your application route and try again", e);
+        }
+    }
+
+    @Override
+    public void onSuccess(String response) {
+        Log.d(TAG, String.format("Registered: %s", response));
+    }
+
+    @Override
+    public void onFailure(MFPPushException exception) {
+        Log.e(TAG, "Failure", exception);
+    }
+}
Index: TravelAnalyser11/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/TravelAnalyser11/gradle/wrapper/gradle-wrapper.properties b/TravelAnalyser11/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1756778205047)
+++ b/TravelAnalyser11/gradle/wrapper/gradle-wrapper.properties	(date 1756778205047)
@@ -0,0 +1,6 @@
+#Mon Sep 01 22:56:45 ART 2025
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-9.0-milestone-1-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: TravelAnalyser11/cloudant/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/AndroidManifest.xml b/TravelAnalyser11/cloudant/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/AndroidManifest.xml	(date 1467729866000)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="ibmmobileappbuilder.cloudant">
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+
+</manifest>
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/ds/CloudantDatasource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/ds/CloudantDatasource.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/ds/CloudantDatasource.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/ds/CloudantDatasource.java	(date 1467729866000)
@@ -0,0 +1,202 @@
+package ibmmobileappbuilder.ds;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+
+import com.cloudant.sync.datastore.Datastore;
+import com.cloudant.sync.datastore.DocumentException;
+import com.cloudant.sync.datastore.MutableDocumentRevision;
+import com.cloudant.sync.query.IndexManager;
+import com.cloudant.sync.query.QueryResult;
+
+import java.net.URI;
+import java.util.List;
+import java.util.Map;
+
+import ibmmobileappbuilder.cloudant.factory.CloudantDatabaseSyncerFactory;
+import ibmmobileappbuilder.cloudant.sync.datastore.BeanToMapDocumentBody;
+import ibmmobileappbuilder.cloudant.sync.datastore.CloudantQueryResultToBeanList;
+import ibmmobileappbuilder.cloudant.sync.datastore.DatabaseSyncFinishedListener;
+import ibmmobileappbuilder.cloudant.sync.datastore.DatabaseSyncer;
+import ibmmobileappbuilder.data.DatasourceQuery;
+import ibmmobileappbuilder.data.DatasourceSort;
+import ibmmobileappbuilder.data.cloudant.CloudantDatasourceQuery;
+import ibmmobileappbuilder.data.cloudant.CloudantDatasourceSort;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.mvp.model.MutableIdentifiableBean;
+
+public class CloudantDatasource<T extends MutableIdentifiableBean> implements CrudDatasource<T>, DatabaseSyncFinishedListener, Pagination<T>, GeoDatasource {
+
+    private final Datastore datastore;
+    private final DatabaseSyncer databaseSyncer;
+    private final Class<T> beanClass;
+    private final CloudantQueryResultToBeanList cloudantQueryResultToBeanList;
+    private final DatasourceSort<List<Map<String, String>>> datasourceSort;
+    private final DatasourceQuery<Map<String, Object>> datasourceQuery;
+    private final IndexManager indexManager;
+    private final Handler mainHandler;
+
+    //SearchOptions should be passed in the constructor
+    private SearchOptions searchOptions;
+    private Listener<List<T>> listener;
+
+    public CloudantDatasource(Datastore datastore,
+                              DatabaseSyncer databaseSyncer,
+                              Class<T> beanClass,
+                              SearchOptions searchOptions,
+                              @NonNull String[] searchableFields) {
+        this.datastore = datastore;
+        this.databaseSyncer = databaseSyncer;
+        this.beanClass = beanClass;
+        this.searchOptions = searchOptions;
+        cloudantQueryResultToBeanList = new CloudantQueryResultToBeanList();
+        indexManager = new IndexManager(this.datastore);
+        datasourceSort = new CloudantDatasourceSort(indexManager);
+        datasourceQuery = new CloudantDatasourceQuery(indexManager, searchableFields);
+        mainHandler = new Handler(Looper.getMainLooper());
+    }
+
+    public static <T extends MutableIdentifiableBean> CrudDatasource<T> cloudantDatasource(
+            Datastore datastore,
+            URI cloudantUri,
+            Class<T> beanClass,
+            SearchOptions searchOptions,
+            String... searchableColumns) {
+        return new CloudantDatasource<>(
+                datastore,
+                CloudantDatabaseSyncerFactory.instanceFor(datastore.getDatastoreName(), cloudantUri),
+                beanClass,
+                searchOptions,
+                searchableColumns != null ? searchableColumns : new String[]{}
+        );
+    }
+
+    @Override
+    public void getItems(Listener<List<T>> listener) {
+
+    }
+
+    @Override
+    public void getItem(String s, Listener<T> listener) {
+
+    }
+
+    @Override
+    public int getPageSize() {
+        return 20;
+    }
+
+    @Override
+    public void getItems(int pageNum,  Listener<List<T>> listener) {
+        getItems(pageNum, getPageSize(), listener, pageNum == 0);
+    }
+
+    @Override
+    public void onSynchronized() {
+        getItems(0, getPageSize(), listener, false);
+    }
+
+    //Yeeeea!! one overload more... one nice day this will be refactored vastly
+    public void getItems(int pageNum, int pageSize, final Listener<List<T>> listener, boolean syncDb) {
+        //If we have to force the sync or the db is already syncing we have to call sync again as this will attach the listener
+        if (syncDb || databaseSyncer.isSyncing()) {
+            this.listener = listener;
+            databaseSyncer.sync(this);
+            return;
+        }
+
+        QueryResult retrieved = indexManager.find(
+                datasourceQuery.generateQuery(searchOptions),
+                pageNum * pageSize,
+                pageSize,
+                null,
+                datasourceSort.generateSort(searchOptions)
+        );
+
+        notifyOfSuccessOnMainThread(listener, cloudantQueryResultToBeanList.transform(retrieved, beanClass));
+    }
+
+    @Override
+    public void create(T item, Listener<T> listener) {
+        MutableDocumentRevision documentRevision = new MutableDocumentRevision();
+        try {
+            documentRevision.body = new BeanToMapDocumentBody<>(item);
+            datastore.createDocumentFromRevision(documentRevision);
+            listener.onSuccess(item);
+        } catch (DocumentException e) {
+            listener.onFailure(e);
+        }
+    }
+
+    @Override
+    public void updateItem(T item, Listener<T> listener) {
+        MutableDocumentRevision mutableDocumentRevision;
+        try {
+            mutableDocumentRevision = datastore.getDocument(item.getIdentifiableId()).mutableCopy();
+            mutableDocumentRevision.body = new BeanToMapDocumentBody<>(item);
+            datastore.updateDocumentFromRevision(mutableDocumentRevision);
+            listener.onSuccess(item);
+        } catch (DocumentException e) {
+            listener.onFailure(e);
+        }
+    }
+
+    @Override
+    public void deleteItem(T item, Listener<T> listener) {
+        try {
+            datastore.deleteDocument(item.getIdentifiableId());
+            listener.onSuccess(item);
+        } catch (DocumentException e) {
+            listener.onFailure(e);
+        }
+
+    }
+
+    @Override
+    public void deleteItems(List<T> items, Listener<T> listener) {
+        for (T item : items) {
+            try {
+                datastore.deleteDocument(item.getIdentifiableId());
+            } catch (DocumentException e) {
+                listener.onFailure(e);
+                return;
+            }
+        }
+
+        T firstItem = items.get(0);
+        firstItem.setIdentifiableId("all");
+        listener.onSuccess(firstItem);
+    }
+
+    @Override
+    public void onSearchTextChanged(String s){
+        searchOptions.setSearchText(s);
+    }
+
+    @Override
+    public void addFilter(Filter filter){
+        searchOptions.addFilter(filter);
+    }
+
+    @Override
+    public void clearFilters() {
+        searchOptions.setFilters(null);
+    }
+
+    private void notifyOfSuccessOnMainThread(final Listener<List<T>> listener, final List<T> transformedItems) {
+        //TODO notify of end reached here.
+        if (Looper.getMainLooper() == Looper.myLooper()) {
+            listener.onSuccess(transformedItems);
+        } else {
+            mainHandler.post(
+                    new Runnable() {
+                        @Override
+                        public void run() {
+                            listener.onSuccess(transformedItems);
+                        }
+                    }
+            );
+        }
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceQuery.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceQuery.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceQuery.java	(date 1467729866000)
@@ -0,0 +1,96 @@
+package ibmmobileappbuilder.data.cloudant;
+
+import android.util.Log;
+
+import com.cloudant.sync.query.IndexManager;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+
+import ibmmobileappbuilder.data.DatasourceQuery;
+import ibmmobileappbuilder.ds.SearchOptions;
+import ibmmobileappbuilder.ds.filter.ContainsFilter;
+import ibmmobileappbuilder.ds.filter.Filter;
+import ibmmobileappbuilder.ds.filter.IdentityFilter;
+import ibmmobileappbuilder.ds.filter.InFilter;
+import ibmmobileappbuilder.ds.filter.RangeFilter;
+import ibmmobileappbuilder.util.MapUtils;
+
+public class CloudantDatasourceQuery implements DatasourceQuery<Map<String, Object>> {
+
+    private static final String TAG = CloudantDatasourceQuery.class.getSimpleName();
+    private final IndexManager indexManager;
+    private final String[] searchableFields;
+
+    public CloudantDatasourceQuery(IndexManager indexManager, String[] searchableFields) {
+        this.indexManager = indexManager;
+        this.searchableFields = searchableFields;
+    }
+
+
+    @Override
+    public Map<String, Object> generateQuery(SearchOptions searchOptions) {
+        Map<String, Object> queryMap = new HashMap<>();
+        addSearch(searchOptions.getSearchText(), queryMap);
+        addFilters(searchOptions.getFixedFilters(), queryMap);
+        addFilters(searchOptions.getFilters(), queryMap);
+        createRequiredIndexes(queryMap.keySet());
+        return queryMap;
+    }
+
+    private void addFilters(List<Filter> fixedFilters, Map<String, Object> queryMap) {
+        for (Filter fixedFilter : fixedFilters) {
+            if (fixedFilter instanceof IdentityFilter) {
+                queryMap.put(fixedFilter.getField(), ((IdentityFilter) fixedFilter).getValue());
+            }
+            if (fixedFilter instanceof InFilter) {
+                queryMap.put(fixedFilter.getField(),
+                        MapUtils.singleEntryMap("$in", ((InFilter) fixedFilter).getValues())
+                );
+            }
+            if (fixedFilter instanceof RangeFilter) {
+                Log.w(TAG,
+                        "RangeFilters AKA multiple conditions filters are not fully supported in cloudant-sync"
+                );
+            }
+            if (fixedFilter instanceof ContainsFilter) {
+                Log.w(TAG,
+                        "ContainsFilter AKA $regex are not fully supported in cloudant-sync, adding an identityfilter instead"
+                );
+                queryMap.put(fixedFilter.getField(), ((ContainsFilter) fixedFilter).getValue());
+            }
+        }
+    }
+
+    private void addSearch(String searchText, Map<String, Object> queryMap) {
+        if (searchText != null) {
+            Map<String, Object> search = MapUtils.<String, Object>singleEntryMap("$search",
+                    searchText + "*"
+            );
+            queryMap.put("$text", search);
+        }
+    }
+
+    private void createRequiredIndexes(Set<String> keySet) {
+        if (searchableFields != null) {
+            indexManager.ensureIndexed(Arrays.<Object>asList(searchableFields),
+                    "index_text",
+                    "text"
+            );
+        }
+        for (String key : keySet) {
+            if (shouldAddIndex(key)) {
+                indexManager.ensureIndexed(Collections.<Object>singletonList(key), "index_" + key);
+            }
+        }
+    }
+
+    private boolean shouldAddIndex(String key) {
+        return key != null && !key.startsWith("$");
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceSort.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceSort.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/data/cloudant/CloudantDatasourceSort.java	(date 1467729866000)
@@ -0,0 +1,38 @@
+package ibmmobileappbuilder.data.cloudant;
+
+import com.cloudant.sync.query.IndexManager;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import ibmmobileappbuilder.data.DatasourceSort;
+import ibmmobileappbuilder.ds.SearchOptions;
+
+public class CloudantDatasourceSort implements DatasourceSort<List<Map<String, String>>> {
+
+    private final IndexManager indexManager;
+
+    public CloudantDatasourceSort(IndexManager indexManager) {
+        this.indexManager = indexManager;
+    }
+
+    @Override
+    public List<Map<String, String>> generateSort(SearchOptions searchOptions) {
+        if (searchOptions == null || searchOptions.getSortColumn() == null) {
+            return null;
+        } else {
+            String sortColumn = searchOptions.getSortColumn();
+            List<Map<String, String>> sortDocument = new ArrayList<>();
+            Map<String, String> sortByName = new HashMap<>();
+            indexManager.ensureIndexed(Collections.<Object>singletonList(sortColumn),
+                    "index_" + sortColumn
+            );
+            sortByName.put(sortColumn, searchOptions.isSortAscending() ? "asc" : "desc");
+            sortDocument.add(sortByName);
+            return sortDocument;
+        }
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantReplicationListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantReplicationListener.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantReplicationListener.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantReplicationListener.java	(date 1467729866000)
@@ -0,0 +1,49 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+import com.cloudant.sync.notifications.ReplicationCompleted;
+import com.cloudant.sync.notifications.ReplicationErrored;
+import com.google.common.eventbus.Subscribe;
+
+import java.util.concurrent.CountDownLatch;
+
+/**
+ * A {@code ReplicationListener} that sets a latch when it's told the
+ * replication has finished.
+ */
+public class CloudantReplicationListener {
+
+    private final DatabaseSyncFinishedListener databaseSyncFinishedListener;
+
+    private CountDownLatch countDownLatch;
+
+    public CloudantReplicationListener(DatabaseSyncFinishedListener databaseSyncFinishedListener) {
+        this.databaseSyncFinishedListener = databaseSyncFinishedListener;
+        countDownLatch = new CountDownLatch(0);
+    }
+
+    public void startSyncing(){
+        countDownLatch = new CountDownLatch(2);
+    }
+
+    public boolean isSyncing() {
+        return countDownLatch.getCount() != 0;
+    }
+
+    @Subscribe
+    public void complete(ReplicationCompleted event) {
+        countDownAndNotifyIfDone();
+    }
+
+    @Subscribe
+    public void error(ReplicationErrored event) {
+        countDownAndNotifyIfDone();
+    }
+
+    private void countDownAndNotifyIfDone() {
+        countDownLatch.countDown();
+        if (countDownLatch.getCount() == 0) {
+            databaseSyncFinishedListener.onSynchronized();
+        }
+    }
+
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/BeanToMapDocumentBody.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/BeanToMapDocumentBody.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/BeanToMapDocumentBody.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/BeanToMapDocumentBody.java	(date 1467729866000)
@@ -0,0 +1,30 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+
+import com.cloudant.sync.datastore.DocumentBody;
+import com.cloudant.sync.datastore.DocumentBodyFactory;
+import com.google.gson.Gson;
+
+import java.util.Map;
+
+import ibmmobileappbuilder.injectors.GsonInjector;
+
+public class BeanToMapDocumentBody<T> implements DocumentBody {
+
+    private final T item;
+    private final Gson gson = GsonInjector.cloudantGson();
+
+    public BeanToMapDocumentBody(T item) {
+        this.item = item;
+    }
+
+    @Override
+    public Map<String, Object> asMap() {
+        return DocumentBodyFactory.create(gson.toJson(item).getBytes()).asMap();
+    }
+
+    @Override
+    public byte[] asBytes() {
+        return gson.toJson(item).getBytes();
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncFinishedListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncFinishedListener.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncFinishedListener.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncFinishedListener.java	(date 1467729866000)
@@ -0,0 +1,5 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+public interface DatabaseSyncFinishedListener {
+    void onSynchronized();
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncer.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncer.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/DatabaseSyncer.java	(date 1467729866000)
@@ -0,0 +1,7 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+public interface DatabaseSyncer {
+
+    void sync(DatabaseSyncFinishedListener databaseSyncFinishedListener);
+    boolean isSyncing();
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CompositeDatabaseSyncFinishedListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CompositeDatabaseSyncFinishedListener.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CompositeDatabaseSyncFinishedListener.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CompositeDatabaseSyncFinishedListener.java	(date 1467729866000)
@@ -0,0 +1,32 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+import android.support.annotation.NonNull;
+
+import java.lang.ref.WeakReference;
+import java.util.Vector;
+
+public class CompositeDatabaseSyncFinishedListener implements DatabaseSyncFinishedListener {
+
+    private final Vector<WeakReference<DatabaseSyncFinishedListener>> listeners;
+
+    public CompositeDatabaseSyncFinishedListener() {
+        listeners = new Vector<>();
+    }
+
+    @Override
+    public void onSynchronized() {
+        for (WeakReference<DatabaseSyncFinishedListener> listenerWeakReference : listeners) {
+            DatabaseSyncFinishedListener listener = listenerWeakReference.get();
+            if (listener != null) {
+                listener.onSynchronized();
+            }
+        }
+    }
+
+    public void setListeners(@NonNull DatabaseSyncFinishedListener... listeners) {
+        this.listeners.clear();
+        for (DatabaseSyncFinishedListener listener : listeners) {
+            this.listeners.add(new WeakReference<>(listener));
+        }
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantQueryResultToBeanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantQueryResultToBeanList.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantQueryResultToBeanList.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantQueryResultToBeanList.java	(date 1467729866000)
@@ -0,0 +1,35 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+import com.cloudant.sync.datastore.DocumentRevision;
+import com.cloudant.sync.query.QueryResult;
+import com.google.gson.Gson;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ibmmobileappbuilder.mvp.model.MutableIdentifiableBean;
+
+import static ibmmobileappbuilder.injectors.GsonInjector.cloudantGson;
+
+public class CloudantQueryResultToBeanList {
+
+    private final Gson gson = cloudantGson();
+
+    public <T> List<T> transform(QueryResult queryResult, Class<T> beanClass) {
+        List<T> result = new ArrayList<>();
+        if (queryResult == null) {
+            return result;
+        }
+        for (DocumentRevision document : queryResult) {
+            //This should go on a try/catch as we can have multiple types here
+            byte[] bytes = document.getBody().asBytes();
+            // This should go in a try catch just in case there are different documents type
+            T item = gson.fromJson(new String(bytes), beanClass);
+            if (item instanceof MutableIdentifiableBean) {
+                ((MutableIdentifiableBean) item).setIdentifiableId(document.getId());
+            }
+            result.add(item);
+        }
+        return result;
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatabaseSyncerFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatabaseSyncerFactory.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatabaseSyncerFactory.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatabaseSyncerFactory.java	(date 1467729866000)
@@ -0,0 +1,21 @@
+package ibmmobileappbuilder.cloudant.factory;
+
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+import ibmmobileappbuilder.cloudant.sync.datastore.CloudantDatabaseSyncer;
+
+public class CloudantDatabaseSyncerFactory {
+
+    private static final Map<String, CloudantDatabaseSyncer> CLOUDANT_DB_SYNCERS = new HashMap<>();
+
+    public static CloudantDatabaseSyncer instanceFor(String dbName, URI uri) {
+        CloudantDatabaseSyncer cloudantDatabaseSyncer = CLOUDANT_DB_SYNCERS.get(dbName);
+        if (cloudantDatabaseSyncer == null) {
+            cloudantDatabaseSyncer = new CloudantDatabaseSyncer(CloudantDatastoresFactory.create(dbName), uri);
+            CLOUDANT_DB_SYNCERS.put(dbName, cloudantDatabaseSyncer);
+        }
+        return cloudantDatabaseSyncer;
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantDatabaseSyncer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantDatabaseSyncer.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantDatabaseSyncer.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/sync/datastore/CloudantDatabaseSyncer.java	(date 1467729866000)
@@ -0,0 +1,58 @@
+package ibmmobileappbuilder.cloudant.sync.datastore;
+
+import android.support.annotation.Nullable;
+
+import com.cloudant.sync.datastore.Datastore;
+import com.cloudant.sync.replication.Replicator;
+import com.cloudant.sync.replication.ReplicatorBuilder;
+
+import java.net.URI;
+
+public class CloudantDatabaseSyncer implements DatabaseSyncer, DatabaseSyncFinishedListener {
+
+    private final Replicator pullReplicator;
+    private final Replicator pushReplicator;
+    private final CompositeDatabaseSyncFinishedListener compositeDatabaseSyncFinishedListener;
+    private final CloudantReplicationListener replicationListener;
+
+    public CloudantDatabaseSyncer(Datastore datastore, URI uri) {
+        pullReplicator = ReplicatorBuilder.pull().from(uri).to(datastore).build();
+        pushReplicator = ReplicatorBuilder.push().from(datastore).to(uri).build();
+        compositeDatabaseSyncFinishedListener = new CompositeDatabaseSyncFinishedListener();
+        replicationListener = new CloudantReplicationListener(compositeDatabaseSyncFinishedListener);
+    }
+
+
+    @Override
+    public void sync(@Nullable DatabaseSyncFinishedListener databaseSyncFinishedListener) {
+        //if we are already syncing just add the listener
+        if (isSyncing() && databaseSyncFinishedListener != null) {
+            compositeDatabaseSyncFinishedListener.setListeners(databaseSyncFinishedListener, this);
+            return;
+        }
+        replicationListener.startSyncing();
+        compositeDatabaseSyncFinishedListener.setListeners(databaseSyncFinishedListener, this);
+        registerListenerAndStart(replicationListener, pullReplicator);
+        registerListenerAndStart(replicationListener, pushReplicator);
+    }
+
+    @Override
+    public boolean isSyncing() {
+        return replicationListener.isSyncing();
+    }
+
+    @Override
+    public void onSynchronized() {
+        pullReplicator.getEventBus().unregister(replicationListener);
+        pushReplicator.getEventBus().unregister(replicationListener);
+        pullReplicator.stop();
+        pushReplicator.stop();
+
+    }
+
+    private void registerListenerAndStart(CloudantReplicationListener replicationListener,
+                                          Replicator replicator) {
+        replicator.getEventBus().register(replicationListener);
+        replicator.start();
+    }
+}
Index: TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatastoresFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatastoresFactory.java b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatastoresFactory.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/cloudant/src/main/java/ibmmobileappbuilder/cloudant/factory/CloudantDatastoresFactory.java	(date 1467729866000)
@@ -0,0 +1,35 @@
+package ibmmobileappbuilder.cloudant.factory;
+
+import android.content.Context;
+
+import com.cloudant.sync.datastore.Datastore;
+import com.cloudant.sync.datastore.DatastoreManager;
+import com.cloudant.sync.datastore.DatastoreNotCreatedException;
+
+import java.io.File;
+
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+public class CloudantDatastoresFactory {
+
+    private static final String CLOUDANT_DATASTORES_NAME = "cloudantDatastores";
+    private static final File CLOUDANT_DATASTORE = ApplicationInjector.getApplicationContext().getDir(
+            CLOUDANT_DATASTORES_NAME,
+            Context.MODE_PRIVATE
+    );
+    private static final DatastoreManager DATASTORE_MANAGER = new DatastoreManager(
+            CLOUDANT_DATASTORE
+    );
+
+    public static Datastore create(String dbName) {
+        return openDatastore(dbName);
+    }
+
+    private static Datastore openDatastore(String datastoreName) {
+        try {
+            return DATASTORE_MANAGER.openDatastore(datastoreName);
+        } catch (DatastoreNotCreatedException e) {
+            throw new RuntimeException("Could not create datastore", e);
+        }
+    }
+}
Index: TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpAnalyticsReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpAnalyticsReporter.java b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpAnalyticsReporter.java
new file mode 100644
--- /dev/null	(date 1469453714000)
+++ b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpAnalyticsReporter.java	(date 1469453714000)
@@ -0,0 +1,56 @@
+package ibmmobileappbuilder.analytics;
+
+import android.app.Application;
+import android.util.Log;
+
+import com.worklight.common.Logger;
+import com.worklight.common.WLAnalytics;
+import com.worklight.wlclient.api.WLClient;
+import com.worklight.wlclient.api.WLFailResponse;
+import com.worklight.wlclient.api.WLResponse;
+import com.worklight.wlclient.api.WLResponseListener;
+
+import org.json.JSONObject;
+
+import java.util.Collections;
+import java.util.Map;
+
+public class MfpAnalyticsReporter implements AnalyticsReporter, WLResponseListener {
+
+    private static final String TAG = MfpAnalyticsReporter.class.getSimpleName();
+    private static final String PAGE_VIEW = "page_view";
+    private static final String EVENT = "event";
+
+    @Override
+    public void init(Application application) {
+        WLAnalytics.startRecordingActivityLifecycleEvents(application);
+        WLClient.createInstance(application).connect(this);
+        WLAnalytics.setContext(application);
+    }
+
+    @Override
+    public void sendView(String pageName) {
+        WLAnalytics.log(PAGE_VIEW, new JSONObject(Collections.singletonMap("page", pageName)));
+    }
+
+    @Override
+    public void sendEvent(Map<String, String> paramsMap) {
+        WLAnalytics.log(EVENT, new JSONObject(paramsMap));
+    }
+
+    @Override
+    public void sendHandledException(String tag, String message, Throwable exception) {
+        Logger.getInstance(tag).error(message, exception);
+        Logger.send();
+    }
+
+    @Override
+    public void onSuccess(WLResponse wlResponse) {
+        Log.v(TAG, "success connecting");
+    }
+
+    @Override
+    public void onFailure(WLFailResponse wlFailResponse) {
+        Log.w(TAG, "Failure connecting to mfp services" + wlFailResponse.getResponseText());
+    }
+}
Index: TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpNetworkLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpNetworkLogger.java b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpNetworkLogger.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/MfpNetworkLogger.java	(date 1467729866000)
@@ -0,0 +1,33 @@
+package ibmmobileappbuilder.analytics;
+
+import com.worklight.common.WLAnalytics;
+
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import ibmmobileappbuilder.analytics.network.NetworkLogger;
+
+public class MfpNetworkLogger implements NetworkLogger {
+    private static final String NETWORK_RESPONSE = "network_response";
+    private static final String NETWORK_REQUEST = "network_request";
+
+    @Override
+    public void logRequest(String url, String httpMethod) {
+        Map<String, String> paramsMap = new HashMap<>(2);
+        paramsMap.put("url", url);
+        paramsMap.put("http_method", httpMethod);
+        WLAnalytics.log(NETWORK_REQUEST, new JSONObject(paramsMap));
+    }
+
+    @Override
+    public void logResponse(NetworkResponse networkResponse) {
+        //TODO object to Json
+        Map<String, String> paramsMap = new HashMap<>(3);
+        paramsMap.put("url", networkResponse.getUrl());
+        paramsMap.put("response_code", networkResponse.getStatusCode());
+        paramsMap.put("response_body", networkResponse.getBody());
+        WLAnalytics.log(NETWORK_RESPONSE, new JSONObject(paramsMap));
+    }
+}
Index: TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/NetworkLoggerInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/NetworkLoggerInjector.java b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/NetworkLoggerInjector.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/NetworkLoggerInjector.java	(date 1467729866000)
@@ -0,0 +1,12 @@
+package ibmmobileappbuilder.analytics.injector;
+
+import ibmmobileappbuilder.analytics.MfpNetworkLogger;
+import ibmmobileappbuilder.analytics.network.NetworkLogger;
+
+public class NetworkLoggerInjector {
+
+    public static NetworkLogger networkLogger() {
+        return new MfpNetworkLogger();
+    }
+
+}
Index: TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java
new file mode 100644
--- /dev/null	(date 1469453714000)
+++ b/TravelAnalyser11/analytics/src/ibm/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java	(date 1469453714000)
@@ -0,0 +1,43 @@
+package ibmmobileappbuilder.analytics.injector;
+
+import android.content.Context;
+import android.util.Log;
+
+import java.util.Properties;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.analytics.LogAnalyticsReporter;
+import ibmmobileappbuilder.analytics.MfpAnalyticsReporter;
+
+public class AnalyticsReporterInjector {
+
+    private static AnalyticsReporter instance;
+
+    public static AnalyticsReporter analyticsReporter(Context context) {
+        if (instance != null) {
+            return instance;
+        }
+
+        try {
+            Properties p = new Properties();
+            p.load(context.getAssets().open("wlclient.properties"));
+            String wlServerPort = p.getProperty("wlServerPort");
+            if (wlServerPort != null && !wlServerPort.isEmpty()) {
+                instance = new MfpAnalyticsReporter();
+            } else {
+                instance = new LogAnalyticsReporter();
+            }
+        } catch (Exception e) {
+            Log.w("AnalyticsReporter", "Could not initialize MFP", e);
+            instance = new LogAnalyticsReporter();
+        }
+        return instance;
+    }
+
+    public static AnalyticsReporter analyticsReporter() {
+        if (instance == null) {
+            throw new IllegalStateException("You must call analyticsReporter(Context context) first");
+        }
+        return instance;
+    }
+}
Index: TravelAnalyser11/analytics/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/main/AndroidManifest.xml b/TravelAnalyser11/analytics/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/main/AndroidManifest.xml	(date 1467729866000)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="ibmmobileappbuilder.analytics">
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+
+</manifest>
Index: TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/AnalyticsReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/AnalyticsReporter.java b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/AnalyticsReporter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/AnalyticsReporter.java	(date 1467729866000)
@@ -0,0 +1,26 @@
+package ibmmobileappbuilder.analytics;
+
+import android.app.Application;
+
+import java.util.Map;
+
+public interface AnalyticsReporter {
+    AnalyticsReporter NO_OP = new AnalyticsReporter() {
+        @Override
+        public void init(Application app) { }
+
+        @Override
+        public void sendView(String screenName) { }
+
+        @Override
+        public void sendEvent(Map<String, String> paramsMap) { }
+
+        @Override
+        public void sendHandledException(String tag, String message, Throwable exception) {}
+    };
+
+    void init(Application app);
+    void sendView(String screenName);
+    void sendEvent(Map<String, String> paramsMap);
+    void sendHandledException(String tag, String message, Throwable exception);
+}
\ No newline at end of file
Index: TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/LogAnalyticsReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/LogAnalyticsReporter.java b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/LogAnalyticsReporter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/LogAnalyticsReporter.java	(date 1467729866000)
@@ -0,0 +1,31 @@
+package ibmmobileappbuilder.analytics;
+
+import android.app.Application;
+import android.util.Log;
+
+import java.util.Map;
+
+public class LogAnalyticsReporter implements AnalyticsReporter {
+
+    private static final String TAG = LogAnalyticsReporter.class.getSimpleName();
+
+    @Override
+    public void init(Application app) {
+        //Do nothing
+    }
+
+    @Override
+    public void sendView(String screenName) {
+        Log.i(TAG, String.format("page_view:%s", screenName));
+    }
+
+    @Override
+    public void sendEvent(Map<String, String> paramMaps) {
+        Log.i(TAG, String.format("Event with params: %s", paramMaps));
+    }
+
+    @Override
+    public void sendHandledException(String tag, String message, Throwable exception) {
+        Log.e(tag, message, exception);
+    }
+}
Index: TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/NetworkResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/NetworkResponse.java b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/NetworkResponse.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/NetworkResponse.java	(date 1467729866000)
@@ -0,0 +1,55 @@
+package ibmmobileappbuilder.analytics;
+
+public class NetworkResponse {
+
+    private final String url;
+    private final String statusCode;
+    private final String body;
+
+    public String getUrl() {
+        return url;
+    }
+
+    public String getStatusCode() {
+        return statusCode;
+    }
+
+    public String getBody() {
+        return body;
+    }
+
+    private NetworkResponse(Builder builder) {
+        this.url = builder.url;
+        this.statusCode = builder.statusCode;
+        this.body = builder.body;
+    }
+
+    public static class Builder {
+        private String url;
+        private String statusCode;
+        private String body;
+
+        public static Builder networkResponse() {
+            return new Builder();
+        }
+
+        public Builder withUrl(String url) {
+            this.url = url;
+            return this;
+        }
+
+        public Builder withStatusCode(String statusCode) {
+            this.statusCode = statusCode;
+            return this;
+        }
+
+        public Builder withBody(String body) {
+            this.body = body;
+            return this;
+        }
+
+        public NetworkResponse build() {
+            return new NetworkResponse(this);
+        }
+    }
+}
Index: TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/network/NetworkLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/network/NetworkLogger.java b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/network/NetworkLogger.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/network/NetworkLogger.java	(date 1467729866000)
@@ -0,0 +1,10 @@
+package ibmmobileappbuilder.analytics.network;
+
+import ibmmobileappbuilder.analytics.NetworkResponse;
+
+public interface NetworkLogger {
+
+    void logRequest(String url, String httpMethod);
+    void logResponse(NetworkResponse networkResponse);
+
+}
Index: TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/model/AnalyticsInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/model/AnalyticsInfo.java b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/model/AnalyticsInfo.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/main/java/ibmmobileappbuilder/analytics/model/AnalyticsInfo.java	(date 1467729866000)
@@ -0,0 +1,73 @@
+package ibmmobileappbuilder.analytics.model;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class AnalyticsInfo {
+
+    private final String action;
+    private final String target;
+    private final String dataSource;
+
+    public String getAction() {
+        return action;
+    }
+
+    public String getTarget() {
+        return target;
+    }
+
+    public String getDataSource() {
+        return dataSource;
+    }
+
+    public Map<String, String> toMap() {
+        Map<String, String> map = new HashMap<>(2);
+        putEntryIfNotNull(map, "action", action);
+        putEntryIfNotNull(map, "target", target);
+        putEntryIfNotNull(map, "datasource", dataSource);
+        return map;
+
+    }
+
+    private void putEntryIfNotNull(Map<String, String> map, String key, String value) {
+        if (value != null) {
+            map.put(key, value);
+        }
+    }
+
+    private AnalyticsInfo(Builder builder) {
+        this.action = builder.action;
+        this.target = builder.target;
+        this.dataSource = builder.dataSource;
+    }
+
+    public static class Builder {
+        private String action;
+        private String target;
+        private String dataSource;
+
+        public static Builder analyticsInfo() {
+            return new Builder();
+        }
+
+        public Builder withAction(String action) {
+            this.action = action;
+            return this;
+        }
+
+        public Builder withTarget(String target) {
+            this.target = target;
+            return this;
+        }
+
+        public Builder withDataSource(String dataSource) {
+            this.dataSource = dataSource;
+            return this;
+        }
+
+        public AnalyticsInfo build() {
+            return new AnalyticsInfo(this);
+        }
+    }
+}
Index: TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/GoogleAnalyticsReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/GoogleAnalyticsReporter.java b/TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/GoogleAnalyticsReporter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/GoogleAnalyticsReporter.java	(date 1467729866000)
@@ -0,0 +1,55 @@
+package ibmmobileappbuilder.analytics;
+
+import android.app.Application;
+
+import com.google.android.gms.analytics.GoogleAnalytics;
+import com.google.android.gms.analytics.HitBuilders;
+import com.google.android.gms.analytics.Tracker;
+
+import junit.framework.Assert;
+import java.util.Map;
+
+public class GoogleAnalyticsReporter implements AnalyticsReporter {
+
+    private Tracker tracker;
+    private final int configurationId;
+
+    public GoogleAnalyticsReporter(int configurationId) {
+        this.configurationId = configurationId;
+    }
+
+    @Override
+    public void init(Application app) {
+        tracker = GoogleAnalytics.getInstance(app).newTracker(configurationId);
+    }
+
+    @Override
+    public void sendView(String screenName) {
+        assertTrackerNotNull();
+        tracker.setScreenName(screenName);
+        tracker.send(new HitBuilders.ScreenViewBuilder().build());
+
+    }
+
+    @Override
+    public void sendEvent(Map<String, String> paramsMap) {
+        assertTrackerNotNull();
+        tracker.send(new HitBuilders.EventBuilder()
+                        .setCategory(paramsMap.get("category"))
+                        .setAction(paramsMap.get("action"))
+                        .build()
+        );
+    }
+
+    @Override
+    public void sendHandledException(String tag, String message, Throwable exception) {
+        tracker.send(new HitBuilders.ExceptionBuilder()
+                .setDescription(message)
+                .setFatal(false)
+                .build());
+    }
+
+    private void assertTrackerNotNull() {
+        Assert.assertNotNull("You must call first init with a valid context", tracker);
+    }
+}
Index: TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java b/TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/analytics/src/common/java/ibmmobileappbuilder/analytics/injector/AnalyticsReporterInjector.java	(date 1467729866000)
@@ -0,0 +1,22 @@
+package ibmmobileappbuilder.analytics.injector;
+
+import android.content.Context;
+import android.util.Log;
+
+import java.util.Properties;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.analytics.LogAnalyticsReporter;
+
+public class AnalyticsReporterInjector {
+
+    private final static AnalyticsReporter LOG_ANALYTICS_REPORTER = new LogAnalyticsReporter();
+
+    public static AnalyticsReporter analyticsReporter() {
+        return LOG_ANALYTICS_REPORTER;
+    }
+
+    public static AnalyticsReporter analyticsReporter(Context context) {
+        return LOG_ANALYTICS_REPORTER;
+    }
+}
Index: TravelAnalyser11/MFP/apps/TravelAnalyser11_Android/application-descriptor.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/MFP/apps/TravelAnalyser11_Android/application-descriptor.xml b/TravelAnalyser11/MFP/apps/TravelAnalyser11_Android/application-descriptor.xml
new file mode 100644
--- /dev/null	(date 1475330010000)
+++ b/TravelAnalyser11/MFP/apps/TravelAnalyser11_Android/application-descriptor.xml	(date 1475330010000)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+    Licensed Materials - Property of IBM
+    5725-I43 (C) Copyright IBM Corp. 2011, 2013, 2015. All Rights Reserved.
+    US Government Users Restricted Rights - Use, duplication or
+    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
+-->
+<nativeAndroidApp id="TravelAnalyser11_Android" platformVersion="7.1.11"
+	version="1.0" xmlns="http://www.worklight.com/native-android-descriptor">
+	
+	<displayName>TravelAnalyser11_Android</displayName>
+	<description></description>
+	<publicSigningKey></publicSigningKey>
+	<packageName></packageName>
+	<accessTokenExpiration>3600</accessTokenExpiration>
+	<userIdentityRealms></userIdentityRealms>
+	<!-- 
+        Define the license app type for determining number of tokens to be allocated. 
+        Possible values are 'APPLICATION', 'ADDITIONAL_BRAND_DEPLOYMENT', 'NON_PRODUCTION'.
+     -->
+	<licenseAppType>APPLICATION</licenseAppType>
+	<!-- 
+        Define the target category for generating ADDRESSABLE DEVICE license reports. 
+        Possible values are 'UNDEFINED', 'B2E', 'B2C'.
+     -->
+    <targetCategory>UNDEFINED</targetCategory>
+ 	
+</nativeAndroidApp>
\ No newline at end of file
Index: TravelAnalyser11/core/proguard-rules.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/proguard-rules.txt b/TravelAnalyser11/core/proguard-rules.txt
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/proguard-rules.txt	(date 1467729866000)
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:/Program Files (x86)/Android/android-studio/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
\ No newline at end of file
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDetailPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDetailPresenter.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDetailPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDetailPresenter.java	(date 1467729866000)
@@ -0,0 +1,13 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import ibmmobileappbuilder.ds.CrudDatasource;
+import ibmmobileappbuilder.mvp.view.DetailView;
+
+public class AnalyticsDetailPresenter<T> extends DetailPresenter<T> {
+
+    public AnalyticsDetailPresenter(CrudDatasource<T> datasource, DetailView view) {
+        super(datasource, view);
+    }
+
+
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDefaultFormPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDefaultFormPresenter.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDefaultFormPresenter.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/mvp/presenter/AnalyticsDefaultFormPresenter.java	(date 1467729866000)
@@ -0,0 +1,11 @@
+package ibmmobileappbuilder.mvp.presenter;
+
+import ibmmobileappbuilder.ds.CrudDatasource;
+import ibmmobileappbuilder.mvp.view.FormView;
+
+public class AnalyticsDefaultFormPresenter<T> extends DefaultFormPresenter<T> {
+
+    public AnalyticsDefaultFormPresenter(CrudDatasource<T> datasource, FormView<T> view) {
+        super(datasource, view);
+    }
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/PageViewBehaviorInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/PageViewBehaviorInjector.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/PageViewBehaviorInjector.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/PageViewBehaviorInjector.java	(date 1467729866000)
@@ -0,0 +1,15 @@
+package ibmmobileappbuilder.analytics.injector;
+
+import ibmmobileappbuilder.behaviors.AnalyticsBehavior;
+import ibmmobileappbuilder.behaviors.Behavior;
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+public class PageViewBehaviorInjector {
+
+    public static Behavior pageViewBehavior(String pageName) {
+        return new AnalyticsBehavior(analyticsReporter(getApplicationContext()), pageName);
+    }
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/network/RetrofitResponseNetworkLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/network/RetrofitResponseNetworkLogger.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/network/RetrofitResponseNetworkLogger.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/network/RetrofitResponseNetworkLogger.java	(date 1467729866000)
@@ -0,0 +1,36 @@
+package ibmmobileappbuilder.analytics.network;
+
+import android.support.annotation.Nullable;
+
+import retrofit.client.Response;
+import retrofit.mime.TypedByteArray;
+
+import static ibmmobileappbuilder.analytics.NetworkResponse.Builder.networkResponse;
+
+public class RetrofitResponseNetworkLogger {
+
+    private final NetworkLogger networkLogger;
+
+    public RetrofitResponseNetworkLogger(NetworkLogger networkLogger) {
+        this.networkLogger = networkLogger;
+    }
+
+    public void logResponse(Response response) {
+        int statusCode = response.getStatus();
+        networkLogger.logResponse(networkResponse()
+                        .withUrl(response.getUrl())
+                        .withStatusCode(String.valueOf(statusCode))
+                        .withBody(getResponseBodyIfRequired(response, statusCode))
+                        .build()
+        );
+    }
+
+    @Nullable
+    private String getResponseBodyIfRequired(Response response, int statusCode) {
+        if (statusCode < 300 || !(response.getBody() instanceof TypedByteArray)) {
+            return null;
+        } else {
+            return new String(((TypedByteArray) response.getBody()).getBytes());
+        }
+    }
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsRefreshBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsRefreshBehavior.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsRefreshBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsRefreshBehavior.java	(date 1467729866000)
@@ -0,0 +1,38 @@
+package ibmmobileappbuilder.behaviors;
+
+import android.view.MenuItem;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector;
+import ibmmobileappbuilder.ui.Refreshable;
+
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Add refresh pattern to lists
+ */
+public class AnalyticsRefreshBehavior extends RefreshBehavior {
+
+    private final AnalyticsReporter analyticsReporter;
+    private final String datasource;
+
+    public AnalyticsRefreshBehavior(Refreshable fragment, String datasource) {
+        super(fragment);
+        this.datasource = datasource;
+        analyticsReporter = AnalyticsReporterInjector.analyticsReporter(getApplicationContext());
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        boolean handled = super.onOptionsItemSelected(item);
+        if (handled) {
+            analyticsReporter.sendEvent(analyticsInfo()
+                            .withAction("refresh")
+                            .withDataSource(datasource)
+                            .build().toMap()
+            );
+        }
+        return handled;
+    }
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/RetrofitResponseNetworkLoggerInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/RetrofitResponseNetworkLoggerInjector.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/RetrofitResponseNetworkLoggerInjector.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/analytics/injector/RetrofitResponseNetworkLoggerInjector.java	(date 1467729866000)
@@ -0,0 +1,12 @@
+package ibmmobileappbuilder.analytics.injector;
+
+import ibmmobileappbuilder.analytics.network.RetrofitResponseNetworkLogger;
+
+import static ibmmobileappbuilder.analytics.injector.NetworkLoggerInjector.networkLogger;
+
+public class RetrofitResponseNetworkLoggerInjector {
+
+    public static RetrofitResponseNetworkLogger retrofitNetworkLogger() {
+        return new RetrofitResponseNetworkLogger(networkLogger());
+    }
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSearchBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSearchBehavior.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSearchBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSearchBehavior.java	(date 1467729866000)
@@ -0,0 +1,35 @@
+package ibmmobileappbuilder.behaviors;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.ui.Filterable;
+
+import static ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector.analyticsReporter;
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+import static ibmmobileappbuilder.injectors.ApplicationInjector.getApplicationContext;
+
+/**
+ * Adds an action bar search interface
+ */
+public class AnalyticsSearchBehavior extends SearchBehavior {
+
+    private final AnalyticsReporter analyticsReporter;
+    private final String datasource;
+
+    public AnalyticsSearchBehavior(Filterable f, String datasource) {
+        super(f);
+        this.datasource = datasource;
+        analyticsReporter = analyticsReporter(getApplicationContext());
+
+    }
+
+    public void refreshSearch(String newFilter) {
+        super.refreshSearch(newFilter);
+
+        analyticsReporter.sendEvent(analyticsInfo()
+                        .withAction("search")
+                        .withTarget(newFilter)
+                        .withDataSource(datasource)
+                        .build().toMap()
+        );
+    }
+}
Index: TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/ibm/java/ibmmobileappbuilder/behaviors/AnalyticsSwipeRefreshBehavior.java	(date 1467729866000)
@@ -0,0 +1,41 @@
+package ibmmobileappbuilder.behaviors;
+
+import ibmmobileappbuilder.analytics.AnalyticsReporter;
+import ibmmobileappbuilder.analytics.injector.AnalyticsReporterInjector;
+import ibmmobileappbuilder.injectors.ApplicationInjector;
+import ibmmobileappbuilder.ui.ListGridFragment;
+
+import static ibmmobileappbuilder.analytics.model.AnalyticsInfo.Builder.analyticsInfo;
+
+/**
+ * Pull to refresh pattern for listing fragments
+ */
+public class AnalyticsSwipeRefreshBehavior extends SwipeRefreshBehavior {
+
+    private AnalyticsReporter analyticsReporter;
+
+    public AnalyticsSwipeRefreshBehavior(ListGridFragment<?> fragment) {
+        super(fragment);
+        try {
+            Class.forName("AnalyticsReporterInjector",
+                    false,
+                    ClassLoader.getSystemClassLoader()
+            );
+            analyticsReporter = AnalyticsReporterInjector.analyticsReporter(ApplicationInjector.getApplicationContext());
+        } catch (ClassNotFoundException e) {
+            analyticsReporter = null;
+        }
+    }
+
+    @Override
+    public void onRefresh() {
+        super.onRefresh();
+        if (analyticsReporter == null) {
+            return;
+        }
+        analyticsReporter.sendEvent(analyticsInfo()
+                        .withAction("pullToRefresh")
+                        .build().toMap()
+        );
+    }
+}
Index: TravelAnalyser11/core/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/AndroidManifest.xml b/TravelAnalyser11/core/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/AndroidManifest.xml	(date 1467729866000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest package="ibmmobileappbuilder.core">
+
+    <application/>
+
+</manifest>
Index: TravelAnalyser11/core/src/main/res/menu/search_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/menu/search_menu.xml b/TravelAnalyser11/core/src/main/res/menu/search_menu.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/menu/search_menu.xml	(date 1467729866000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+      xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item android:id="@+id/search"
+          android:title="@string/search_title"
+          app:showAsAction="always"
+          app:actionViewClass="android.support.v7.widget.SearchView"/>
+</menu>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/menu/filter_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/menu/filter_menu.xml b/TravelAnalyser11/core/src/main/res/menu/filter_menu.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/menu/filter_menu.xml	(date 1467729866000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+      xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item android:id="@+id/filter"
+          android:title="@string/filter"
+          android:icon="@drawable/ic_action_filter_alpha"
+          app:showAsAction="ifRoom"/>
+</menu>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/menu/share_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/menu/share_menu.xml b/TravelAnalyser11/core/src/main/res/menu/share_menu.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/menu/share_menu.xml	(date 1467729866000)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+      xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item android:id="@+id/action_share"
+          android:title="@string/share"
+          app:showAsAction="ifRoom"
+          app:actionProviderClass="android.support.v7.widget.ShareActionProvider" />
+</menu>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/menu/delete_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/menu/delete_menu.xml b/TravelAnalyser11/core/src/main/res/menu/delete_menu.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/menu/delete_menu.xml	(date 1467729866000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+<item android:id="@+id/action_delete"
+    android:title="@string/remove_item"
+    android:icon="@drawable/ic_delete_alpha"
+    app:showAsAction="always" />
+</menu>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/menu/refresh_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/menu/refresh_menu.xml b/TravelAnalyser11/core/src/main/res/menu/refresh_menu.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/menu/refresh_menu.xml	(date 1467729866000)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+      xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item android:id="@+id/action_refresh"
+          android:title="@string/action_refresh"
+          app:showAsAction="ifRoom"
+          android:icon="@drawable/ic_action_refresh_alpha"/>
+</menu>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/selection_dialog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/selection_dialog.xml b/TravelAnalyser11/core/src/main/res/layout/selection_dialog.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/selection_dialog.xml	(date 1467729866000)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/listContainer"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:paddingLeft="@dimen/activity_margin"
+    android:paddingRight="@dimen/activity_margin">
+
+    <android.support.v7.widget.SearchView
+        android:id="@+id/search"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_weight="0"
+        android:textColorHint="@android:color/black"
+        android:visibility="gone"
+        app:theme="@style/SelectionDialog.SearchView" />
+
+    <ListView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:clipToPadding="true"
+        android:paddingTop="@dimen/view_margin_vertical"
+        android:scrollbarStyle="outsideOverlay" />
+
+    <Button
+        android:id="@+id/search_btn"
+        style="?android:attr/borderlessButtonStyle"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_weight="0"
+        android:text="@android:string/ok"
+        android:textColor="@android:color/black" />
+
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/datetime_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/datetime_picker.xml b/TravelAnalyser11/core/src/main/res/layout/datetime_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/datetime_picker.xml	(date 1467729866000)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+       xmlns:tools="http://schemas.android.com/tools">
+
+    <TextView android:id="@+id/label"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField.FormLabel"
+        tools:text="Label" />
+
+    <LinearLayout
+        android:id="@+id/container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:paddingRight="@dimen/activity_margin_horizontal">
+
+        <TextView
+                android:id="@+id/dateValue"
+                android:layout_width="0dp"
+                android:layout_height="?android:attr/listPreferredItemHeightSmall"
+                android:layout_weight="1"
+                android:hint="@string/select_date"
+                android:gravity="center_vertical"
+                android:maxLines="1"
+                android:ellipsize="end"
+                android:clickable="true"
+                android:background="?attr/selectableItemBackground"
+                style="@style/FormField.FormValue" />
+
+        <TextView android:id="@+id/timeValue"
+            android:layout_width="0dp"
+            android:layout_height="?android:attr/listPreferredItemHeightSmall"
+            android:layout_weight="1"
+            android:hint="@string/select_time"
+            android:gravity="center_vertical"
+            android:maxLines="1"
+            android:ellipsize="end"
+            android:clickable="true"
+            android:background="?attr/selectableItemBackground"
+            style="@style/FormField.FormValue" />
+
+        <ImageButton
+            android:id="@+id/dateReset"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="0"
+            android:layout_gravity="center"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/abc_ic_clear_mtrl_alpha"
+            android:tint="@color/textColorSecondary"
+            />
+    </LinearLayout>
+
+    <TextView android:id="@+id/errorView"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField"
+        android:textAppearance="@style/TextAppearance.Design.Error"
+        android:visibility="gone"/>
+
+</merge>
+
Index: TravelAnalyser11/core/src/main/res/layout/drawer_header.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/drawer_header.xml b/TravelAnalyser11/core/src/main/res/layout/drawer_header.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/drawer_header.xml	(date 1467729866000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             android:layout_width="match_parent"
+             android:layout_height="56dp"
+             android:background="@color/primaryDark">
+
+</FrameLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/listselection_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/listselection_picker.xml b/TravelAnalyser11/core/src/main/res/layout/listselection_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/listselection_picker.xml	(date 1467729866000)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <TextView android:id="@+id/label"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:textAppearance="?android:attr/textAppearanceMedium"
+              style="@style/FormField.FormLabel"
+            />
+
+    <TextView android:id="@+id/selection_value"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:gravity="center_vertical"
+              android:textAppearance="?android:attr/textAppearanceSmall"
+              android:maxLines="1"
+              android:ellipsize="end"
+              android:hint="@string/select"
+              style="@style/FormField.FormLabel" />
+
+</merge>
+
Index: TravelAnalyser11/core/src/main/res/layout/menu_item_nophoto.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/menu_item_nophoto.xml b/TravelAnalyser11/core/src/main/res/layout/menu_item_nophoto.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/menu_item_nophoto.xml	(date 1467729866000)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:padding="8dp">
+
+    <TextView android:id="@+id/title"
+          android:textAppearance="?android:textAppearanceMedium"
+          android:layout_width="match_parent"
+          android:layout_height="48dp"
+          android:gravity="center_vertical" />
+
+</FrameLayout>
Index: TravelAnalyser11/core/src/main/res/layout/file_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/file_picker.xml b/TravelAnalyser11/core/src/main/res/layout/file_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/file_picker.xml	(date 1467729866000)
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:padding="@dimen/activity_margin_horizontal">
+
+        <ImageView
+            android:id="@+id/image"
+            android:layout_width="96dp"
+            android:layout_height="96dp"
+            android:layout_weight="0"
+            android:layout_gravity="center"
+            android:scaleType="centerCrop"
+            android:src="@drawable/ic_image_photo"
+            android:clickable="true" />
+
+        <TextView
+            android:id="@+id/label"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            tools:text="Label"
+            android:gravity="center_vertical"
+            android:maxLines="1"
+            android:ellipsize="end"
+            android:clickable="true"
+            android:layout_weight="1"
+            android:background="?attr/selectableItemBackground"
+            style="@style/FormField.FormValue" />
+
+    </LinearLayout>
+
+    <TextView android:id="@+id/error"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField"
+        android:textAppearance="@style/TextAppearance.Design.Error"
+        tools:text="Error"
+        android:visibility="gone"/>
+
+</merge>
+
Index: TravelAnalyser11/core/src/main/res/layout/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/activity_login.xml b/TravelAnalyser11/core/src/main/res/layout/activity_login.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/activity_login.xml	(date 1467729866000)
@@ -0,0 +1,110 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             xmlns:tools="http://schemas.android.com/tools"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent"
+             android:background="@color/window_background"
+             android:gravity="center_vertical|center_horizontal">
+
+    <!-- Login progress -->
+    <ProgressBar
+            android:id="@+id/login_progress"
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:visibility="gone"/>
+
+    <ScrollView
+            android:id="@+id/login_form"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:fillViewport="true">
+
+        <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:layout_gravity="center"
+                android:gravity="center"
+                android:paddingBottom="@dimen/activity_margin_vertical"
+                android:paddingLeft="@dimen/activity_margin_horizontal"
+                android:paddingRight="@dimen/activity_margin_horizontal"
+                android:paddingTop="@dimen/activity_margin_vertical">
+
+            <LinearLayout
+                    android:id="@+id/app_name_container"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="24dp"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_margin="4dp"
+                        android:src="@mipmap/ic_launcher"/>
+
+                <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:gravity="center_horizontal"
+                        android:text="@string/app_name"
+                        android:layout_margin="4dp"
+                        android:textAppearance="?android:attr/textAppearanceLarge"/>
+            </LinearLayout>
+
+            <LinearLayout
+                    android:id="@+id/email_login_form"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                <EditText
+                        android:id="@+id/email"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginBottom="8dp"
+                        android:hint="@string/prompt_email"
+                        android:imeOptions="actionNext"
+                        android:inputType="textEmailAddress"
+                        android:maxLines="1"
+                        android:nextFocusDown="@+id/password"
+                        android:singleLine="true"/>
+
+                <EditText
+                        android:id="@+id/password"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="8dp"
+                        android:hint="@string/prompt_password"
+                        android:imeOptions="actionDone"
+                        android:inputType="textPassword"
+                        android:maxLines="1"
+                        android:password="true"
+                        android:singleLine="true"/>
+
+                <Button
+                        android:id="@+id/email_sign_in_button"
+                        style="@style/SignInEditText"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="24dp"
+                        android:background="@drawable/button_login_background"
+                        android:text="Log In"
+                        android:textColor="@color/textColor"
+                        android:textStyle="bold"/>
+
+            </LinearLayout>
+
+
+        </LinearLayout>
+    </ScrollView>
+
+</FrameLayout>
+
+
+
Index: TravelAnalyser11/core/src/main/res/layout/listing_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/listing_activity.xml b/TravelAnalyser11/core/src/main/res/layout/listing_activity.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/listing_activity.xml	(date 1467729866000)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:orientation="vertical"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent">
+
+    <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:minHeight="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            android:elevation="4dp"
+            android:theme="@style/ToolbarOverlayTheme"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <FrameLayout
+            android:orientation="vertical" android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+        <ImageView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:scaleType="centerCrop"
+                android:src="@drawable/activity_background_image"
+                />
+
+        <FrameLayout android:id="@+id/content_frame"
+                     android:layout_width="match_parent"
+                     android:layout_height="match_parent"/>
+
+    </FrameLayout>
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/detail_webview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/detail_webview.xml b/TravelAnalyser11/core/src/main/res/layout/detail_webview.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/detail_webview.xml	(date 1467729866000)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical" android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <WebView android:id="@+id/webView"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+             android:layout_gravity="top"
+             android:padding="16dp"
+             android:scrollbarStyle="outsideOverlay"/>
+
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/tristate_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/tristate_picker.xml b/TravelAnalyser11/core/src/main/res/layout/tristate_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/tristate_picker.xml	(date 1467729866000)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <TextView android:id="@+id/label"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        style="@style/FormLabel"
+        tools:text="Label" />
+
+    <Spinner android:id="@+id/spinner"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_weight="0"
+        style="@style/PickerSpinner" />
+
+</merge>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/geopoint_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/geopoint_picker.xml b/TravelAnalyser11/core/src/main/res/layout/geopoint_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/geopoint_picker.xml	(date 1467729866000)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+       xmlns:tools="http://schemas.android.com/tools">
+
+    <TextView android:id="@+id/label"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField.FormLabel"
+        android:layout_marginTop="@dimen/view_margin_vertical"
+        tools:text="Label" />
+
+    <LinearLayout
+        android:id="@+id/container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:paddingRight="@dimen/activity_margin_horizontal"
+        android:paddingLeft="@dimen/activity_margin_horizontal">
+
+        <EditText
+            android:id="@+id/latitude"
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="?listPreferredItemHeightSmall"
+            android:hint="@string/latitude"
+            android:inputType="numberDecimal|numberSigned"
+            tools:text="@string/latitude"
+            style="@style/EditTextStyle" />
+
+        <EditText
+            android:id="@+id/longitude"
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="?listPreferredItemHeightSmall"
+            android:layout_marginLeft="@dimen/view_margin_horizontal"
+            android:hint="@string/longitude"
+            android:inputType="numberDecimal|numberSigned"
+            tools:text="@string/longitude"
+            style="@style/EditTextStyle"/>
+
+        <ImageButton
+            android:id="@+id/my_location_button"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:layout_weight="0"
+            android:layout_gravity="center"
+            android:background="?attr/selectableItemBackground"
+            android:src="@android:drawable/ic_menu_mylocation"
+            android:hint="@string/get_my_location"
+            android:tint="@color/textColor"
+            />
+    </LinearLayout>
+
+    <TextView android:id="@+id/error"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField"
+        android:textAppearance="@style/TextAppearance.Design.Error"
+        tools:text="Error"
+        android:visibility="gone"/>
+
+</merge>
+
Index: TravelAnalyser11/core/src/main/res/layout/detail_pager.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/detail_pager.xml b/TravelAnalyser11/core/src/main/res/layout/detail_pager.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/detail_pager.xml	(date 1467729866000)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <android.support.v4.view.ViewPager
+            android:id="@+id/pager"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/fragment_grid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/fragment_grid.xml b/TravelAnalyser11/core/src/main/res/layout/fragment_grid.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/fragment_grid.xml	(date 1467729866000)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <GridView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:clipToPadding="false"
+        android:drawSelectorOnTop="true"
+        android:horizontalSpacing="@dimen/grid_margin"
+        android:numColumns="@integer/grid_columns"
+        android:padding="@dimen/activity_margin"
+        android:scrollbarStyle="outsideOverlay"
+        android:verticalSpacing="@dimen/grid_menu_margin" />
+
+    <ProgressBar
+        android:id="@+id/progressContainer"
+        style="?android:attr/progressBarStyleLarge"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:visibility="gone" />
+
+    <TextView
+        android:id="@android:id/empty"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:text="@string/no_items_found"
+        android:visibility="gone" />
+</FrameLayout>
+
Index: TravelAnalyser11/core/src/main/res/layout/filter_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/filter_activity.xml b/TravelAnalyser11/core/src/main/res/layout/filter_activity.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/filter_activity.xml	(date 1467729866000)
@@ -0,0 +1,23 @@
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:layout_width="match_parent" android:layout_height="match_parent"
+              android:orientation="vertical">
+
+    <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:minHeight="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            android:elevation="4dp"
+            android:theme="@style/ToolbarOverlayTheme"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <FrameLayout android:id="@+id/container"
+                 android:layout_width="match_parent" android:layout_height="match_parent"
+                 tools:context="ibmmobileappbuilder.ui.FilterActivity" tools:ignore="MergeRootFrame"/>
+
+</LinearLayout>
Index: TravelAnalyser11/core/src/main/res/layout/menu_item_grid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/menu_item_grid.xml b/TravelAnalyser11/core/src/main/res/layout/menu_item_grid.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/menu_item_grid.xml	(date 1467729866000)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent">
+
+    <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingTop="@dimen/list_card_margin_top"
+            android:paddingBottom="@dimen/list_card_margin_bottom"
+            android:paddingLeft="@dimen/card_margin_horizontal"
+            android:paddingRight="@dimen/card_margin_horizontal"
+            android:background="?attr/selectableItemBackground"
+            >
+
+        <ImageView android:id="@+id/image"
+                   android:layout_width="80dp"
+                   android:layout_height="80dp"
+                   android:scaleType="fitCenter"
+                   android:layout_gravity="center"
+                   android:layout_marginBottom="@dimen/view_margin_vertical"
+                />
+
+        <TextView android:id="@+id/title"
+                  android:layout_width="match_parent"
+                  android:layout_height="wrap_content"
+                  android:gravity="center"
+                  android:singleLine="true"
+                  android:ellipsize="end"/>
+
+    </LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/tristate_picker_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/tristate_picker_item.xml b/TravelAnalyser11/core/src/main/res/layout/tristate_picker_item.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/tristate_picker_item.xml	(date 1467729866000)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+
+
+<TextView
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/listPreferredItemHeightSmall"
+    android:gravity="center_vertical|start"
+    android:paddingLeft="16dp"
+    android:paddingRight="16dp"
+    style="@style/TextStyle"
+    xmlns:android="http://schemas.android.com/apk/res/android" />
Index: TravelAnalyser11/core/src/main/res/layout/sliding_pane_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/sliding_pane_activity.xml b/TravelAnalyser11/core/src/main/res/layout/sliding_pane_activity.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/sliding_pane_activity.xml	(date 1467729866000)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             android:orientation="vertical" android:layout_width="match_parent"
+             android:layout_height="match_parent">
+
+    <ImageView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="centerCrop"
+            android:src="@drawable/activity_background_image"/>
+
+    <android.support.v4.widget.SlidingPaneLayout
+            android:id="@+id/slidingPane"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+        <FrameLayout android:id="@+id/content_frame"
+                     android:layout_height="match_parent"
+                     android:layout_width="match_parent"
+                     android:layout_weight="1"/>
+
+        <FrameLayout android:id="@+id/detail_frame"
+                     android:layout_width="match_parent"
+                     android:layout_height="match_parent"
+                     android:clickable="true"
+                />
+
+
+    </android.support.v4.widget.SlidingPaneLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/pager_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/pager_activity.xml b/TravelAnalyser11/core/src/main/res/layout/pager_activity.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/pager_activity.xml	(date 1467729866000)
@@ -0,0 +1,19 @@
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent">
+
+    <ImageView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="centerCrop"
+            android:src="@drawable/activity_background_image"
+            />
+
+    <android.support.v4.view.ViewPager
+            android:id="@+id/pager"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+
+</FrameLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/detail_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/detail_activity.xml b/TravelAnalyser11/core/src/main/res/layout/detail_activity.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/detail_activity.xml	(date 1467729866000)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:orientation="vertical"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent">
+
+    <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:minHeight="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            android:elevation="4dp"
+            android:theme="@style/ToolbarOverlayTheme"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+    <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                 android:orientation="vertical" android:layout_width="match_parent"
+                 android:layout_height="match_parent">
+
+        <ImageView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:scaleType="centerCrop"
+                android:src="@drawable/activity_background_image"
+                />
+
+        <!-- The main content view -->
+        <FrameLayout
+                android:id="@+id/content_frame"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"/>
+
+    </FrameLayout>
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/dialog_item_multiple_choice.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/dialog_item_multiple_choice.xml b/TravelAnalyser11/core/src/main/res/layout/dialog_item_multiple_choice.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/dialog_item_multiple_choice.xml	(date 1467729866000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v7.widget.AppCompatCheckedTextView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="?android:attr/listPreferredItemHeightSmall"
+    app:theme="@style/SelectionDialog.CheckedTextView"/>
Index: TravelAnalyser11/core/src/main/res/layout/daterange_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/daterange_picker.xml b/TravelAnalyser11/core/src/main/res/layout/daterange_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/daterange_picker.xml	(date 1467729866000)
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+       xmlns:tool="http://schemas.android.com/tools">
+
+    <TextView android:id="@+id/label_min"
+        android:layout_width="match_parent"
+        android:layout_height="?attr/listPreferredItemHeightSmall"
+        style="@style/FormField.FormLabel"
+        tool:text="Date" />
+
+    <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+        <TextView android:id="@+id/min_value"
+                  android:layout_width="0dp"
+                  android:layout_height="?android:attr/listPreferredItemHeightSmall"
+                  android:layout_weight="1"
+                  android:textAppearance="?android:attr/textAppearanceSmall"
+                  android:maxLines="1"
+                  android:ellipsize="end"
+                  android:hint="@string/minimum_date"
+                  android:clickable="true"
+                  android:background="?attr/selectableItemBackground"
+                  android:gravity="center_vertical"
+                  style="@style/FormField.FormLabel" />
+
+        <TextView android:id="@+id/max_value"
+                  android:layout_width="0dp"
+                  android:layout_height="?android:attr/listPreferredItemHeightSmall"
+                  android:layout_weight="1"
+                  android:textAppearance="?android:attr/textAppearanceSmall"
+                  android:maxLines="1"
+                  android:ellipsize="end"
+                  android:hint="@string/maximum_date"
+                  android:clickable="true"
+                  android:background="?attr/selectableItemBackground"
+                  android:gravity="center_vertical"
+                  style="@style/FormField.FormLabel" />
+
+    </LinearLayout>
+
+    <TextView android:id="@+id/errorView"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField"
+        android:textAppearance="@style/TextAppearance.Design.Error"
+        android:visibility="gone"/>
+
+</merge>
+
Index: TravelAnalyser11/core/src/main/res/layout/fab.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/fab.xml b/TravelAnalyser11/core/src/main/res/layout/fab.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/fab.xml	(date 1467729866000)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+
+<android.support.design.widget.FloatingActionButton
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/fab"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="bottom|end"
+    app:elevation="6dp"
+    app:pressedTranslationZ="12dp"
+    app:borderWidth="0dp"
+    android:layout_margin="@dimen/fab_compat_margin"
+    android:visibility="gone"/>
Index: TravelAnalyser11/core/src/main/res/layout/drawer_activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/drawer_activity_main.xml b/TravelAnalyser11/core/src/main/res/layout/drawer_activity_main.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/drawer_activity_main.xml	(date 1467729866000)
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<android.support.v4.widget.DrawerLayout
+    android:id="@+id/drawer_layout"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true">
+    <!-- The main content view -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            android:minHeight="?attr/actionBarSize"
+            android:theme="@style/ToolbarOverlayTheme"
+            app:elevation="4dp"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <ImageView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:scaleType="centerCrop"
+                android:src="@drawable/activity_background_image"/>
+
+            <FrameLayout
+                android:id="@+id/content_frame"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"/>
+        </FrameLayout>
+
+    </LinearLayout>
+
+    <android.support.design.widget.NavigationView
+        android:id="@+id/drawerNavigationView"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:background="@color/window_background"
+        app:itemBackground="@drawable/drawer_item_background"
+        app:itemTextColor="@color/textColor"
+        app:headerLayout="@layout/drawer_header"
+        app:menu="@menu/drawer"/>
+
+
+</android.support.v4.widget.DrawerLayout>
Index: TravelAnalyser11/core/src/main/res/layout/fragment_grid_4cols.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/fragment_grid_4cols.xml b/TravelAnalyser11/core/src/main/res/layout/fragment_grid_4cols.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/fragment_grid_4cols.xml	(date 1467729866000)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <GridView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:clipToPadding="false"
+        android:drawSelectorOnTop="true"
+        android:horizontalSpacing="@dimen/grid_margin"
+        android:numColumns="@integer/grid_columns_4"
+        android:padding="@dimen/activity_margin"
+        android:scrollbarStyle="outsideOverlay"
+        android:verticalSpacing="@dimen/grid_margin" />
+
+    <ProgressBar
+        android:id="@+id/progressContainer"
+        style="?android:attr/progressBarStyleLarge"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:visibility="gone" />
+
+    <TextView
+        android:id="@android:id/empty"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:text="@string/no_items_found"
+        android:visibility="gone" />
+</FrameLayout>
Index: TravelAnalyser11/core/src/main/res/layout/list_footer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/list_footer.xml b/TravelAnalyser11/core/src/main/res/layout/list_footer.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/list_footer.xml	(date 1467729866000)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="horizontal"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:padding="12dp"
+              android:baselineAligned="true"
+              android:gravity="center">
+
+    <ProgressBar
+            android:layout_height="24dp"
+            android:layout_width="24dp"/>
+
+</LinearLayout>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/fragment_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/fragment_list.xml b/TravelAnalyser11/core/src/main/res/layout/fragment_list.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/fragment_list.xml	(date 1467729866000)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ListView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:clipToPadding="false"
+        android:scrollbarStyle="outsideOverlay" />
+
+    <ProgressBar
+        android:id="@+id/progressContainer"
+        style="?android:attr/progressBarStyleLarge"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:visibility="gone" />
+
+    <TextView
+        android:id="@android:id/empty"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:text="@string/no_items_found"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:visibility="gone" />
+
+</FrameLayout>
Index: TravelAnalyser11/core/src/main/res/layout/date_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/date_picker.xml b/TravelAnalyser11/core/src/main/res/layout/date_picker.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/date_picker.xml	(date 1467729866000)
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <TextView
+        android:id="@+id/label"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField.FormLabel"
+        tools:text="Label" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:paddingRight="@dimen/activity_margin_horizontal"
+        >
+        <TextView
+            android:id="@+id/dateValue"
+            android:layout_width="0dp"
+            android:layout_height="?attr/listPreferredItemHeightSmall"
+            android:hint="@string/select"
+            android:gravity="center_vertical"
+            android:maxLines="1"
+            android:ellipsize="end"
+            android:clickable="true"
+            android:layout_weight="1"
+            android:background="?attr/selectableItemBackground"
+            style="@style/FormField.FormValue" />
+
+        <ImageButton
+            android:id="@+id/dateReset"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="0"
+            android:layout_gravity="center"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/abc_ic_clear_mtrl_alpha"
+            android:tint="@color/textColorSecondary"
+            />
+    </LinearLayout>
+
+    <TextView android:id="@+id/errorView"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        style="@style/FormField"
+        android:textAppearance="@style/TextAppearance.Design.Error"
+        android:visibility="gone"/>
+
+</merge>
+
Index: TravelAnalyser11/core/src/main/res/layout/menu_item_photoleft.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/menu_item_photoleft.xml b/TravelAnalyser11/core/src/main/res/layout/menu_item_photoleft.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/menu_item_photoleft.xml	(date 1467729866000)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="horizontal"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:padding="8dp">
+
+        <ImageView android:id="@+id/image"
+                   android:layout_width="48dp"
+                   android:layout_height="48dp"
+                   android:scaleType="centerCrop"
+                />
+
+        <TextView android:id="@+id/title"
+                  android:textAppearance="?android:textAppearanceMedium"
+                  android:layout_width="match_parent"
+                  android:layout_height="wrap_content"
+                  android:layout_gravity="center_vertical"
+                  android:paddingLeft="8dp"
+                />
+</LinearLayout>
+
Index: TravelAnalyser11/core/src/main/res/layout/drawer_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/drawer_item.xml b/TravelAnalyser11/core/src/main/res/layout/drawer_item.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/drawer_item.xml	(date 1467729866000)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textAppearance="?attr/textAppearanceListItemSmall"
+    android:gravity="center_vertical"
+    android:paddingLeft="?android:attr/listPreferredItemPaddingLeft"
+    android:paddingRight="?android:attr/listPreferredItemPaddingRight"
+    android:minHeight="?android:attr/listPreferredItemHeightSmall"
+    android:textColor="@color/textColor"/>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/layout/dialog_item_single_choice.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/dialog_item_single_choice.xml b/TravelAnalyser11/core/src/main/res/layout/dialog_item_single_choice.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/dialog_item_single_choice.xml	(date 1467729866000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v7.widget.AppCompatCheckedTextView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    app:theme="@style/SelectionDialog.CheckedTextView" />
Index: TravelAnalyser11/core/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/dimens.xml b/TravelAnalyser11/core/src/main/res/values/dimens.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/dimens.xml	(date 1467729866000)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_margin_horizontal">16dp</dimen>
+    <dimen name="activity_margin_vertical">16dp</dimen>
+    <dimen name="activity_margin">8dp</dimen>
+    <dimen name="card_margin_horizontal">8dp</dimen>
+    <dimen name="card_margin_top">4dp</dimen>
+    <dimen name="card_margin_bottom">6dp</dimen>
+    <dimen name="list_card_margin_top">8dp</dimen>
+    <dimen name="list_card_margin_bottom">10dp</dimen>
+    <dimen name="view_margin_vertical">4dp</dimen>
+    <dimen name="view_margin_horizontal">4dp</dimen>
+    <dimen name="grid_margin">8dp</dimen>
+    <dimen name="grid_menu_margin">6dp</dimen>
+    <dimen name="content_padding">4dp</dimen>
+
+    <!-- material design -->
+    <!-- elevations for material design -->
+    <dimen name="elevation_card">2dp</dimen>
+    <dimen name="elevation_fab">8dp</dimen>
+    <dimen name="elevation_toolbar">4dp</dimen>
+
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="spacing_xsmall">2dp</dimen>
+    <dimen name="spacing_medium">8dp</dimen>
+    <dimen name="spacing_large">16dp</dimen>
+    <dimen name="spacing_xlarge">32dp</dimen>
+
+    <!-- FAB -->
+    <dimen name="fab_compat_margin">0dp</dimen>
+
+</resources>
Index: TravelAnalyser11/core/src/main/res/layout/fragment_grid_3cols.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/layout/fragment_grid_3cols.xml b/TravelAnalyser11/core/src/main/res/layout/fragment_grid_3cols.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/layout/fragment_grid_3cols.xml	(date 1467729866000)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <GridView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:clipToPadding="false"
+        android:drawSelectorOnTop="true"
+        android:horizontalSpacing="@dimen/grid_margin"
+        android:numColumns="@integer/grid_columns_3"
+        android:padding="@dimen/activity_margin"
+        android:scrollbarStyle="outsideOverlay"
+        android:verticalSpacing="@dimen/grid_margin" />
+
+    <ProgressBar
+        android:id="@+id/progressContainer"
+        style="?android:attr/progressBarStyleLarge"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:visibility="gone" />
+
+    <TextView
+        android:id="@android:id/empty"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:text="@string/no_items_found"
+        android:visibility="gone" />
+</FrameLayout>
Index: TravelAnalyser11/core/src/main/res/values/image_loader_defaults.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/image_loader_defaults.xml b/TravelAnalyser11/core/src/main/res/values/image_loader_defaults.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/image_loader_defaults.xml	(date 1467729866000)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="ima_il_placeholder">@android:color/transparent</color>
+    <drawable name="ima_il_error">@drawable/ic_ibm_placeholder</drawable>
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/autogenerated-resources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/autogenerated-resources.xml b/TravelAnalyser11/core/src/main/res/values/autogenerated-resources.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/autogenerated-resources.xml	(date 1467729866000)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="drawer" type="menu"/>
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/styles.xml b/TravelAnalyser11/core/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/styles.xml	(date 1467729866000)
@@ -0,0 +1,98 @@
+<resources>
+
+    <style name="ToolbarOverlayTheme" parent="@style/ThemeOverlay.AppCompat.ActionBar"/>
+
+    <!-- fix background for dialog theme -->
+    <style name="SelectionDialog" parent="Theme.AppCompat.Light.Dialog">
+        <item name="android:textColor">@android:color/black</item>
+    </style>
+
+    <style name="SelectionDialog.PreL">
+        <item name="android:windowBackground">@color/transparent</item>
+    </style>
+
+    <style name="SelectionDialog.SearchView" parent="Base.Widget.AppCompat.SearchView">
+        <item name="android:editTextColor">@android:color/black</item>
+        <item name="android:textColorPrimary">@android:color/black</item>
+        <item name="colorPrimary">@android:color/black</item>
+        <item name="colorAccent">@android:color/black</item>
+        <item name="editTextColor">@android:color/black</item>
+
+        <!-- colors -->
+        <item name="android:textColorSecondary">@android:color/black</item>
+        <item name="colorControlHighlight">@android:color/black</item>
+        <item name="colorControlActivated">@android:color/black</item>
+    </style>
+
+    <style name="SelectionDialog.CheckedTextView">
+        <item name="android:checkMark">?android:attr/listChoiceIndicatorMultiple</item>
+        <item name="android:gravity">center_vertical</item>
+        <item name="android:paddingLeft">?android:attr/listPreferredItemPaddingLeft</item>
+        <item name="android:paddingRight">?android:attr/listPreferredItemPaddingRight</item>
+        <item name="android:textAppearance">?android:attr/textAppearanceListItemSmall</item>
+        <item name="android:textColor">@android:color/black</item>
+    </style>
+
+    <!-- base styles for the login form -->
+    <style name="SignInEditText" />
+
+    <!-- action mode background -->
+    <style name="ActionModeStyle" parent="@style/Widget.AppCompat.ActionMode">
+        <item name="background">@color/actionbar_background</item>
+    </style>
+
+    <!-- base style for all texts -->
+    <style name="TextStyle">
+        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Body1</item>
+        <item name="android:textColor">@color/textColor</item>
+    </style>
+
+    <!-- style for edits -->
+    <style name="EditTextStyle" parent="TextStyle">
+        <item name="android:inputType">textNoSuggestions</item>
+        <item name="android:background">@color/transparent</item>
+    </style>
+
+    <style name="FormField">
+        <item name="android:paddingLeft">@dimen/activity_margin_horizontal</item>
+        <item name="android:paddingRight">@dimen/activity_margin_horizontal</item>
+    </style>
+
+    <style name="FormField.FormLabel">
+        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Caption</item>
+        <item name="android:gravity">center_vertical</item>
+    </style>
+
+    <!-- form label without extra paddings (for using in complex layouts) -->
+    <style name="FormLabel">
+        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Caption</item>
+        <item name="android:gravity">center_vertical</item>
+    </style>
+
+    <style name="FormField.FormValue">
+        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Body1</item>
+        <item name="android:textColor">@color/textColor</item>
+        <item name="android:gravity">center_vertical</item>
+    </style>
+
+    <style name="FormField.EditLayout">
+        <item name="android:paddingTop">@dimen/spacing_medium</item>
+        <item name="android:paddingBottom">@dimen/spacing_medium</item>
+    </style>
+
+    <style name="FormField.Switch">
+        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Caption</item>
+        <item name="showText">false</item>
+        <item name="android:textColor">@color/textColorSecondary</item>
+    </style>
+
+    <style name="DatePicker">
+        <item name="android:paddingTop">@dimen/spacing_medium</item>
+        <item name="android:paddingBottom">@dimen/spacing_medium</item>
+    </style>
+
+    <style name="FormField.BooleanPicker" />
+
+    <style name="PickerSpinner" parent="@style/Widget.AppCompat.Spinner" />
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/attrs.xml b/TravelAnalyser11/core/src/main/res/values/attrs.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/attrs.xml	(date 1467729866000)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+    <attr name="label" format="string" localization="suggested"/>
+    <attr name="index" format="integer" />
+
+    <declare-styleable name="DateRangePicker">
+        <attr name="label"/>
+    </declare-styleable>
+
+    <declare-styleable name="DateTimePicker">
+        <attr name="label"/>
+    </declare-styleable>
+
+    <declare-styleable name="ListSelectionPicker">
+        <attr name="label"/>
+    </declare-styleable>
+
+    <declare-styleable name="DatePicker">
+        <attr name="label" />
+    </declare-styleable>
+
+    <declare-styleable name="TristateBooleanPicker">
+        <attr name="label" />
+    </declare-styleable>
+
+    <declare-styleable name="ImagePicker">
+        <attr name="label" />
+        <attr name="index" />
+    </declare-styleable>
+
+    <declare-styleable name="GeoPicker">
+        <attr name="label" />
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/colors.xml b/TravelAnalyser11/core/src/main/res/values/colors.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/colors.xml	(date 1467729866000)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+    <!-- the background of grid items -->
+    <drawable name="grid_item_background">@drawable/background_card</drawable>
+
+    <!-- the background of list items -->
+    <drawable name="background_card">@drawable/bg_light_card</drawable>
+    <!-- background image for all activities -->
+    <drawable name="activity_background_image">@android:color/transparent</drawable>
+    <!-- The color will be override by the app -->
+    <color name="window_background">#000000</color>
+    <color name="textColor">#000000</color>
+    <color name="textColorSecondary">#000000</color>
+    <color name="textColorTertiary">#000000</color>
+    <color name="textColorMuted">#000000</color>
+    <color name="transparent">#00000000</color>
+    <color name="actionbar_background">#ffcb412a</color>
+    <color name="textBarColor">#fffcfcfc</color>
+    <color name="primaryDark">#ffcb412a</color>
+    <color name="cardBackgroundColor">#99000000</color>
+    <color name="selectionColor">#99dfdfdf</color>
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/ids.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/ids.xml b/TravelAnalyser11/core/src/main/res/values/ids.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/ids.xml	(date 1467729866000)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+
+    <!--
+        Generate an id for view containers
+    -->
+    <item name="progressContainer" type="id"/>
+    <item name="contentContainer" type="id"/>
+
+    <item name="action_refresh" type="id"/>
+    <item name="action_save" type="id" />
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/layout.xml b/TravelAnalyser11/core/src/main/res/values/layout.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/layout.xml	(date 1467729866000)
@@ -0,0 +1,18 @@
+
+
+<resources>
+
+    <!--
+    Layout alias to replace the single-pane version of the layout with a
+    two-pane version on Large screens.
+
+    For more on layout aliases, see:
+    http://developer.android.com/training/multiscreen/screensizes.html#TaskUseAliasFilters
+    -->
+    <item name="fragment_listing" type="layout">@layout/fragment_list</item>
+    <integer name="grid_columns">2</integer>
+    <integer name="grid_columns_3">3</integer>
+    <integer name="grid_columns_4">4</integer>
+    <bool name="tabletLayout">false</bool>
+
+</resources>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values/strings.xml b/TravelAnalyser11/core/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values/strings.xml	(date 1467729866000)
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+
+    <string name="app_name">IBM Mobile App Builder Android Framework</string>
+    <string name="drawer_open">Open main menu</string>
+    <string name="drawer_close">Close main menu</string>
+    <string name="drawer_title">Select a section</string>
+    <string name="detail">Detail</string>
+    <string name="loading">loading</string>
+    <string name="action_refresh">Refresh</string>
+    <string name="share">Share</string>
+    <string name="send_email">Send Email</string>
+    <string name="call">Call with</string>
+    <string name="playsong">Play Song</string>
+    <string name="open_url">Open Link</string>
+    <string name="search_title">Search</string>
+    <string name="find_on_map">Find On Map</string>
+    <string name="selectOneItem">Select one item</string>
+    <string name="loading_message">Loading…</string>
+
+    <!-- Strings related to login -->
+    <string name="prompt_email">Email</string>
+    <string name="prompt_password">Password</string>
+
+    <!-- Error strings -->
+    <string name="error_data_generic">Network error!</string>
+    <string name="error_data_unauthorized">Authorization Required</string>
+    <string name="error_invalid_email">This field is invalid</string>
+    <string name="error_incorrect_password">This field is incorrect</string>
+    <string name="error_field_required">This field is required</string>
+    <string name="error_login">Invalid Email or Password</string>
+    <string name="error_network_unavailable">No Internet Connection Available</string>
+
+    <!-- forms -->
+    <string name="filter">Filter</string>
+    <string name="reset">Reset</string>
+    <string name="minimum_date">From: select start date</string>
+    <string name="maximum_date">To: select end date</string>
+    <string name="select">Select</string>
+    <string name="datemin_filter_format">From: %1$s</string>
+    <string name="datemax_filter_format">To: %1$s</string>
+    <string name="select_date">Select date</string>
+    <string name="select_time">Select time</string>
+    <string name="items_deleted">Items deleted</string>
+    <string name="item_deleted">Item deleted</string>
+    <string name="item_created">Item created</string>
+    <string name="item_updated">Item updated</string>
+    <string name="correct_errors">Please, correct errors</string>
+    <string name="remove_items">Remove items</string>
+    <string name="remove_item">Delete</string>
+    <string name="latitude">latitude</string>
+    <string name="longitude">longitude</string>
+    <string name="get_my_location">Get my location</string>
+    <string name="not_set">Not set</string>
+    <string name="saving_changes">Saving changes</string>
+    <string name="no_items_found">No items found</string>
+    <string name="play_video">Play video</string>
+
+    <array name="image_picker_actions">
+        <item>Take a picture</item>
+        <item>Choose from gallery</item>
+        <item>Remove</item>
+    </array>
+
+</resources>
Index: TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_black.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_black.xml b/TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_black.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_black.xml	(date 1467729866000)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- Non focused states -->
+    <item android:state_focused="false" android:state_selected="false" android:state_pressed="false"
+          android:drawable="@android:color/transparent"/>
+    <item android:state_focused="false" android:state_selected="true" android:state_pressed="false"
+          android:drawable="@drawable/tab_selected_black"/>
+
+    <!-- Focused states -->
+    <item android:state_focused="true" android:state_selected="false" android:state_pressed="false"
+          android:drawable="@drawable/tab_unselected_focused_black"/>
+    <item android:state_focused="true" android:state_selected="true" android:state_pressed="false"
+          android:drawable="@drawable/tab_selected_focused_black"/>
+
+    <!-- Pressed -->
+    <!--    Non focused states -->
+    <item android:state_focused="false" android:state_selected="false" android:state_pressed="true"
+          android:drawable="@drawable/tab_unselected_pressed_black"/>
+    <item android:state_focused="false" android:state_selected="true" android:state_pressed="true"
+          android:drawable="@drawable/tab_selected_pressed_black"/>
+
+    <!--    Focused states -->
+    <item android:state_focused="true" android:state_selected="false" android:state_pressed="true"
+          android:drawable="@drawable/tab_unselected_pressed_black"/>
+    <item android:state_focused="true" android:state_selected="true" android:state_pressed="true"
+          android:drawable="@drawable/tab_selected_pressed_black"/>
+</selector>
Index: TravelAnalyser11/core/src/main/res/drawable/drawer_item_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/drawer_item_background.xml b/TravelAnalyser11/core/src/main/res/drawable/drawer_item_background.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/drawer_item_background.xml	(date 1467729866000)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@color/selectionColor" android:state_checked="true" />
+    <item android:drawable="@color/window_background" />
+</selector>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/drawable/list_item_activated_bg.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/list_item_activated_bg.xml b/TravelAnalyser11/core/src/main/res/drawable/list_item_activated_bg.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/list_item_activated_bg.xml	(date 1467729866000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_activated="true" android:drawable="@color/selectionColor" /> <!-- activated -->
+    <item android:drawable="@color/transparent" /> <!-- default -->
+</selector>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/drawable/divider.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/divider.xml b/TravelAnalyser11/core/src/main/res/drawable/divider.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/divider.xml	(date 1467729866000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <size android:height="1dp"/>
+    <solid android:color="@color/textColorMuted"/>
+</shape>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/drawable/button_login_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/button_login_background.xml b/TravelAnalyser11/core/src/main/res/drawable/button_login_background.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/button_login_background.xml	(date 1467729866000)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <!--  Non focused states
+     -->
+    <item android:state_focused="false" android:state_selected="false" android:state_pressed="false"
+          android:drawable="@drawable/button_login_shape"/>
+    <item android:state_focused="false" android:state_selected="true" android:state_pressed="false"
+          android:drawable="@drawable/button_login_shape"/>
+    <!--  Focused states
+     -->
+    <item android:state_focused="true" android:state_selected="false" android:state_pressed="false"
+          android:drawable="@drawable/button_login_shape"/>
+    <item android:state_focused="true" android:state_selected="true" android:state_pressed="false"
+          android:drawable="@drawable/button_login_shape"/>
+    <!--  Pressed
+     -->
+    <item android:state_pressed="true" android:drawable="@drawable/button_login_shape"/>
+</selector>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/drawable/button_login_shape.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/button_login_shape.xml b/TravelAnalyser11/core/src/main/res/drawable/button_login_shape.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/button_login_shape.xml	(date 1467729866000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <stroke android:width="1dp" android:color="@color/textColor"/>
+    <solid android:color="#1A000000"/>
+    <corners android:radius="6dp"/>
+
+</shape>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/drawable/edit_text_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/edit_text_background.xml b/TravelAnalyser11/core/src/main/res/drawable/edit_text_background.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/edit_text_background.xml	(date 1467729866000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <stroke android:width="1dp" android:color="@color/textColor"/>
+    <solid android:color="@android:color/transparent"/>
+    <corners android:radius="6dp"/>
+
+</shape>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_white.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_white.xml b/TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_white.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/tab_indicator_ab_white.xml	(date 1467729866000)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- Non focused states -->
+    <item android:state_focused="false" android:state_selected="false" android:state_pressed="false"
+          android:drawable="@android:color/transparent"/>
+    <item android:state_focused="false" android:state_selected="true" android:state_pressed="false"
+          android:drawable="@drawable/tab_selected_white"/>
+
+    <!-- Focused states -->
+    <item android:state_focused="true" android:state_selected="false" android:state_pressed="false"
+          android:drawable="@drawable/tab_unselected_focused_white"/>
+    <item android:state_focused="true" android:state_selected="true" android:state_pressed="false"
+          android:drawable="@drawable/tab_selected_focused_white"/>
+
+    <!-- Pressed -->
+    <!--    Non focused states -->
+    <item android:state_focused="false" android:state_selected="false" android:state_pressed="true"
+          android:drawable="@drawable/tab_unselected_pressed_white"/>
+    <item android:state_focused="false" android:state_selected="true" android:state_pressed="true"
+          android:drawable="@drawable/tab_selected_pressed_white"/>
+
+    <!--    Focused states -->
+    <item android:state_focused="true" android:state_selected="false" android:state_pressed="true"
+          android:drawable="@drawable/tab_unselected_pressed_white"/>
+    <item android:state_focused="true" android:state_selected="true" android:state_pressed="true"
+          android:drawable="@drawable/tab_selected_pressed_white"/>
+</selector>
Index: TravelAnalyser11/core/src/main/res/drawable/background_tabs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/drawable/background_tabs.xml b/TravelAnalyser11/core/src/main/res/drawable/background_tabs.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/drawable/background_tabs.xml	(date 1467729866000)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
+        android:src="@drawable/tabs_pattern"
+        android:tileMode="repeat"/>
\ No newline at end of file
Index: TravelAnalyser11/core/src/main/res/values-v21/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TravelAnalyser11/core/src/main/res/values-v21/dimens.xml b/TravelAnalyser11/core/src/main/res/values-v21/dimens.xml
new file mode 100644
--- /dev/null	(date 1467729866000)
+++ b/TravelAnalyser11/core/src/main/res/values-v21/dimens.xml	(date 1467729866000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<resources>
+    <dimen name="fab_compat_margin">16dp</dimen>
+</resources>
\ No newline at end of file
